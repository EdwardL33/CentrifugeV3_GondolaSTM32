
Centrifuge_Gondola.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008710  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d8  08008820  08008820  00009820  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080089f8  080089f8  0000a068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080089f8  080089f8  000099f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008a00  08008a00  0000a068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008a00  08008a00  00009a00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008a04  08008a04  00009a04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08008a08  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a0  20000068  08008a70  0000a068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000308  08008a70  0000a308  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e992  00000000  00000000  0000a091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002953  00000000  00000000  00018a23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e08  00000000  00000000  0001b378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000acf  00000000  00000000  0001c180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000190e9  00000000  00000000  0001cc4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011b3d  00000000  00000000  00035d38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088f8d  00000000  00000000  00047875  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d0802  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004358  00000000  00000000  000d0848  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000d4ba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000068 	.word	0x20000068
 800012c:	00000000 	.word	0x00000000
 8000130:	08008808 	.word	0x08008808

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000006c 	.word	0x2000006c
 800014c:	08008808 	.word	0x08008808

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_d2f>:
 80004d8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80004dc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80004e0:	bf24      	itt	cs
 80004e2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80004e6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80004ea:	d90d      	bls.n	8000508 <__aeabi_d2f+0x30>
 80004ec:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80004f0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80004f4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80004f8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80004fc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000500:	bf08      	it	eq
 8000502:	f020 0001 	biceq.w	r0, r0, #1
 8000506:	4770      	bx	lr
 8000508:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 800050c:	d121      	bne.n	8000552 <__aeabi_d2f+0x7a>
 800050e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000512:	bfbc      	itt	lt
 8000514:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000518:	4770      	bxlt	lr
 800051a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800051e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000522:	f1c2 0218 	rsb	r2, r2, #24
 8000526:	f1c2 0c20 	rsb	ip, r2, #32
 800052a:	fa10 f30c 	lsls.w	r3, r0, ip
 800052e:	fa20 f002 	lsr.w	r0, r0, r2
 8000532:	bf18      	it	ne
 8000534:	f040 0001 	orrne.w	r0, r0, #1
 8000538:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800053c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000540:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000544:	ea40 000c 	orr.w	r0, r0, ip
 8000548:	fa23 f302 	lsr.w	r3, r3, r2
 800054c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000550:	e7cc      	b.n	80004ec <__aeabi_d2f+0x14>
 8000552:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000556:	d107      	bne.n	8000568 <__aeabi_d2f+0x90>
 8000558:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800055c:	bf1e      	ittt	ne
 800055e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000562:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000566:	4770      	bxne	lr
 8000568:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 800056c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000570:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <__aeabi_frsub>:
 8000578:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 800057c:	e002      	b.n	8000584 <__addsf3>
 800057e:	bf00      	nop

08000580 <__aeabi_fsub>:
 8000580:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000584 <__addsf3>:
 8000584:	0042      	lsls	r2, r0, #1
 8000586:	bf1f      	itttt	ne
 8000588:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800058c:	ea92 0f03 	teqne	r2, r3
 8000590:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000594:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000598:	d06a      	beq.n	8000670 <__addsf3+0xec>
 800059a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800059e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80005a2:	bfc1      	itttt	gt
 80005a4:	18d2      	addgt	r2, r2, r3
 80005a6:	4041      	eorgt	r1, r0
 80005a8:	4048      	eorgt	r0, r1
 80005aa:	4041      	eorgt	r1, r0
 80005ac:	bfb8      	it	lt
 80005ae:	425b      	neglt	r3, r3
 80005b0:	2b19      	cmp	r3, #25
 80005b2:	bf88      	it	hi
 80005b4:	4770      	bxhi	lr
 80005b6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80005ba:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80005be:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80005c2:	bf18      	it	ne
 80005c4:	4240      	negne	r0, r0
 80005c6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80005ca:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80005ce:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80005d2:	bf18      	it	ne
 80005d4:	4249      	negne	r1, r1
 80005d6:	ea92 0f03 	teq	r2, r3
 80005da:	d03f      	beq.n	800065c <__addsf3+0xd8>
 80005dc:	f1a2 0201 	sub.w	r2, r2, #1
 80005e0:	fa41 fc03 	asr.w	ip, r1, r3
 80005e4:	eb10 000c 	adds.w	r0, r0, ip
 80005e8:	f1c3 0320 	rsb	r3, r3, #32
 80005ec:	fa01 f103 	lsl.w	r1, r1, r3
 80005f0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80005f4:	d502      	bpl.n	80005fc <__addsf3+0x78>
 80005f6:	4249      	negs	r1, r1
 80005f8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80005fc:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000600:	d313      	bcc.n	800062a <__addsf3+0xa6>
 8000602:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000606:	d306      	bcc.n	8000616 <__addsf3+0x92>
 8000608:	0840      	lsrs	r0, r0, #1
 800060a:	ea4f 0131 	mov.w	r1, r1, rrx
 800060e:	f102 0201 	add.w	r2, r2, #1
 8000612:	2afe      	cmp	r2, #254	@ 0xfe
 8000614:	d251      	bcs.n	80006ba <__addsf3+0x136>
 8000616:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 800061a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800061e:	bf08      	it	eq
 8000620:	f020 0001 	biceq.w	r0, r0, #1
 8000624:	ea40 0003 	orr.w	r0, r0, r3
 8000628:	4770      	bx	lr
 800062a:	0049      	lsls	r1, r1, #1
 800062c:	eb40 0000 	adc.w	r0, r0, r0
 8000630:	3a01      	subs	r2, #1
 8000632:	bf28      	it	cs
 8000634:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000638:	d2ed      	bcs.n	8000616 <__addsf3+0x92>
 800063a:	fab0 fc80 	clz	ip, r0
 800063e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000642:	ebb2 020c 	subs.w	r2, r2, ip
 8000646:	fa00 f00c 	lsl.w	r0, r0, ip
 800064a:	bfaa      	itet	ge
 800064c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000650:	4252      	neglt	r2, r2
 8000652:	4318      	orrge	r0, r3
 8000654:	bfbc      	itt	lt
 8000656:	40d0      	lsrlt	r0, r2
 8000658:	4318      	orrlt	r0, r3
 800065a:	4770      	bx	lr
 800065c:	f092 0f00 	teq	r2, #0
 8000660:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000664:	bf06      	itte	eq
 8000666:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 800066a:	3201      	addeq	r2, #1
 800066c:	3b01      	subne	r3, #1
 800066e:	e7b5      	b.n	80005dc <__addsf3+0x58>
 8000670:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000674:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000678:	bf18      	it	ne
 800067a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800067e:	d021      	beq.n	80006c4 <__addsf3+0x140>
 8000680:	ea92 0f03 	teq	r2, r3
 8000684:	d004      	beq.n	8000690 <__addsf3+0x10c>
 8000686:	f092 0f00 	teq	r2, #0
 800068a:	bf08      	it	eq
 800068c:	4608      	moveq	r0, r1
 800068e:	4770      	bx	lr
 8000690:	ea90 0f01 	teq	r0, r1
 8000694:	bf1c      	itt	ne
 8000696:	2000      	movne	r0, #0
 8000698:	4770      	bxne	lr
 800069a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 800069e:	d104      	bne.n	80006aa <__addsf3+0x126>
 80006a0:	0040      	lsls	r0, r0, #1
 80006a2:	bf28      	it	cs
 80006a4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 80006a8:	4770      	bx	lr
 80006aa:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 80006ae:	bf3c      	itt	cc
 80006b0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 80006b4:	4770      	bxcc	lr
 80006b6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80006ba:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 80006be:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80006c2:	4770      	bx	lr
 80006c4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80006c8:	bf16      	itet	ne
 80006ca:	4608      	movne	r0, r1
 80006cc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80006d0:	4601      	movne	r1, r0
 80006d2:	0242      	lsls	r2, r0, #9
 80006d4:	bf06      	itte	eq
 80006d6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80006da:	ea90 0f01 	teqeq	r0, r1
 80006de:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80006e2:	4770      	bx	lr

080006e4 <__aeabi_ui2f>:
 80006e4:	f04f 0300 	mov.w	r3, #0
 80006e8:	e004      	b.n	80006f4 <__aeabi_i2f+0x8>
 80006ea:	bf00      	nop

080006ec <__aeabi_i2f>:
 80006ec:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80006f0:	bf48      	it	mi
 80006f2:	4240      	negmi	r0, r0
 80006f4:	ea5f 0c00 	movs.w	ip, r0
 80006f8:	bf08      	it	eq
 80006fa:	4770      	bxeq	lr
 80006fc:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000700:	4601      	mov	r1, r0
 8000702:	f04f 0000 	mov.w	r0, #0
 8000706:	e01c      	b.n	8000742 <__aeabi_l2f+0x2a>

08000708 <__aeabi_ul2f>:
 8000708:	ea50 0201 	orrs.w	r2, r0, r1
 800070c:	bf08      	it	eq
 800070e:	4770      	bxeq	lr
 8000710:	f04f 0300 	mov.w	r3, #0
 8000714:	e00a      	b.n	800072c <__aeabi_l2f+0x14>
 8000716:	bf00      	nop

08000718 <__aeabi_l2f>:
 8000718:	ea50 0201 	orrs.w	r2, r0, r1
 800071c:	bf08      	it	eq
 800071e:	4770      	bxeq	lr
 8000720:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000724:	d502      	bpl.n	800072c <__aeabi_l2f+0x14>
 8000726:	4240      	negs	r0, r0
 8000728:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800072c:	ea5f 0c01 	movs.w	ip, r1
 8000730:	bf02      	ittt	eq
 8000732:	4684      	moveq	ip, r0
 8000734:	4601      	moveq	r1, r0
 8000736:	2000      	moveq	r0, #0
 8000738:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 800073c:	bf08      	it	eq
 800073e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000742:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000746:	fabc f28c 	clz	r2, ip
 800074a:	3a08      	subs	r2, #8
 800074c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000750:	db10      	blt.n	8000774 <__aeabi_l2f+0x5c>
 8000752:	fa01 fc02 	lsl.w	ip, r1, r2
 8000756:	4463      	add	r3, ip
 8000758:	fa00 fc02 	lsl.w	ip, r0, r2
 800075c:	f1c2 0220 	rsb	r2, r2, #32
 8000760:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000764:	fa20 f202 	lsr.w	r2, r0, r2
 8000768:	eb43 0002 	adc.w	r0, r3, r2
 800076c:	bf08      	it	eq
 800076e:	f020 0001 	biceq.w	r0, r0, #1
 8000772:	4770      	bx	lr
 8000774:	f102 0220 	add.w	r2, r2, #32
 8000778:	fa01 fc02 	lsl.w	ip, r1, r2
 800077c:	f1c2 0220 	rsb	r2, r2, #32
 8000780:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000784:	fa21 f202 	lsr.w	r2, r1, r2
 8000788:	eb43 0002 	adc.w	r0, r3, r2
 800078c:	bf08      	it	eq
 800078e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000792:	4770      	bx	lr

08000794 <__aeabi_fmul>:
 8000794:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000798:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 800079c:	bf1e      	ittt	ne
 800079e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80007a2:	ea92 0f0c 	teqne	r2, ip
 80007a6:	ea93 0f0c 	teqne	r3, ip
 80007aa:	d06f      	beq.n	800088c <__aeabi_fmul+0xf8>
 80007ac:	441a      	add	r2, r3
 80007ae:	ea80 0c01 	eor.w	ip, r0, r1
 80007b2:	0240      	lsls	r0, r0, #9
 80007b4:	bf18      	it	ne
 80007b6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80007ba:	d01e      	beq.n	80007fa <__aeabi_fmul+0x66>
 80007bc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80007c0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80007c4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80007c8:	fba0 3101 	umull	r3, r1, r0, r1
 80007cc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80007d0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80007d4:	bf3e      	ittt	cc
 80007d6:	0049      	lslcc	r1, r1, #1
 80007d8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80007dc:	005b      	lslcc	r3, r3, #1
 80007de:	ea40 0001 	orr.w	r0, r0, r1
 80007e2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80007e6:	2afd      	cmp	r2, #253	@ 0xfd
 80007e8:	d81d      	bhi.n	8000826 <__aeabi_fmul+0x92>
 80007ea:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80007ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80007f2:	bf08      	it	eq
 80007f4:	f020 0001 	biceq.w	r0, r0, #1
 80007f8:	4770      	bx	lr
 80007fa:	f090 0f00 	teq	r0, #0
 80007fe:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000802:	bf08      	it	eq
 8000804:	0249      	lsleq	r1, r1, #9
 8000806:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800080a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800080e:	3a7f      	subs	r2, #127	@ 0x7f
 8000810:	bfc2      	ittt	gt
 8000812:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000816:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800081a:	4770      	bxgt	lr
 800081c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000820:	f04f 0300 	mov.w	r3, #0
 8000824:	3a01      	subs	r2, #1
 8000826:	dc5d      	bgt.n	80008e4 <__aeabi_fmul+0x150>
 8000828:	f112 0f19 	cmn.w	r2, #25
 800082c:	bfdc      	itt	le
 800082e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000832:	4770      	bxle	lr
 8000834:	f1c2 0200 	rsb	r2, r2, #0
 8000838:	0041      	lsls	r1, r0, #1
 800083a:	fa21 f102 	lsr.w	r1, r1, r2
 800083e:	f1c2 0220 	rsb	r2, r2, #32
 8000842:	fa00 fc02 	lsl.w	ip, r0, r2
 8000846:	ea5f 0031 	movs.w	r0, r1, rrx
 800084a:	f140 0000 	adc.w	r0, r0, #0
 800084e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000852:	bf08      	it	eq
 8000854:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000858:	4770      	bx	lr
 800085a:	f092 0f00 	teq	r2, #0
 800085e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000862:	bf02      	ittt	eq
 8000864:	0040      	lsleq	r0, r0, #1
 8000866:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800086a:	3a01      	subeq	r2, #1
 800086c:	d0f9      	beq.n	8000862 <__aeabi_fmul+0xce>
 800086e:	ea40 000c 	orr.w	r0, r0, ip
 8000872:	f093 0f00 	teq	r3, #0
 8000876:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800087a:	bf02      	ittt	eq
 800087c:	0049      	lsleq	r1, r1, #1
 800087e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000882:	3b01      	subeq	r3, #1
 8000884:	d0f9      	beq.n	800087a <__aeabi_fmul+0xe6>
 8000886:	ea41 010c 	orr.w	r1, r1, ip
 800088a:	e78f      	b.n	80007ac <__aeabi_fmul+0x18>
 800088c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000890:	ea92 0f0c 	teq	r2, ip
 8000894:	bf18      	it	ne
 8000896:	ea93 0f0c 	teqne	r3, ip
 800089a:	d00a      	beq.n	80008b2 <__aeabi_fmul+0x11e>
 800089c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80008a0:	bf18      	it	ne
 80008a2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80008a6:	d1d8      	bne.n	800085a <__aeabi_fmul+0xc6>
 80008a8:	ea80 0001 	eor.w	r0, r0, r1
 80008ac:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80008b0:	4770      	bx	lr
 80008b2:	f090 0f00 	teq	r0, #0
 80008b6:	bf17      	itett	ne
 80008b8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 80008bc:	4608      	moveq	r0, r1
 80008be:	f091 0f00 	teqne	r1, #0
 80008c2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 80008c6:	d014      	beq.n	80008f2 <__aeabi_fmul+0x15e>
 80008c8:	ea92 0f0c 	teq	r2, ip
 80008cc:	d101      	bne.n	80008d2 <__aeabi_fmul+0x13e>
 80008ce:	0242      	lsls	r2, r0, #9
 80008d0:	d10f      	bne.n	80008f2 <__aeabi_fmul+0x15e>
 80008d2:	ea93 0f0c 	teq	r3, ip
 80008d6:	d103      	bne.n	80008e0 <__aeabi_fmul+0x14c>
 80008d8:	024b      	lsls	r3, r1, #9
 80008da:	bf18      	it	ne
 80008dc:	4608      	movne	r0, r1
 80008de:	d108      	bne.n	80008f2 <__aeabi_fmul+0x15e>
 80008e0:	ea80 0001 	eor.w	r0, r0, r1
 80008e4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80008e8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80008ec:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80008f0:	4770      	bx	lr
 80008f2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80008f6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80008fa:	4770      	bx	lr

080008fc <__aeabi_fdiv>:
 80008fc:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000900:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000904:	bf1e      	ittt	ne
 8000906:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800090a:	ea92 0f0c 	teqne	r2, ip
 800090e:	ea93 0f0c 	teqne	r3, ip
 8000912:	d069      	beq.n	80009e8 <__aeabi_fdiv+0xec>
 8000914:	eba2 0203 	sub.w	r2, r2, r3
 8000918:	ea80 0c01 	eor.w	ip, r0, r1
 800091c:	0249      	lsls	r1, r1, #9
 800091e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000922:	d037      	beq.n	8000994 <__aeabi_fdiv+0x98>
 8000924:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000928:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 800092c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000930:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000934:	428b      	cmp	r3, r1
 8000936:	bf38      	it	cc
 8000938:	005b      	lslcc	r3, r3, #1
 800093a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 800093e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000942:	428b      	cmp	r3, r1
 8000944:	bf24      	itt	cs
 8000946:	1a5b      	subcs	r3, r3, r1
 8000948:	ea40 000c 	orrcs.w	r0, r0, ip
 800094c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000950:	bf24      	itt	cs
 8000952:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000956:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800095a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 800095e:	bf24      	itt	cs
 8000960:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000964:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000968:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 800096c:	bf24      	itt	cs
 800096e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000972:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000976:	011b      	lsls	r3, r3, #4
 8000978:	bf18      	it	ne
 800097a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 800097e:	d1e0      	bne.n	8000942 <__aeabi_fdiv+0x46>
 8000980:	2afd      	cmp	r2, #253	@ 0xfd
 8000982:	f63f af50 	bhi.w	8000826 <__aeabi_fmul+0x92>
 8000986:	428b      	cmp	r3, r1
 8000988:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800098c:	bf08      	it	eq
 800098e:	f020 0001 	biceq.w	r0, r0, #1
 8000992:	4770      	bx	lr
 8000994:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000998:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800099c:	327f      	adds	r2, #127	@ 0x7f
 800099e:	bfc2      	ittt	gt
 80009a0:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80009a4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80009a8:	4770      	bxgt	lr
 80009aa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80009ae:	f04f 0300 	mov.w	r3, #0
 80009b2:	3a01      	subs	r2, #1
 80009b4:	e737      	b.n	8000826 <__aeabi_fmul+0x92>
 80009b6:	f092 0f00 	teq	r2, #0
 80009ba:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 80009be:	bf02      	ittt	eq
 80009c0:	0040      	lsleq	r0, r0, #1
 80009c2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 80009c6:	3a01      	subeq	r2, #1
 80009c8:	d0f9      	beq.n	80009be <__aeabi_fdiv+0xc2>
 80009ca:	ea40 000c 	orr.w	r0, r0, ip
 80009ce:	f093 0f00 	teq	r3, #0
 80009d2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80009d6:	bf02      	ittt	eq
 80009d8:	0049      	lsleq	r1, r1, #1
 80009da:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80009de:	3b01      	subeq	r3, #1
 80009e0:	d0f9      	beq.n	80009d6 <__aeabi_fdiv+0xda>
 80009e2:	ea41 010c 	orr.w	r1, r1, ip
 80009e6:	e795      	b.n	8000914 <__aeabi_fdiv+0x18>
 80009e8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80009ec:	ea92 0f0c 	teq	r2, ip
 80009f0:	d108      	bne.n	8000a04 <__aeabi_fdiv+0x108>
 80009f2:	0242      	lsls	r2, r0, #9
 80009f4:	f47f af7d 	bne.w	80008f2 <__aeabi_fmul+0x15e>
 80009f8:	ea93 0f0c 	teq	r3, ip
 80009fc:	f47f af70 	bne.w	80008e0 <__aeabi_fmul+0x14c>
 8000a00:	4608      	mov	r0, r1
 8000a02:	e776      	b.n	80008f2 <__aeabi_fmul+0x15e>
 8000a04:	ea93 0f0c 	teq	r3, ip
 8000a08:	d104      	bne.n	8000a14 <__aeabi_fdiv+0x118>
 8000a0a:	024b      	lsls	r3, r1, #9
 8000a0c:	f43f af4c 	beq.w	80008a8 <__aeabi_fmul+0x114>
 8000a10:	4608      	mov	r0, r1
 8000a12:	e76e      	b.n	80008f2 <__aeabi_fmul+0x15e>
 8000a14:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000a18:	bf18      	it	ne
 8000a1a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000a1e:	d1ca      	bne.n	80009b6 <__aeabi_fdiv+0xba>
 8000a20:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000a24:	f47f af5c 	bne.w	80008e0 <__aeabi_fmul+0x14c>
 8000a28:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000a2c:	f47f af3c 	bne.w	80008a8 <__aeabi_fmul+0x114>
 8000a30:	e75f      	b.n	80008f2 <__aeabi_fmul+0x15e>
 8000a32:	bf00      	nop

08000a34 <MPU6050_Writebyte>:

static float LSB_Sensitivity_ACC;
static float LSB_Sensitivity_GYRO;

void MPU6050_Writebyte(uint8_t reg_addr, uint8_t val)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b086      	sub	sp, #24
 8000a38:	af04      	add	r7, sp, #16
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	460a      	mov	r2, r1
 8000a3e:	71fb      	strb	r3, [r7, #7]
 8000a40:	4613      	mov	r3, r2
 8000a42:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDR, reg_addr, I2C_MEMADD_SIZE_8BIT, &val, 1, 1);
 8000a44:	79fb      	ldrb	r3, [r7, #7]
 8000a46:	b29a      	uxth	r2, r3
 8000a48:	2301      	movs	r3, #1
 8000a4a:	9302      	str	r3, [sp, #8]
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	9301      	str	r3, [sp, #4]
 8000a50:	1dbb      	adds	r3, r7, #6
 8000a52:	9300      	str	r3, [sp, #0]
 8000a54:	2301      	movs	r3, #1
 8000a56:	21d0      	movs	r1, #208	@ 0xd0
 8000a58:	4803      	ldr	r0, [pc, #12]	@ (8000a68 <MPU6050_Writebyte+0x34>)
 8000a5a:	f002 f879 	bl	8002b50 <HAL_I2C_Mem_Write>
}
 8000a5e:	bf00      	nop
 8000a60:	3708      	adds	r7, #8
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	200000b8 	.word	0x200000b8

08000a6c <MPU6050_Readbyte>:
{
	HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDR, reg_addr, I2C_MEMADD_SIZE_8BIT, data, len, 1);
}

void MPU6050_Readbyte(uint8_t reg_addr, uint8_t* data)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b086      	sub	sp, #24
 8000a70:	af04      	add	r7, sp, #16
 8000a72:	4603      	mov	r3, r0
 8000a74:	6039      	str	r1, [r7, #0]
 8000a76:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Read(&hi2c2, MPU6050_ADDR, reg_addr, I2C_MEMADD_SIZE_8BIT, data, 1, 1);
 8000a78:	79fb      	ldrb	r3, [r7, #7]
 8000a7a:	b29a      	uxth	r2, r3
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	9302      	str	r3, [sp, #8]
 8000a80:	2301      	movs	r3, #1
 8000a82:	9301      	str	r3, [sp, #4]
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	9300      	str	r3, [sp, #0]
 8000a88:	2301      	movs	r3, #1
 8000a8a:	21d0      	movs	r1, #208	@ 0xd0
 8000a8c:	4803      	ldr	r0, [pc, #12]	@ (8000a9c <MPU6050_Readbyte+0x30>)
 8000a8e:	f002 f959 	bl	8002d44 <HAL_I2C_Mem_Read>
}
 8000a92:	bf00      	nop
 8000a94:	3708      	adds	r7, #8
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	200000b8 	.word	0x200000b8

08000aa0 <MPU6050_Readbytes>:

void MPU6050_Readbytes(uint8_t reg_addr, uint8_t len, uint8_t* data)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b086      	sub	sp, #24
 8000aa4:	af04      	add	r7, sp, #16
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	603a      	str	r2, [r7, #0]
 8000aaa:	71fb      	strb	r3, [r7, #7]
 8000aac:	460b      	mov	r3, r1
 8000aae:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Read(&hi2c2, MPU6050_ADDR, reg_addr, I2C_MEMADD_SIZE_8BIT, data, len, 1);
 8000ab0:	79fb      	ldrb	r3, [r7, #7]
 8000ab2:	b29a      	uxth	r2, r3
 8000ab4:	79bb      	ldrb	r3, [r7, #6]
 8000ab6:	b29b      	uxth	r3, r3
 8000ab8:	2101      	movs	r1, #1
 8000aba:	9102      	str	r1, [sp, #8]
 8000abc:	9301      	str	r3, [sp, #4]
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	9300      	str	r3, [sp, #0]
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	21d0      	movs	r1, #208	@ 0xd0
 8000ac6:	4803      	ldr	r0, [pc, #12]	@ (8000ad4 <MPU6050_Readbytes+0x34>)
 8000ac8:	f002 f93c 	bl	8002d44 <HAL_I2C_Mem_Read>
}
 8000acc:	bf00      	nop
 8000ace:	3708      	adds	r7, #8
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	200000b8 	.word	0x200000b8

08000ad8 <MPU6050_Initialization>:

void MPU6050_Initialization(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
	HAL_Delay(50);
 8000ade:	2032      	movs	r0, #50	@ 0x32
 8000ae0:	f001 fb08 	bl	80020f4 <HAL_Delay>
	uint8_t who_am_i = 0;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	707b      	strb	r3, [r7, #1]
	printf("Checking MPU6050...\n");
 8000ae8:	484b      	ldr	r0, [pc, #300]	@ (8000c18 <MPU6050_Initialization+0x140>)
 8000aea:	f006 fe35 	bl	8007758 <puts>

	MPU6050_Readbyte(MPU6050_WHO_AM_I, &who_am_i);
 8000aee:	1c7b      	adds	r3, r7, #1
 8000af0:	4619      	mov	r1, r3
 8000af2:	2075      	movs	r0, #117	@ 0x75
 8000af4:	f7ff ffba 	bl	8000a6c <MPU6050_Readbyte>
	if(who_am_i == 0x68)
 8000af8:	787b      	ldrb	r3, [r7, #1]
 8000afa:	2b68      	cmp	r3, #104	@ 0x68
 8000afc:	d105      	bne.n	8000b0a <MPU6050_Initialization+0x32>
	{
		printf("MPU6050 who_am_i = 0x%02x...OK\n", who_am_i);
 8000afe:	787b      	ldrb	r3, [r7, #1]
 8000b00:	4619      	mov	r1, r3
 8000b02:	4846      	ldr	r0, [pc, #280]	@ (8000c1c <MPU6050_Initialization+0x144>)
 8000b04:	f006 fdc0 	bl	8007688 <iprintf>
 8000b08:	e00f      	b.n	8000b2a <MPU6050_Initialization+0x52>
	}
	else
	{
		printf("ERROR!\n");
 8000b0a:	4845      	ldr	r0, [pc, #276]	@ (8000c20 <MPU6050_Initialization+0x148>)
 8000b0c:	f006 fe24 	bl	8007758 <puts>
		printf("MPU6050 who_am_i : 0x%02x should be 0x68\n", who_am_i);
 8000b10:	787b      	ldrb	r3, [r7, #1]
 8000b12:	4619      	mov	r1, r3
 8000b14:	4843      	ldr	r0, [pc, #268]	@ (8000c24 <MPU6050_Initialization+0x14c>)
 8000b16:	f006 fdb7 	bl	8007688 <iprintf>
		while(1)
		{
			printf("who am i error. Can not recognize mpu6050\n");
 8000b1a:	4843      	ldr	r0, [pc, #268]	@ (8000c28 <MPU6050_Initialization+0x150>)
 8000b1c:	f006 fe1c 	bl	8007758 <puts>
			HAL_Delay(100);
 8000b20:	2064      	movs	r0, #100	@ 0x64
 8000b22:	f001 fae7 	bl	80020f4 <HAL_Delay>
			printf("who am i error. Can not recognize mpu6050\n");
 8000b26:	bf00      	nop
 8000b28:	e7f7      	b.n	8000b1a <MPU6050_Initialization+0x42>
		}
	}

	//Reset the whole module before initialization
	MPU6050_Writebyte(MPU6050_PWR_MGMT_1, 0x1<<7);
 8000b2a:	2180      	movs	r1, #128	@ 0x80
 8000b2c:	206b      	movs	r0, #107	@ 0x6b
 8000b2e:	f7ff ff81 	bl	8000a34 <MPU6050_Writebyte>
	HAL_Delay(100);
 8000b32:	2064      	movs	r0, #100	@ 0x64
 8000b34:	f001 fade 	bl	80020f4 <HAL_Delay>

	//Power Management setting
	/* Default is sleep mode
	 * necessary to wake up MPU6050*/
	MPU6050_Writebyte(MPU6050_PWR_MGMT_1, 0x00);
 8000b38:	2100      	movs	r1, #0
 8000b3a:	206b      	movs	r0, #107	@ 0x6b
 8000b3c:	f7ff ff7a 	bl	8000a34 <MPU6050_Writebyte>
	HAL_Delay(50);
 8000b40:	2032      	movs	r0, #50	@ 0x32
 8000b42:	f001 fad7 	bl	80020f4 <HAL_Delay>

	MPU6050_Writebyte(MPU6050_PWR_MGMT_2, 0xC0);
 8000b46:	21c0      	movs	r1, #192	@ 0xc0
 8000b48:	206c      	movs	r0, #108	@ 0x6c
 8000b4a:	f7ff ff73 	bl	8000a34 <MPU6050_Writebyte>
	HAL_Delay(50);
 8000b4e:	2032      	movs	r0, #50	@ 0x32
 8000b50:	f001 fad0 	bl	80020f4 <HAL_Delay>

	//Sample rate divider
	/*Sample Rate = Gyroscope Output Rate / (1 + SMPRT_DIV) */
//	MPU6050_Writebyte(MPU6050_SMPRT_DIV, 0x00); // ACC output rate is 1kHz, GYRO output rate is 8kHz
	MPU6050_Writebyte(MPU6050_SMPRT_DIV, 4); //<- n // Sample Rate = 200Hz, n=39 (DesiredHz = y. n = y*8 - 1)
 8000b54:	2104      	movs	r1, #4
 8000b56:	2019      	movs	r0, #25
 8000b58:	f7ff ff6c 	bl	8000a34 <MPU6050_Writebyte>
	HAL_Delay(50);
 8000b5c:	2032      	movs	r0, #50	@ 0x32
 8000b5e:	f001 fac9 	bl	80020f4 <HAL_Delay>

	MPU6050_Writebyte(MPU6050_FIFO_EN, 0x08);// turns off gyro
 8000b62:	2108      	movs	r1, #8
 8000b64:	2023      	movs	r0, #35	@ 0x23
 8000b66:	f7ff ff65 	bl	8000a34 <MPU6050_Writebyte>
	HAL_Delay(50);
 8000b6a:	2032      	movs	r0, #50	@ 0x32
 8000b6c:	f001 fac2 	bl	80020f4 <HAL_Delay>

	//FSYNC and DLPF setting
	/*DLPF is set to 0*/
	MPU6050_Writebyte(MPU6050_CONFIG, 0x00);
 8000b70:	2100      	movs	r1, #0
 8000b72:	201a      	movs	r0, #26
 8000b74:	f7ff ff5e 	bl	8000a34 <MPU6050_Writebyte>
	HAL_Delay(50);
 8000b78:	2032      	movs	r0, #50	@ 0x32
 8000b7a:	f001 fabb 	bl	80020f4 <HAL_Delay>
	/*FS_SEL  Full Scale Range
	  0    	+-250 degree/s
	  1		+-500 degree/s
	  2		+-1000 degree/s
	  3		+-2000 degree/s	*/
	uint8_t FS_SCALE_GYRO = 0x1;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	71fb      	strb	r3, [r7, #7]
	MPU6050_Writebyte(MPU6050_GYRO_CONFIG, FS_SCALE_GYRO<<3);
 8000b82:	79fb      	ldrb	r3, [r7, #7]
 8000b84:	00db      	lsls	r3, r3, #3
 8000b86:	b2db      	uxtb	r3, r3
 8000b88:	4619      	mov	r1, r3
 8000b8a:	201b      	movs	r0, #27
 8000b8c:	f7ff ff52 	bl	8000a34 <MPU6050_Writebyte>
	HAL_Delay(50);
 8000b90:	2032      	movs	r0, #50	@ 0x32
 8000b92:	f001 faaf 	bl	80020f4 <HAL_Delay>
	/*FS_SEL  Full Scale Range
	  0    	+-2g
	  1		+-4g
	  2		+-8g
	  3		+-16g	*/
	uint8_t FS_SCALE_ACC = 0x3;
 8000b96:	2303      	movs	r3, #3
 8000b98:	71bb      	strb	r3, [r7, #6]
	MPU6050_Writebyte(MPU6050_ACCEL_CONFIG, FS_SCALE_ACC<<3);
 8000b9a:	79bb      	ldrb	r3, [r7, #6]
 8000b9c:	00db      	lsls	r3, r3, #3
 8000b9e:	b2db      	uxtb	r3, r3
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	201c      	movs	r0, #28
 8000ba4:	f7ff ff46 	bl	8000a34 <MPU6050_Writebyte>
	HAL_Delay(50);
 8000ba8:	2032      	movs	r0, #50	@ 0x32
 8000baa:	f001 faa3 	bl	80020f4 <HAL_Delay>

	MPU6050_Get_LSB_Sensitivity(FS_SCALE_GYRO, FS_SCALE_ACC);
 8000bae:	79ba      	ldrb	r2, [r7, #6]
 8000bb0:	79fb      	ldrb	r3, [r7, #7]
 8000bb2:	4611      	mov	r1, r2
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f000 f891 	bl	8000cdc <MPU6050_Get_LSB_Sensitivity>
//	printf("LSB_Sensitivity_GYRO: %f, LSB_Sensitivity_ACC: %f\n",LSB_Sensitivity_GYRO, LSB_Sensitivity_ACC);

	//Interrupt PIN setting
	uint8_t INT_LEVEL = 0x0; //0 - active high, 1 - active low
 8000bba:	2300      	movs	r3, #0
 8000bbc:	717b      	strb	r3, [r7, #5]
	uint8_t LATCH_INT_EN = 0x0; //0 - INT 50us pulse, 1 - interrupt clear required
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	713b      	strb	r3, [r7, #4]
	uint8_t INT_RD_CLEAR = 0x1; //0 - INT flag cleared by reading INT_STATUS, 1 - INT flag cleared by any read operation
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	70fb      	strb	r3, [r7, #3]
	MPU6050_Writebyte(MPU6050_INT_PIN_CFG, (INT_LEVEL<<7)|(LATCH_INT_EN<<5)|(INT_RD_CLEAR<<4)); //
 8000bc6:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000bca:	01db      	lsls	r3, r3, #7
 8000bcc:	b25a      	sxtb	r2, r3
 8000bce:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8000bd2:	015b      	lsls	r3, r3, #5
 8000bd4:	b25b      	sxtb	r3, r3
 8000bd6:	4313      	orrs	r3, r2
 8000bd8:	b25a      	sxtb	r2, r3
 8000bda:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000bde:	011b      	lsls	r3, r3, #4
 8000be0:	b25b      	sxtb	r3, r3
 8000be2:	4313      	orrs	r3, r2
 8000be4:	b25b      	sxtb	r3, r3
 8000be6:	b2db      	uxtb	r3, r3
 8000be8:	4619      	mov	r1, r3
 8000bea:	2037      	movs	r0, #55	@ 0x37
 8000bec:	f7ff ff22 	bl	8000a34 <MPU6050_Writebyte>
	HAL_Delay(50);
 8000bf0:	2032      	movs	r0, #50	@ 0x32
 8000bf2:	f001 fa7f 	bl	80020f4 <HAL_Delay>

	//Interrupt enable setting
	uint8_t DATA_RDY_EN = 0x1; // 1 - enable, 0 - disable
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	70bb      	strb	r3, [r7, #2]
	MPU6050_Writebyte(MPU6050_INT_ENABLE, DATA_RDY_EN);
 8000bfa:	78bb      	ldrb	r3, [r7, #2]
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	2038      	movs	r0, #56	@ 0x38
 8000c00:	f7ff ff18 	bl	8000a34 <MPU6050_Writebyte>
	HAL_Delay(50);
 8000c04:	2032      	movs	r0, #50	@ 0x32
 8000c06:	f001 fa75 	bl	80020f4 <HAL_Delay>

	printf("MPU6050 setting is finished\n");
 8000c0a:	4808      	ldr	r0, [pc, #32]	@ (8000c2c <MPU6050_Initialization+0x154>)
 8000c0c:	f006 fda4 	bl	8007758 <puts>
}
 8000c10:	bf00      	nop
 8000c12:	3708      	adds	r7, #8
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	08008820 	.word	0x08008820
 8000c1c:	08008834 	.word	0x08008834
 8000c20:	08008854 	.word	0x08008854
 8000c24:	0800885c 	.word	0x0800885c
 8000c28:	08008888 	.word	0x08008888
 8000c2c:	080088b4 	.word	0x080088b4

08000c30 <MPU6050_Get6AxisRawData>:
/*Get Raw Data from sensor*/
void MPU6050_Get6AxisRawData(Struct_MPU6050* mpu6050)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b086      	sub	sp, #24
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
	uint8_t data[14];
	MPU6050_Readbytes(MPU6050_ACCEL_XOUT_H, 14, data);
 8000c38:	f107 0308 	add.w	r3, r7, #8
 8000c3c:	461a      	mov	r2, r3
 8000c3e:	210e      	movs	r1, #14
 8000c40:	203b      	movs	r0, #59	@ 0x3b
 8000c42:	f7ff ff2d 	bl	8000aa0 <MPU6050_Readbytes>

	mpu6050->acc_x_raw = (data[0] << 8) | data[1];
 8000c46:	7a3b      	ldrb	r3, [r7, #8]
 8000c48:	b21b      	sxth	r3, r3
 8000c4a:	021b      	lsls	r3, r3, #8
 8000c4c:	b21a      	sxth	r2, r3
 8000c4e:	7a7b      	ldrb	r3, [r7, #9]
 8000c50:	b21b      	sxth	r3, r3
 8000c52:	4313      	orrs	r3, r2
 8000c54:	b21a      	sxth	r2, r3
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	801a      	strh	r2, [r3, #0]
	mpu6050->acc_y_raw = (data[2] << 8) | data[3];
 8000c5a:	7abb      	ldrb	r3, [r7, #10]
 8000c5c:	b21b      	sxth	r3, r3
 8000c5e:	021b      	lsls	r3, r3, #8
 8000c60:	b21a      	sxth	r2, r3
 8000c62:	7afb      	ldrb	r3, [r7, #11]
 8000c64:	b21b      	sxth	r3, r3
 8000c66:	4313      	orrs	r3, r2
 8000c68:	b21a      	sxth	r2, r3
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	805a      	strh	r2, [r3, #2]
	mpu6050->acc_z_raw = (data[4] << 8) | data[5];
 8000c6e:	7b3b      	ldrb	r3, [r7, #12]
 8000c70:	b21b      	sxth	r3, r3
 8000c72:	021b      	lsls	r3, r3, #8
 8000c74:	b21a      	sxth	r2, r3
 8000c76:	7b7b      	ldrb	r3, [r7, #13]
 8000c78:	b21b      	sxth	r3, r3
 8000c7a:	4313      	orrs	r3, r2
 8000c7c:	b21a      	sxth	r2, r3
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	809a      	strh	r2, [r3, #4]

	mpu6050->temperature_raw = (data[6] << 8) | data[7];
 8000c82:	7bbb      	ldrb	r3, [r7, #14]
 8000c84:	b21b      	sxth	r3, r3
 8000c86:	021b      	lsls	r3, r3, #8
 8000c88:	b21a      	sxth	r2, r3
 8000c8a:	7bfb      	ldrb	r3, [r7, #15]
 8000c8c:	b21b      	sxth	r3, r3
 8000c8e:	4313      	orrs	r3, r2
 8000c90:	b21a      	sxth	r2, r3
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	80da      	strh	r2, [r3, #6]

	mpu6050->gyro_x_raw = ((data[8] << 8) | data[9]);
 8000c96:	7c3b      	ldrb	r3, [r7, #16]
 8000c98:	b21b      	sxth	r3, r3
 8000c9a:	021b      	lsls	r3, r3, #8
 8000c9c:	b21a      	sxth	r2, r3
 8000c9e:	7c7b      	ldrb	r3, [r7, #17]
 8000ca0:	b21b      	sxth	r3, r3
 8000ca2:	4313      	orrs	r3, r2
 8000ca4:	b21a      	sxth	r2, r3
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	811a      	strh	r2, [r3, #8]
	mpu6050->gyro_y_raw = ((data[10] << 8) | data[11]);
 8000caa:	7cbb      	ldrb	r3, [r7, #18]
 8000cac:	b21b      	sxth	r3, r3
 8000cae:	021b      	lsls	r3, r3, #8
 8000cb0:	b21a      	sxth	r2, r3
 8000cb2:	7cfb      	ldrb	r3, [r7, #19]
 8000cb4:	b21b      	sxth	r3, r3
 8000cb6:	4313      	orrs	r3, r2
 8000cb8:	b21a      	sxth	r2, r3
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	815a      	strh	r2, [r3, #10]
	mpu6050->gyro_z_raw = ((data[12] << 8) | data[13]);
 8000cbe:	7d3b      	ldrb	r3, [r7, #20]
 8000cc0:	b21b      	sxth	r3, r3
 8000cc2:	021b      	lsls	r3, r3, #8
 8000cc4:	b21a      	sxth	r2, r3
 8000cc6:	7d7b      	ldrb	r3, [r7, #21]
 8000cc8:	b21b      	sxth	r3, r3
 8000cca:	4313      	orrs	r3, r2
 8000ccc:	b21a      	sxth	r2, r3
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	819a      	strh	r2, [r3, #12]
}
 8000cd2:	bf00      	nop
 8000cd4:	3718      	adds	r7, #24
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
	...

08000cdc <MPU6050_Get_LSB_Sensitivity>:

void MPU6050_Get_LSB_Sensitivity(uint8_t FS_SCALE_GYRO, uint8_t FS_SCALE_ACC)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b083      	sub	sp, #12
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	460a      	mov	r2, r1
 8000ce6:	71fb      	strb	r3, [r7, #7]
 8000ce8:	4613      	mov	r3, r2
 8000cea:	71bb      	strb	r3, [r7, #6]
	switch(FS_SCALE_GYRO)
 8000cec:	79fb      	ldrb	r3, [r7, #7]
 8000cee:	2b03      	cmp	r3, #3
 8000cf0:	d81a      	bhi.n	8000d28 <MPU6050_Get_LSB_Sensitivity+0x4c>
 8000cf2:	a201      	add	r2, pc, #4	@ (adr r2, 8000cf8 <MPU6050_Get_LSB_Sensitivity+0x1c>)
 8000cf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cf8:	08000d09 	.word	0x08000d09
 8000cfc:	08000d11 	.word	0x08000d11
 8000d00:	08000d19 	.word	0x08000d19
 8000d04:	08000d21 	.word	0x08000d21
	{
	case 0:
		LSB_Sensitivity_GYRO = 131.f;
 8000d08:	4b1b      	ldr	r3, [pc, #108]	@ (8000d78 <MPU6050_Get_LSB_Sensitivity+0x9c>)
 8000d0a:	4a1c      	ldr	r2, [pc, #112]	@ (8000d7c <MPU6050_Get_LSB_Sensitivity+0xa0>)
 8000d0c:	601a      	str	r2, [r3, #0]
		break;
 8000d0e:	e00b      	b.n	8000d28 <MPU6050_Get_LSB_Sensitivity+0x4c>
	case 1:
		LSB_Sensitivity_GYRO = 65.5f;
 8000d10:	4b19      	ldr	r3, [pc, #100]	@ (8000d78 <MPU6050_Get_LSB_Sensitivity+0x9c>)
 8000d12:	4a1b      	ldr	r2, [pc, #108]	@ (8000d80 <MPU6050_Get_LSB_Sensitivity+0xa4>)
 8000d14:	601a      	str	r2, [r3, #0]
		break;
 8000d16:	e007      	b.n	8000d28 <MPU6050_Get_LSB_Sensitivity+0x4c>
	case 2:
		LSB_Sensitivity_GYRO = 32.8f;
 8000d18:	4b17      	ldr	r3, [pc, #92]	@ (8000d78 <MPU6050_Get_LSB_Sensitivity+0x9c>)
 8000d1a:	4a1a      	ldr	r2, [pc, #104]	@ (8000d84 <MPU6050_Get_LSB_Sensitivity+0xa8>)
 8000d1c:	601a      	str	r2, [r3, #0]
		break;
 8000d1e:	e003      	b.n	8000d28 <MPU6050_Get_LSB_Sensitivity+0x4c>
	case 3:
		LSB_Sensitivity_GYRO = 16.4f;
 8000d20:	4b15      	ldr	r3, [pc, #84]	@ (8000d78 <MPU6050_Get_LSB_Sensitivity+0x9c>)
 8000d22:	4a19      	ldr	r2, [pc, #100]	@ (8000d88 <MPU6050_Get_LSB_Sensitivity+0xac>)
 8000d24:	601a      	str	r2, [r3, #0]
		break;
 8000d26:	bf00      	nop
	}
	switch(FS_SCALE_ACC)
 8000d28:	79bb      	ldrb	r3, [r7, #6]
 8000d2a:	2b03      	cmp	r3, #3
 8000d2c:	d81e      	bhi.n	8000d6c <MPU6050_Get_LSB_Sensitivity+0x90>
 8000d2e:	a201      	add	r2, pc, #4	@ (adr r2, 8000d34 <MPU6050_Get_LSB_Sensitivity+0x58>)
 8000d30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d34:	08000d45 	.word	0x08000d45
 8000d38:	08000d4f 	.word	0x08000d4f
 8000d3c:	08000d59 	.word	0x08000d59
 8000d40:	08000d63 	.word	0x08000d63
	{
	case 0:
		LSB_Sensitivity_ACC = 16384.f;
 8000d44:	4b11      	ldr	r3, [pc, #68]	@ (8000d8c <MPU6050_Get_LSB_Sensitivity+0xb0>)
 8000d46:	f04f 428d 	mov.w	r2, #1182793728	@ 0x46800000
 8000d4a:	601a      	str	r2, [r3, #0]
		break;
 8000d4c:	e00e      	b.n	8000d6c <MPU6050_Get_LSB_Sensitivity+0x90>
	case 1:
		LSB_Sensitivity_ACC = 8192.f;
 8000d4e:	4b0f      	ldr	r3, [pc, #60]	@ (8000d8c <MPU6050_Get_LSB_Sensitivity+0xb0>)
 8000d50:	f04f 428c 	mov.w	r2, #1174405120	@ 0x46000000
 8000d54:	601a      	str	r2, [r3, #0]
		break;
 8000d56:	e009      	b.n	8000d6c <MPU6050_Get_LSB_Sensitivity+0x90>
	case 2:
		LSB_Sensitivity_ACC = 4096.f;
 8000d58:	4b0c      	ldr	r3, [pc, #48]	@ (8000d8c <MPU6050_Get_LSB_Sensitivity+0xb0>)
 8000d5a:	f04f 428b 	mov.w	r2, #1166016512	@ 0x45800000
 8000d5e:	601a      	str	r2, [r3, #0]
		break;
 8000d60:	e004      	b.n	8000d6c <MPU6050_Get_LSB_Sensitivity+0x90>
	case 3:
		LSB_Sensitivity_ACC = 2048.f;
 8000d62:	4b0a      	ldr	r3, [pc, #40]	@ (8000d8c <MPU6050_Get_LSB_Sensitivity+0xb0>)
 8000d64:	f04f 428a 	mov.w	r2, #1157627904	@ 0x45000000
 8000d68:	601a      	str	r2, [r3, #0]
		break;
 8000d6a:	bf00      	nop
	}
}
 8000d6c:	bf00      	nop
 8000d6e:	370c      	adds	r7, #12
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bc80      	pop	{r7}
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	200000b4 	.word	0x200000b4
 8000d7c:	43030000 	.word	0x43030000
 8000d80:	42830000 	.word	0x42830000
 8000d84:	42033333 	.word	0x42033333
 8000d88:	41833333 	.word	0x41833333
 8000d8c:	200000b0 	.word	0x200000b0

08000d90 <MPU6050_DataConvert>:

/*Convert Unit. acc_raw -> g, gyro_raw -> degree per second*/
void MPU6050_DataConvert(Struct_MPU6050* mpu6050)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
	//printf("LSB_Sensitivity_GYRO: %f, LSB_Sensitivity_ACC: %f\n",LSB_Sensitivity_GYRO,LSB_Sensitivity_ACC);
	mpu6050->acc_x = mpu6050->acc_x_raw / LSB_Sensitivity_ACC;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f7ff fca4 	bl	80006ec <__aeabi_i2f>
 8000da4:	4602      	mov	r2, r0
 8000da6:	4b42      	ldr	r3, [pc, #264]	@ (8000eb0 <MPU6050_DataConvert+0x120>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	4619      	mov	r1, r3
 8000dac:	4610      	mov	r0, r2
 8000dae:	f7ff fda5 	bl	80008fc <__aeabi_fdiv>
 8000db2:	4603      	mov	r3, r0
 8000db4:	461a      	mov	r2, r3
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	611a      	str	r2, [r3, #16]
	mpu6050->acc_y = mpu6050->acc_y_raw / LSB_Sensitivity_ACC;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f7ff fc93 	bl	80006ec <__aeabi_i2f>
 8000dc6:	4602      	mov	r2, r0
 8000dc8:	4b39      	ldr	r3, [pc, #228]	@ (8000eb0 <MPU6050_DataConvert+0x120>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4619      	mov	r1, r3
 8000dce:	4610      	mov	r0, r2
 8000dd0:	f7ff fd94 	bl	80008fc <__aeabi_fdiv>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	461a      	mov	r2, r3
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	615a      	str	r2, [r3, #20]
	mpu6050->acc_z = mpu6050->acc_z_raw / LSB_Sensitivity_ACC;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000de2:	4618      	mov	r0, r3
 8000de4:	f7ff fc82 	bl	80006ec <__aeabi_i2f>
 8000de8:	4602      	mov	r2, r0
 8000dea:	4b31      	ldr	r3, [pc, #196]	@ (8000eb0 <MPU6050_DataConvert+0x120>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	4619      	mov	r1, r3
 8000df0:	4610      	mov	r0, r2
 8000df2:	f7ff fd83 	bl	80008fc <__aeabi_fdiv>
 8000df6:	4603      	mov	r3, r0
 8000df8:	461a      	mov	r2, r3
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	619a      	str	r2, [r3, #24]

	mpu6050->temperature = (float)(mpu6050->temperature_raw)/340+36.53;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000e04:	4618      	mov	r0, r3
 8000e06:	f7ff fc71 	bl	80006ec <__aeabi_i2f>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	4929      	ldr	r1, [pc, #164]	@ (8000eb4 <MPU6050_DataConvert+0x124>)
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f7ff fd74 	bl	80008fc <__aeabi_fdiv>
 8000e14:	4603      	mov	r3, r0
 8000e16:	4618      	mov	r0, r3
 8000e18:	f7ff fb06 	bl	8000428 <__aeabi_f2d>
 8000e1c:	a322      	add	r3, pc, #136	@ (adr r3, 8000ea8 <MPU6050_DataConvert+0x118>)
 8000e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e22:	f7ff f9a3 	bl	800016c <__adddf3>
 8000e26:	4602      	mov	r2, r0
 8000e28:	460b      	mov	r3, r1
 8000e2a:	4610      	mov	r0, r2
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	f7ff fb53 	bl	80004d8 <__aeabi_d2f>
 8000e32:	4602      	mov	r2, r0
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	61da      	str	r2, [r3, #28]

	mpu6050->gyro_x = mpu6050->gyro_x_raw / LSB_Sensitivity_GYRO;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f7ff fc54 	bl	80006ec <__aeabi_i2f>
 8000e44:	4602      	mov	r2, r0
 8000e46:	4b1c      	ldr	r3, [pc, #112]	@ (8000eb8 <MPU6050_DataConvert+0x128>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	4610      	mov	r0, r2
 8000e4e:	f7ff fd55 	bl	80008fc <__aeabi_fdiv>
 8000e52:	4603      	mov	r3, r0
 8000e54:	461a      	mov	r2, r3
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	621a      	str	r2, [r3, #32]
	mpu6050->gyro_y = mpu6050->gyro_y_raw / LSB_Sensitivity_GYRO;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000e60:	4618      	mov	r0, r3
 8000e62:	f7ff fc43 	bl	80006ec <__aeabi_i2f>
 8000e66:	4602      	mov	r2, r0
 8000e68:	4b13      	ldr	r3, [pc, #76]	@ (8000eb8 <MPU6050_DataConvert+0x128>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	4610      	mov	r0, r2
 8000e70:	f7ff fd44 	bl	80008fc <__aeabi_fdiv>
 8000e74:	4603      	mov	r3, r0
 8000e76:	461a      	mov	r2, r3
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	625a      	str	r2, [r3, #36]	@ 0x24
	mpu6050->gyro_z = mpu6050->gyro_z_raw / LSB_Sensitivity_GYRO;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8000e82:	4618      	mov	r0, r3
 8000e84:	f7ff fc32 	bl	80006ec <__aeabi_i2f>
 8000e88:	4602      	mov	r2, r0
 8000e8a:	4b0b      	ldr	r3, [pc, #44]	@ (8000eb8 <MPU6050_DataConvert+0x128>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4619      	mov	r1, r3
 8000e90:	4610      	mov	r0, r2
 8000e92:	f7ff fd33 	bl	80008fc <__aeabi_fdiv>
 8000e96:	4603      	mov	r3, r0
 8000e98:	461a      	mov	r2, r3
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000e9e:	bf00      	nop
 8000ea0:	3708      	adds	r7, #8
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	0a3d70a4 	.word	0x0a3d70a4
 8000eac:	404243d7 	.word	0x404243d7
 8000eb0:	200000b0 	.word	0x200000b0
 8000eb4:	43aa0000 	.word	0x43aa0000
 8000eb8:	200000b4 	.word	0x200000b4

08000ebc <MPU6050_DataReady>:


int MPU6050_DataReady(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
			return 1;
		}
	}
	return 0;
	 */
	return HAL_GPIO_ReadPin(MPU6050_INT_PORT, MPU6050_INT_PIN);
 8000ec0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000ec4:	4802      	ldr	r0, [pc, #8]	@ (8000ed0 <MPU6050_DataReady+0x14>)
 8000ec6:	f001 fc8b 	bl	80027e0 <HAL_GPIO_ReadPin>
 8000eca:	4603      	mov	r3, r0
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	40010c00 	.word	0x40010c00

08000ed4 <MPU6050_ProcessData>:

void MPU6050_ProcessData(Struct_MPU6050* mpu6050)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
	MPU6050_Get6AxisRawData(mpu6050);
 8000edc:	6878      	ldr	r0, [r7, #4]
 8000ede:	f7ff fea7 	bl	8000c30 <MPU6050_Get6AxisRawData>
	MPU6050_DataConvert(mpu6050);
 8000ee2:	6878      	ldr	r0, [r7, #4]
 8000ee4:	f7ff ff54 	bl	8000d90 <MPU6050_DataConvert>
}
 8000ee8:	bf00      	nop
 8000eea:	3708      	adds	r7, #8
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}

08000ef0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b088      	sub	sp, #32
 8000ef4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef6:	f107 0310 	add.w	r3, r7, #16
 8000efa:	2200      	movs	r2, #0
 8000efc:	601a      	str	r2, [r3, #0]
 8000efe:	605a      	str	r2, [r3, #4]
 8000f00:	609a      	str	r2, [r3, #8]
 8000f02:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f04:	4b4f      	ldr	r3, [pc, #316]	@ (8001044 <MX_GPIO_Init+0x154>)
 8000f06:	699b      	ldr	r3, [r3, #24]
 8000f08:	4a4e      	ldr	r2, [pc, #312]	@ (8001044 <MX_GPIO_Init+0x154>)
 8000f0a:	f043 0310 	orr.w	r3, r3, #16
 8000f0e:	6193      	str	r3, [r2, #24]
 8000f10:	4b4c      	ldr	r3, [pc, #304]	@ (8001044 <MX_GPIO_Init+0x154>)
 8000f12:	699b      	ldr	r3, [r3, #24]
 8000f14:	f003 0310 	and.w	r3, r3, #16
 8000f18:	60fb      	str	r3, [r7, #12]
 8000f1a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f1c:	4b49      	ldr	r3, [pc, #292]	@ (8001044 <MX_GPIO_Init+0x154>)
 8000f1e:	699b      	ldr	r3, [r3, #24]
 8000f20:	4a48      	ldr	r2, [pc, #288]	@ (8001044 <MX_GPIO_Init+0x154>)
 8000f22:	f043 0320 	orr.w	r3, r3, #32
 8000f26:	6193      	str	r3, [r2, #24]
 8000f28:	4b46      	ldr	r3, [pc, #280]	@ (8001044 <MX_GPIO_Init+0x154>)
 8000f2a:	699b      	ldr	r3, [r3, #24]
 8000f2c:	f003 0320 	and.w	r3, r3, #32
 8000f30:	60bb      	str	r3, [r7, #8]
 8000f32:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f34:	4b43      	ldr	r3, [pc, #268]	@ (8001044 <MX_GPIO_Init+0x154>)
 8000f36:	699b      	ldr	r3, [r3, #24]
 8000f38:	4a42      	ldr	r2, [pc, #264]	@ (8001044 <MX_GPIO_Init+0x154>)
 8000f3a:	f043 0304 	orr.w	r3, r3, #4
 8000f3e:	6193      	str	r3, [r2, #24]
 8000f40:	4b40      	ldr	r3, [pc, #256]	@ (8001044 <MX_GPIO_Init+0x154>)
 8000f42:	699b      	ldr	r3, [r3, #24]
 8000f44:	f003 0304 	and.w	r3, r3, #4
 8000f48:	607b      	str	r3, [r7, #4]
 8000f4a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f4c:	4b3d      	ldr	r3, [pc, #244]	@ (8001044 <MX_GPIO_Init+0x154>)
 8000f4e:	699b      	ldr	r3, [r3, #24]
 8000f50:	4a3c      	ldr	r2, [pc, #240]	@ (8001044 <MX_GPIO_Init+0x154>)
 8000f52:	f043 0308 	orr.w	r3, r3, #8
 8000f56:	6193      	str	r3, [r2, #24]
 8000f58:	4b3a      	ldr	r3, [pc, #232]	@ (8001044 <MX_GPIO_Init+0x154>)
 8000f5a:	699b      	ldr	r3, [r3, #24]
 8000f5c:	f003 0308 	and.w	r3, r3, #8
 8000f60:	603b      	str	r3, [r7, #0]
 8000f62:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000f64:	2200      	movs	r2, #0
 8000f66:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f6a:	4837      	ldr	r0, [pc, #220]	@ (8001048 <MX_GPIO_Init+0x158>)
 8000f6c:	f001 fc4f 	bl	800280e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RADIO_CSN_GPIO_Port, RADIO_CSN_Pin, GPIO_PIN_SET);
 8000f70:	2201      	movs	r2, #1
 8000f72:	2110      	movs	r1, #16
 8000f74:	4835      	ldr	r0, [pc, #212]	@ (800104c <MX_GPIO_Init+0x15c>)
 8000f76:	f001 fc4a 	bl	800280e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RADIO_CE_Pin|SPI_LED_Pin, GPIO_PIN_RESET);
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	f242 0101 	movw	r1, #8193	@ 0x2001
 8000f80:	4833      	ldr	r0, [pc, #204]	@ (8001050 <MX_GPIO_Init+0x160>)
 8000f82:	f001 fc44 	bl	800280e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000f86:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f8a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f90:	2300      	movs	r3, #0
 8000f92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f94:	2302      	movs	r3, #2
 8000f96:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f98:	f107 0310 	add.w	r3, r7, #16
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	482a      	ldr	r0, [pc, #168]	@ (8001048 <MX_GPIO_Init+0x158>)
 8000fa0:	f001 fa9a 	bl	80024d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RADIO_CSN_Pin */
  GPIO_InitStruct.Pin = RADIO_CSN_Pin;
 8000fa4:	2310      	movs	r3, #16
 8000fa6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fac:	2300      	movs	r3, #0
 8000fae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fb0:	2303      	movs	r3, #3
 8000fb2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RADIO_CSN_GPIO_Port, &GPIO_InitStruct);
 8000fb4:	f107 0310 	add.w	r3, r7, #16
 8000fb8:	4619      	mov	r1, r3
 8000fba:	4824      	ldr	r0, [pc, #144]	@ (800104c <MX_GPIO_Init+0x15c>)
 8000fbc:	f001 fa8c 	bl	80024d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RADIO_CE_Pin */
  GPIO_InitStruct.Pin = RADIO_CE_Pin;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fcc:	2303      	movs	r3, #3
 8000fce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RADIO_CE_GPIO_Port, &GPIO_InitStruct);
 8000fd0:	f107 0310 	add.w	r3, r7, #16
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	481e      	ldr	r0, [pc, #120]	@ (8001050 <MX_GPIO_Init+0x160>)
 8000fd8:	f001 fa7e 	bl	80024d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RADIO_IRQ_Pin */
  GPIO_InitStruct.Pin = RADIO_IRQ_Pin;
 8000fdc:	2302      	movs	r3, #2
 8000fde:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000fe0:	4b1c      	ldr	r3, [pc, #112]	@ (8001054 <MX_GPIO_Init+0x164>)
 8000fe2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RADIO_IRQ_GPIO_Port, &GPIO_InitStruct);
 8000fe8:	f107 0310 	add.w	r3, r7, #16
 8000fec:	4619      	mov	r1, r3
 8000fee:	4818      	ldr	r0, [pc, #96]	@ (8001050 <MX_GPIO_Init+0x160>)
 8000ff0:	f001 fa72 	bl	80024d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : IMU_INT_Pin */
  GPIO_InitStruct.Pin = IMU_INT_Pin;
 8000ff4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ff8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffe:	2300      	movs	r3, #0
 8001000:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(IMU_INT_GPIO_Port, &GPIO_InitStruct);
 8001002:	f107 0310 	add.w	r3, r7, #16
 8001006:	4619      	mov	r1, r3
 8001008:	4811      	ldr	r0, [pc, #68]	@ (8001050 <MX_GPIO_Init+0x160>)
 800100a:	f001 fa65 	bl	80024d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_LED_Pin */
  GPIO_InitStruct.Pin = SPI_LED_Pin;
 800100e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001012:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001014:	2301      	movs	r3, #1
 8001016:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001018:	2300      	movs	r3, #0
 800101a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101c:	2302      	movs	r3, #2
 800101e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI_LED_GPIO_Port, &GPIO_InitStruct);
 8001020:	f107 0310 	add.w	r3, r7, #16
 8001024:	4619      	mov	r1, r3
 8001026:	480a      	ldr	r0, [pc, #40]	@ (8001050 <MX_GPIO_Init+0x160>)
 8001028:	f001 fa56 	bl	80024d8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800102c:	2200      	movs	r2, #0
 800102e:	2100      	movs	r1, #0
 8001030:	2007      	movs	r0, #7
 8001032:	f001 f95a 	bl	80022ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001036:	2007      	movs	r0, #7
 8001038:	f001 f973 	bl	8002322 <HAL_NVIC_EnableIRQ>

}
 800103c:	bf00      	nop
 800103e:	3720      	adds	r7, #32
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	40021000 	.word	0x40021000
 8001048:	40011000 	.word	0x40011000
 800104c:	40010800 	.word	0x40010800
 8001050:	40010c00 	.word	0x40010c00
 8001054:	10210000 	.word	0x10210000

08001058 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800105c:	4b12      	ldr	r3, [pc, #72]	@ (80010a8 <MX_I2C2_Init+0x50>)
 800105e:	4a13      	ldr	r2, [pc, #76]	@ (80010ac <MX_I2C2_Init+0x54>)
 8001060:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8001062:	4b11      	ldr	r3, [pc, #68]	@ (80010a8 <MX_I2C2_Init+0x50>)
 8001064:	4a12      	ldr	r2, [pc, #72]	@ (80010b0 <MX_I2C2_Init+0x58>)
 8001066:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001068:	4b0f      	ldr	r3, [pc, #60]	@ (80010a8 <MX_I2C2_Init+0x50>)
 800106a:	2200      	movs	r2, #0
 800106c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800106e:	4b0e      	ldr	r3, [pc, #56]	@ (80010a8 <MX_I2C2_Init+0x50>)
 8001070:	2200      	movs	r2, #0
 8001072:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001074:	4b0c      	ldr	r3, [pc, #48]	@ (80010a8 <MX_I2C2_Init+0x50>)
 8001076:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800107a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800107c:	4b0a      	ldr	r3, [pc, #40]	@ (80010a8 <MX_I2C2_Init+0x50>)
 800107e:	2200      	movs	r2, #0
 8001080:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001082:	4b09      	ldr	r3, [pc, #36]	@ (80010a8 <MX_I2C2_Init+0x50>)
 8001084:	2200      	movs	r2, #0
 8001086:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001088:	4b07      	ldr	r3, [pc, #28]	@ (80010a8 <MX_I2C2_Init+0x50>)
 800108a:	2200      	movs	r2, #0
 800108c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800108e:	4b06      	ldr	r3, [pc, #24]	@ (80010a8 <MX_I2C2_Init+0x50>)
 8001090:	2200      	movs	r2, #0
 8001092:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001094:	4804      	ldr	r0, [pc, #16]	@ (80010a8 <MX_I2C2_Init+0x50>)
 8001096:	f001 fc03 	bl	80028a0 <HAL_I2C_Init>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80010a0:	f000 fa96 	bl	80015d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80010a4:	bf00      	nop
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	200000b8 	.word	0x200000b8
 80010ac:	40005800 	.word	0x40005800
 80010b0:	00061a80 	.word	0x00061a80

080010b4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b088      	sub	sp, #32
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010bc:	f107 0310 	add.w	r3, r7, #16
 80010c0:	2200      	movs	r2, #0
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	605a      	str	r2, [r3, #4]
 80010c6:	609a      	str	r2, [r3, #8]
 80010c8:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C2)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4a1e      	ldr	r2, [pc, #120]	@ (8001148 <HAL_I2C_MspInit+0x94>)
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d134      	bne.n	800113e <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010d4:	4b1d      	ldr	r3, [pc, #116]	@ (800114c <HAL_I2C_MspInit+0x98>)
 80010d6:	699b      	ldr	r3, [r3, #24]
 80010d8:	4a1c      	ldr	r2, [pc, #112]	@ (800114c <HAL_I2C_MspInit+0x98>)
 80010da:	f043 0308 	orr.w	r3, r3, #8
 80010de:	6193      	str	r3, [r2, #24]
 80010e0:	4b1a      	ldr	r3, [pc, #104]	@ (800114c <HAL_I2C_MspInit+0x98>)
 80010e2:	699b      	ldr	r3, [r3, #24]
 80010e4:	f003 0308 	and.w	r3, r3, #8
 80010e8:	60fb      	str	r3, [r7, #12]
 80010ea:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80010ec:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80010f0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010f2:	2312      	movs	r3, #18
 80010f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010f6:	2303      	movs	r3, #3
 80010f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010fa:	f107 0310 	add.w	r3, r7, #16
 80010fe:	4619      	mov	r1, r3
 8001100:	4813      	ldr	r0, [pc, #76]	@ (8001150 <HAL_I2C_MspInit+0x9c>)
 8001102:	f001 f9e9 	bl	80024d8 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001106:	4b11      	ldr	r3, [pc, #68]	@ (800114c <HAL_I2C_MspInit+0x98>)
 8001108:	69db      	ldr	r3, [r3, #28]
 800110a:	4a10      	ldr	r2, [pc, #64]	@ (800114c <HAL_I2C_MspInit+0x98>)
 800110c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001110:	61d3      	str	r3, [r2, #28]
 8001112:	4b0e      	ldr	r3, [pc, #56]	@ (800114c <HAL_I2C_MspInit+0x98>)
 8001114:	69db      	ldr	r3, [r3, #28]
 8001116:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800111a:	60bb      	str	r3, [r7, #8]
 800111c:	68bb      	ldr	r3, [r7, #8]

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 800111e:	2200      	movs	r2, #0
 8001120:	2100      	movs	r1, #0
 8001122:	2021      	movs	r0, #33	@ 0x21
 8001124:	f001 f8e1 	bl	80022ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8001128:	2021      	movs	r0, #33	@ 0x21
 800112a:	f001 f8fa 	bl	8002322 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 800112e:	2200      	movs	r2, #0
 8001130:	2100      	movs	r1, #0
 8001132:	2022      	movs	r0, #34	@ 0x22
 8001134:	f001 f8d9 	bl	80022ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8001138:	2022      	movs	r0, #34	@ 0x22
 800113a:	f001 f8f2 	bl	8002322 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800113e:	bf00      	nop
 8001140:	3720      	adds	r7, #32
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	40005800 	.word	0x40005800
 800114c:	40021000 	.word	0x40021000
 8001150:	40010c00 	.word	0x40010c00

08001154 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b086      	sub	sp, #24
 8001158:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800115a:	f000 ff69 	bl	8002030 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800115e:	f000 f921 	bl	80013a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001162:	f7ff fec5 	bl	8000ef0 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001166:	f000 fd03 	bl	8001b70 <MX_SPI1_Init>
  MX_I2C2_Init();
 800116a:	f7ff ff75 	bl	8001058 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 800116e:	f000 febb 	bl	8001ee8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  MPU6050_Initialization();
 8001172:	f7ff fcb1 	bl	8000ad8 <MPU6050_Initialization>
  nrf24l01p_tx_init(2500, _250kbps);
 8001176:	2102      	movs	r1, #2
 8001178:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 800117c:	f000 fab2 	bl	80016e4 <nrf24l01p_tx_init>

  uint8_t en_aa = read_register(NRF24L01P_REG_EN_AA);
 8001180:	2001      	movs	r0, #1
 8001182:	f000 fa5b 	bl	800163c <read_register>
 8001186:	4603      	mov	r3, r0
 8001188:	75fb      	strb	r3, [r7, #23]
  en_aa &= ~(1 << 0);           // Disable AA on pipe 0
 800118a:	7dfb      	ldrb	r3, [r7, #23]
 800118c:	f023 0301 	bic.w	r3, r3, #1
 8001190:	75fb      	strb	r3, [r7, #23]
  write_register(NRF24L01P_REG_EN_AA, en_aa);
 8001192:	7dfb      	ldrb	r3, [r7, #23]
 8001194:	4619      	mov	r1, r3
 8001196:	2001      	movs	r0, #1
 8001198:	f000 fa76 	bl	8001688 <write_register>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  // transmit
	  if(MPU6050_DataReady() == 1)
 800119c:	f7ff fe8e 	bl	8000ebc <MPU6050_DataReady>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b01      	cmp	r3, #1
 80011a4:	d15f      	bne.n	8001266 <main+0x112>
		{
		    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 80011a6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80011aa:	4878      	ldr	r0, [pc, #480]	@ (800138c <main+0x238>)
 80011ac:	f001 fb47 	bl	800283e <HAL_GPIO_TogglePin>
			MPU6050_ProcessData(&MPU6050);
 80011b0:	4877      	ldr	r0, [pc, #476]	@ (8001390 <main+0x23c>)
 80011b2:	f7ff fe8f 	bl	8000ed4 <MPU6050_ProcessData>
			uint8_t tx_data[NRF24L01P_PAYLOAD_LENGTH] = {MPU6050.acc_x_raw & 0xFF, (MPU6050.acc_x_raw >> 8) & 0xFF, MPU6050.acc_y_raw & 0xFF, (MPU6050.acc_y_raw >> 8) & 0xFF, MPU6050.acc_z_raw & 0xFF, (MPU6050.acc_z_raw >> 8) & 0xFF,
 80011b6:	4b76      	ldr	r3, [pc, #472]	@ (8001390 <main+0x23c>)
 80011b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011bc:	b2db      	uxtb	r3, r3
 80011be:	703b      	strb	r3, [r7, #0]
 80011c0:	4b73      	ldr	r3, [pc, #460]	@ (8001390 <main+0x23c>)
 80011c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011c6:	121b      	asrs	r3, r3, #8
 80011c8:	b21b      	sxth	r3, r3
 80011ca:	b2db      	uxtb	r3, r3
 80011cc:	707b      	strb	r3, [r7, #1]
 80011ce:	4b70      	ldr	r3, [pc, #448]	@ (8001390 <main+0x23c>)
 80011d0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	70bb      	strb	r3, [r7, #2]
 80011d8:	4b6d      	ldr	r3, [pc, #436]	@ (8001390 <main+0x23c>)
 80011da:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80011de:	121b      	asrs	r3, r3, #8
 80011e0:	b21b      	sxth	r3, r3
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	70fb      	strb	r3, [r7, #3]
 80011e6:	4b6a      	ldr	r3, [pc, #424]	@ (8001390 <main+0x23c>)
 80011e8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80011ec:	b2db      	uxtb	r3, r3
 80011ee:	713b      	strb	r3, [r7, #4]
 80011f0:	4b67      	ldr	r3, [pc, #412]	@ (8001390 <main+0x23c>)
 80011f2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80011f6:	121b      	asrs	r3, r3, #8
 80011f8:	b21b      	sxth	r3, r3
 80011fa:	b2db      	uxtb	r3, r3
 80011fc:	717b      	strb	r3, [r7, #5]
														MPU6050.temperature_raw & 0xFF, (MPU6050.temperature_raw >> 8) & 0xFF,
 80011fe:	4b64      	ldr	r3, [pc, #400]	@ (8001390 <main+0x23c>)
 8001200:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
			uint8_t tx_data[NRF24L01P_PAYLOAD_LENGTH] = {MPU6050.acc_x_raw & 0xFF, (MPU6050.acc_x_raw >> 8) & 0xFF, MPU6050.acc_y_raw & 0xFF, (MPU6050.acc_y_raw >> 8) & 0xFF, MPU6050.acc_z_raw & 0xFF, (MPU6050.acc_z_raw >> 8) & 0xFF,
 8001204:	b2db      	uxtb	r3, r3
 8001206:	71bb      	strb	r3, [r7, #6]
														MPU6050.temperature_raw & 0xFF, (MPU6050.temperature_raw >> 8) & 0xFF,
 8001208:	4b61      	ldr	r3, [pc, #388]	@ (8001390 <main+0x23c>)
 800120a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
			uint8_t tx_data[NRF24L01P_PAYLOAD_LENGTH] = {MPU6050.acc_x_raw & 0xFF, (MPU6050.acc_x_raw >> 8) & 0xFF, MPU6050.acc_y_raw & 0xFF, (MPU6050.acc_y_raw >> 8) & 0xFF, MPU6050.acc_z_raw & 0xFF, (MPU6050.acc_z_raw >> 8) & 0xFF,
 800120e:	121b      	asrs	r3, r3, #8
 8001210:	b21b      	sxth	r3, r3
 8001212:	b2db      	uxtb	r3, r3
 8001214:	71fb      	strb	r3, [r7, #7]
														MPU6050.gyro_x_raw & 0xFF, (MPU6050.gyro_x_raw >> 8) & 0xFF, MPU6050.gyro_y_raw & 0xFF, (MPU6050.gyro_y_raw >> 8) & 0xFF, MPU6050.gyro_z_raw & 0xFF, (MPU6050.gyro_z_raw >> 8) & 0xFF
 8001216:	4b5e      	ldr	r3, [pc, #376]	@ (8001390 <main+0x23c>)
 8001218:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
			uint8_t tx_data[NRF24L01P_PAYLOAD_LENGTH] = {MPU6050.acc_x_raw & 0xFF, (MPU6050.acc_x_raw >> 8) & 0xFF, MPU6050.acc_y_raw & 0xFF, (MPU6050.acc_y_raw >> 8) & 0xFF, MPU6050.acc_z_raw & 0xFF, (MPU6050.acc_z_raw >> 8) & 0xFF,
 800121c:	b2db      	uxtb	r3, r3
 800121e:	723b      	strb	r3, [r7, #8]
														MPU6050.gyro_x_raw & 0xFF, (MPU6050.gyro_x_raw >> 8) & 0xFF, MPU6050.gyro_y_raw & 0xFF, (MPU6050.gyro_y_raw >> 8) & 0xFF, MPU6050.gyro_z_raw & 0xFF, (MPU6050.gyro_z_raw >> 8) & 0xFF
 8001220:	4b5b      	ldr	r3, [pc, #364]	@ (8001390 <main+0x23c>)
 8001222:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
			uint8_t tx_data[NRF24L01P_PAYLOAD_LENGTH] = {MPU6050.acc_x_raw & 0xFF, (MPU6050.acc_x_raw >> 8) & 0xFF, MPU6050.acc_y_raw & 0xFF, (MPU6050.acc_y_raw >> 8) & 0xFF, MPU6050.acc_z_raw & 0xFF, (MPU6050.acc_z_raw >> 8) & 0xFF,
 8001226:	121b      	asrs	r3, r3, #8
 8001228:	b21b      	sxth	r3, r3
 800122a:	b2db      	uxtb	r3, r3
 800122c:	727b      	strb	r3, [r7, #9]
														MPU6050.gyro_x_raw & 0xFF, (MPU6050.gyro_x_raw >> 8) & 0xFF, MPU6050.gyro_y_raw & 0xFF, (MPU6050.gyro_y_raw >> 8) & 0xFF, MPU6050.gyro_z_raw & 0xFF, (MPU6050.gyro_z_raw >> 8) & 0xFF
 800122e:	4b58      	ldr	r3, [pc, #352]	@ (8001390 <main+0x23c>)
 8001230:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
			uint8_t tx_data[NRF24L01P_PAYLOAD_LENGTH] = {MPU6050.acc_x_raw & 0xFF, (MPU6050.acc_x_raw >> 8) & 0xFF, MPU6050.acc_y_raw & 0xFF, (MPU6050.acc_y_raw >> 8) & 0xFF, MPU6050.acc_z_raw & 0xFF, (MPU6050.acc_z_raw >> 8) & 0xFF,
 8001234:	b2db      	uxtb	r3, r3
 8001236:	72bb      	strb	r3, [r7, #10]
														MPU6050.gyro_x_raw & 0xFF, (MPU6050.gyro_x_raw >> 8) & 0xFF, MPU6050.gyro_y_raw & 0xFF, (MPU6050.gyro_y_raw >> 8) & 0xFF, MPU6050.gyro_z_raw & 0xFF, (MPU6050.gyro_z_raw >> 8) & 0xFF
 8001238:	4b55      	ldr	r3, [pc, #340]	@ (8001390 <main+0x23c>)
 800123a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
			uint8_t tx_data[NRF24L01P_PAYLOAD_LENGTH] = {MPU6050.acc_x_raw & 0xFF, (MPU6050.acc_x_raw >> 8) & 0xFF, MPU6050.acc_y_raw & 0xFF, (MPU6050.acc_y_raw >> 8) & 0xFF, MPU6050.acc_z_raw & 0xFF, (MPU6050.acc_z_raw >> 8) & 0xFF,
 800123e:	121b      	asrs	r3, r3, #8
 8001240:	b21b      	sxth	r3, r3
 8001242:	b2db      	uxtb	r3, r3
 8001244:	72fb      	strb	r3, [r7, #11]
														MPU6050.gyro_x_raw & 0xFF, (MPU6050.gyro_x_raw >> 8) & 0xFF, MPU6050.gyro_y_raw & 0xFF, (MPU6050.gyro_y_raw >> 8) & 0xFF, MPU6050.gyro_z_raw & 0xFF, (MPU6050.gyro_z_raw >> 8) & 0xFF
 8001246:	4b52      	ldr	r3, [pc, #328]	@ (8001390 <main+0x23c>)
 8001248:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
			uint8_t tx_data[NRF24L01P_PAYLOAD_LENGTH] = {MPU6050.acc_x_raw & 0xFF, (MPU6050.acc_x_raw >> 8) & 0xFF, MPU6050.acc_y_raw & 0xFF, (MPU6050.acc_y_raw >> 8) & 0xFF, MPU6050.acc_z_raw & 0xFF, (MPU6050.acc_z_raw >> 8) & 0xFF,
 800124c:	b2db      	uxtb	r3, r3
 800124e:	733b      	strb	r3, [r7, #12]
														MPU6050.gyro_x_raw & 0xFF, (MPU6050.gyro_x_raw >> 8) & 0xFF, MPU6050.gyro_y_raw & 0xFF, (MPU6050.gyro_y_raw >> 8) & 0xFF, MPU6050.gyro_z_raw & 0xFF, (MPU6050.gyro_z_raw >> 8) & 0xFF
 8001250:	4b4f      	ldr	r3, [pc, #316]	@ (8001390 <main+0x23c>)
 8001252:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
			uint8_t tx_data[NRF24L01P_PAYLOAD_LENGTH] = {MPU6050.acc_x_raw & 0xFF, (MPU6050.acc_x_raw >> 8) & 0xFF, MPU6050.acc_y_raw & 0xFF, (MPU6050.acc_y_raw >> 8) & 0xFF, MPU6050.acc_z_raw & 0xFF, (MPU6050.acc_z_raw >> 8) & 0xFF,
 8001256:	121b      	asrs	r3, r3, #8
 8001258:	b21b      	sxth	r3, r3
 800125a:	b2db      	uxtb	r3, r3
 800125c:	737b      	strb	r3, [r7, #13]
													   };
			nrf24l01p_tx_transmit(tx_data);
 800125e:	463b      	mov	r3, r7
 8001260:	4618      	mov	r0, r3
 8001262:	f000 fa6a 	bl	800173a <nrf24l01p_tx_transmit>
//		  // for serial monitor
//		HAL_UART_Transmit_IT(&huart1, tx_data, 14);
//		HAL_Delay(100);

	  // LED loop always runs
	  ledTimer ++;
 8001266:	4b4b      	ldr	r3, [pc, #300]	@ (8001394 <main+0x240>)
 8001268:	881b      	ldrh	r3, [r3, #0]
 800126a:	3301      	adds	r3, #1
 800126c:	b29a      	uxth	r2, r3
 800126e:	4b49      	ldr	r3, [pc, #292]	@ (8001394 <main+0x240>)
 8001270:	801a      	strh	r2, [r3, #0]
	  if(ledTimer > 200){
 8001272:	4b48      	ldr	r3, [pc, #288]	@ (8001394 <main+0x240>)
 8001274:	881b      	ldrh	r3, [r3, #0]
 8001276:	2bc8      	cmp	r3, #200	@ 0xc8
 8001278:	d91f      	bls.n	80012ba <main+0x166>
		  nrf24l01p_dump_registers();
 800127a:	f000 f8e7 	bl	800144c <nrf24l01p_dump_registers>
//		  HAL_UART_Transmit_IT(&huart1, &status, 1);
		  ledTimer = 0;
 800127e:	4b45      	ldr	r3, [pc, #276]	@ (8001394 <main+0x240>)
 8001280:	2200      	movs	r2, #0
 8001282:	801a      	strh	r2, [r3, #0]
		  led = !led;
 8001284:	4b44      	ldr	r3, [pc, #272]	@ (8001398 <main+0x244>)
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	2b00      	cmp	r3, #0
 800128a:	bf0c      	ite	eq
 800128c:	2301      	moveq	r3, #1
 800128e:	2300      	movne	r3, #0
 8001290:	b2db      	uxtb	r3, r3
 8001292:	461a      	mov	r2, r3
 8001294:	4b40      	ldr	r3, [pc, #256]	@ (8001398 <main+0x244>)
 8001296:	701a      	strb	r2, [r3, #0]
		  if(led){
 8001298:	4b3f      	ldr	r3, [pc, #252]	@ (8001398 <main+0x244>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d006      	beq.n	80012ae <main+0x15a>
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80012a0:	2201      	movs	r2, #1
 80012a2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80012a6:	483d      	ldr	r0, [pc, #244]	@ (800139c <main+0x248>)
 80012a8:	f001 fab1 	bl	800280e <HAL_GPIO_WritePin>
 80012ac:	e005      	b.n	80012ba <main+0x166>
		  }else{
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80012ae:	2200      	movs	r2, #0
 80012b0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80012b4:	4839      	ldr	r0, [pc, #228]	@ (800139c <main+0x248>)
 80012b6:	f001 faaa 	bl	800280e <HAL_GPIO_WritePin>
		  }
	  }

	  // if failed to send message, then reset the radio
	  if (tx_failed) {
 80012ba:	4b39      	ldr	r3, [pc, #228]	@ (80013a0 <main+0x24c>)
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	b2db      	uxtb	r3, r3
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d007      	beq.n	80012d4 <main+0x180>
		  tx_failed = false;
 80012c4:	4b36      	ldr	r3, [pc, #216]	@ (80013a0 <main+0x24c>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	701a      	strb	r2, [r3, #0]
		  nrf24l01p_tx_init(2500, _250kbps);
 80012ca:	2102      	movs	r1, #2
 80012cc:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 80012d0:	f000 fa08 	bl	80016e4 <nrf24l01p_tx_init>
	  }

	  // if radio lost power, reset the radio
	  uint8_t rf_ch = read_register(NRF24L01P_REG_RF_CH);
 80012d4:	2005      	movs	r0, #5
 80012d6:	f000 f9b1 	bl	800163c <read_register>
 80012da:	4603      	mov	r3, r0
 80012dc:	75bb      	strb	r3, [r7, #22]
	  if (rf_ch != 0x64) {  // 0x64 is your desired channel
 80012de:	7dbb      	ldrb	r3, [r7, #22]
 80012e0:	2b64      	cmp	r3, #100	@ 0x64
 80012e2:	d012      	beq.n	800130a <main+0x1b6>
	      nrf24l01p_tx_init(2500, _250kbps);
 80012e4:	2102      	movs	r1, #2
 80012e6:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 80012ea:	f000 f9fb 	bl	80016e4 <nrf24l01p_tx_init>

	      uint8_t en_aa = read_register(NRF24L01P_REG_EN_AA);
 80012ee:	2001      	movs	r0, #1
 80012f0:	f000 f9a4 	bl	800163c <read_register>
 80012f4:	4603      	mov	r3, r0
 80012f6:	757b      	strb	r3, [r7, #21]
	      en_aa &= ~(1 << 0);           // Disable AA on pipe 0
 80012f8:	7d7b      	ldrb	r3, [r7, #21]
 80012fa:	f023 0301 	bic.w	r3, r3, #1
 80012fe:	757b      	strb	r3, [r7, #21]
	      write_register(NRF24L01P_REG_EN_AA, en_aa);
 8001300:	7d7b      	ldrb	r3, [r7, #21]
 8001302:	4619      	mov	r1, r3
 8001304:	2001      	movs	r0, #1
 8001306:	f000 f9bf 	bl	8001688 <write_register>
	  }

	  uint8_t status = read_register(NRF24L01P_REG_STATUS);
 800130a:	2007      	movs	r0, #7
 800130c:	f000 f996 	bl	800163c <read_register>
 8001310:	4603      	mov	r3, r0
 8001312:	753b      	strb	r3, [r7, #20]
	  if (status == 0xFF || status == 0x00) {
 8001314:	7d3b      	ldrb	r3, [r7, #20]
 8001316:	2bff      	cmp	r3, #255	@ 0xff
 8001318:	d002      	beq.n	8001320 <main+0x1cc>
 800131a:	7d3b      	ldrb	r3, [r7, #20]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d112      	bne.n	8001346 <main+0x1f2>
	      // Radio is not responding
	      nrf24l01p_tx_init(2500, _250kbps);
 8001320:	2102      	movs	r1, #2
 8001322:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 8001326:	f000 f9dd 	bl	80016e4 <nrf24l01p_tx_init>

	      uint8_t en_aa = read_register(NRF24L01P_REG_EN_AA);
 800132a:	2001      	movs	r0, #1
 800132c:	f000 f986 	bl	800163c <read_register>
 8001330:	4603      	mov	r3, r0
 8001332:	74fb      	strb	r3, [r7, #19]
	      en_aa &= ~(1 << 0);           // Disable AA on pipe 0
 8001334:	7cfb      	ldrb	r3, [r7, #19]
 8001336:	f023 0301 	bic.w	r3, r3, #1
 800133a:	74fb      	strb	r3, [r7, #19]
	      write_register(NRF24L01P_REG_EN_AA, en_aa);
 800133c:	7cfb      	ldrb	r3, [r7, #19]
 800133e:	4619      	mov	r1, r3
 8001340:	2001      	movs	r0, #1
 8001342:	f000 f9a1 	bl	8001688 <write_register>
	  }

	  uint8_t observe_tx = read_register(NRF24L01P_REG_OBSERVE_TX);
 8001346:	2008      	movs	r0, #8
 8001348:	f000 f978 	bl	800163c <read_register>
 800134c:	4603      	mov	r3, r0
 800134e:	74bb      	strb	r3, [r7, #18]
	  uint8_t plos_cnt = (observe_tx >> 4) & 0x0F;
 8001350:	7cbb      	ldrb	r3, [r7, #18]
 8001352:	091b      	lsrs	r3, r3, #4
 8001354:	747b      	strb	r3, [r7, #17]

	  if (plos_cnt > 0) {
 8001356:	7c7b      	ldrb	r3, [r7, #17]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d012      	beq.n	8001382 <main+0x22e>
	      // Transmission failed, reinit radio
		  nrf24l01p_tx_init(2500, _250kbps);
 800135c:	2102      	movs	r1, #2
 800135e:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 8001362:	f000 f9bf 	bl	80016e4 <nrf24l01p_tx_init>

		  uint8_t en_aa = read_register(NRF24L01P_REG_EN_AA);
 8001366:	2001      	movs	r0, #1
 8001368:	f000 f968 	bl	800163c <read_register>
 800136c:	4603      	mov	r3, r0
 800136e:	743b      	strb	r3, [r7, #16]
		  en_aa &= ~(1 << 0);           // Disable AA on pipe 0
 8001370:	7c3b      	ldrb	r3, [r7, #16]
 8001372:	f023 0301 	bic.w	r3, r3, #1
 8001376:	743b      	strb	r3, [r7, #16]
		  write_register(NRF24L01P_REG_EN_AA, en_aa);
 8001378:	7c3b      	ldrb	r3, [r7, #16]
 800137a:	4619      	mov	r1, r3
 800137c:	2001      	movs	r0, #1
 800137e:	f000 f983 	bl	8001688 <write_register>
	  }

	  HAL_Delay(1);
 8001382:	2001      	movs	r0, #1
 8001384:	f000 feb6 	bl	80020f4 <HAL_Delay>
  {
 8001388:	e708      	b.n	800119c <main+0x48>
 800138a:	bf00      	nop
 800138c:	40010c00 	.word	0x40010c00
 8001390:	20000084 	.word	0x20000084
 8001394:	2000010e 	.word	0x2000010e
 8001398:	2000010c 	.word	0x2000010c
 800139c:	40011000 	.word	0x40011000
 80013a0:	20000110 	.word	0x20000110

080013a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b090      	sub	sp, #64	@ 0x40
 80013a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013aa:	f107 0318 	add.w	r3, r7, #24
 80013ae:	2228      	movs	r2, #40	@ 0x28
 80013b0:	2100      	movs	r1, #0
 80013b2:	4618      	mov	r0, r3
 80013b4:	f006 fae6 	bl	8007984 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013b8:	1d3b      	adds	r3, r7, #4
 80013ba:	2200      	movs	r2, #0
 80013bc:	601a      	str	r2, [r3, #0]
 80013be:	605a      	str	r2, [r3, #4]
 80013c0:	609a      	str	r2, [r3, #8]
 80013c2:	60da      	str	r2, [r3, #12]
 80013c4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013c6:	2301      	movs	r3, #1
 80013c8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013ca:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80013ce:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80013d0:	2300      	movs	r3, #0
 80013d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013d4:	2301      	movs	r3, #1
 80013d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013d8:	2302      	movs	r3, #2
 80013da:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013dc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80013e0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80013e2:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80013e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013e8:	f107 0318 	add.w	r3, r7, #24
 80013ec:	4618      	mov	r0, r3
 80013ee:	f003 ffcb 	bl	8005388 <HAL_RCC_OscConfig>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <SystemClock_Config+0x58>
  {
    Error_Handler();
 80013f8:	f000 f8ea 	bl	80015d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013fc:	230f      	movs	r3, #15
 80013fe:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001400:	2302      	movs	r3, #2
 8001402:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001404:	2300      	movs	r3, #0
 8001406:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001408:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800140c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800140e:	2300      	movs	r3, #0
 8001410:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001412:	1d3b      	adds	r3, r7, #4
 8001414:	2102      	movs	r1, #2
 8001416:	4618      	mov	r0, r3
 8001418:	f004 fa38 	bl	800588c <HAL_RCC_ClockConfig>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001422:	f000 f8d5 	bl	80015d0 <Error_Handler>
  }
}
 8001426:	bf00      	nop
 8001428:	3740      	adds	r7, #64	@ 0x40
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}

0800142e <HAL_GPIO_EXTI_Callback>:
//		  HAL_UART_Receive_IT(&huart1, rx_buff, 1);
//		  HAL_UART_Transmit_IT(&huart1, rx_buff, 1);
//	}

	void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
	{
 800142e:	b580      	push	{r7, lr}
 8001430:	b082      	sub	sp, #8
 8001432:	af00      	add	r7, sp, #0
 8001434:	4603      	mov	r3, r0
 8001436:	80fb      	strh	r3, [r7, #6]

		if(GPIO_Pin == NRF24L01P_IRQ_PIN_NUMBER) {
 8001438:	88fb      	ldrh	r3, [r7, #6]
 800143a:	2b02      	cmp	r3, #2
 800143c:	d101      	bne.n	8001442 <HAL_GPIO_EXTI_Callback+0x14>
//			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
			nrf24l01p_tx_irq(); // clear interrupt flag
 800143e:	f000 f987 	bl	8001750 <nrf24l01p_tx_irq>
//			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
//			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
		}


	}
 8001442:	bf00      	nop
 8001444:	3708      	adds	r7, #8
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
	...

0800144c <nrf24l01p_dump_registers>:

	void nrf24l01p_dump_registers(void) {
 800144c:	b580      	push	{r7, lr}
 800144e:	b090      	sub	sp, #64	@ 0x40
 8001450:	af00      	add	r7, sp, #0
//	    HAL_UART_Transmit(&huart1, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);

	    char buf[64];

	    // CONFIG (0x00)
	    snprintf(buf, sizeof(buf), "CONFIG     = 0x%02X\r\n", read_register(0x00));
 8001452:	2000      	movs	r0, #0
 8001454:	f000 f8f2 	bl	800163c <read_register>
 8001458:	4603      	mov	r3, r0
 800145a:	4638      	mov	r0, r7
 800145c:	4a53      	ldr	r2, [pc, #332]	@ (80015ac <nrf24l01p_dump_registers+0x160>)
 800145e:	2140      	movs	r1, #64	@ 0x40
 8001460:	f006 f982 	bl	8007768 <sniprintf>
	    HAL_UART_Transmit(&huart1, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
 8001464:	463b      	mov	r3, r7
 8001466:	4618      	mov	r0, r3
 8001468:	f7fe fe72 	bl	8000150 <strlen>
 800146c:	4603      	mov	r3, r0
 800146e:	b29a      	uxth	r2, r3
 8001470:	4639      	mov	r1, r7
 8001472:	f04f 33ff 	mov.w	r3, #4294967295
 8001476:	484e      	ldr	r0, [pc, #312]	@ (80015b0 <nrf24l01p_dump_registers+0x164>)
 8001478:	f005 fa7f 	bl	800697a <HAL_UART_Transmit>

	    // RF_CH (0x05)
	    snprintf(buf, sizeof(buf), "RF_CH      = 0x%02X\r\n", read_register(0x05));
 800147c:	2005      	movs	r0, #5
 800147e:	f000 f8dd 	bl	800163c <read_register>
 8001482:	4603      	mov	r3, r0
 8001484:	4638      	mov	r0, r7
 8001486:	4a4b      	ldr	r2, [pc, #300]	@ (80015b4 <nrf24l01p_dump_registers+0x168>)
 8001488:	2140      	movs	r1, #64	@ 0x40
 800148a:	f006 f96d 	bl	8007768 <sniprintf>
	    HAL_UART_Transmit(&huart1, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
 800148e:	463b      	mov	r3, r7
 8001490:	4618      	mov	r0, r3
 8001492:	f7fe fe5d 	bl	8000150 <strlen>
 8001496:	4603      	mov	r3, r0
 8001498:	b29a      	uxth	r2, r3
 800149a:	4639      	mov	r1, r7
 800149c:	f04f 33ff 	mov.w	r3, #4294967295
 80014a0:	4843      	ldr	r0, [pc, #268]	@ (80015b0 <nrf24l01p_dump_registers+0x164>)
 80014a2:	f005 fa6a 	bl	800697a <HAL_UART_Transmit>

	    // RF_SETUP (0x06)
	    snprintf(buf, sizeof(buf), "RF_SETUP   = 0x%02X\r\n", read_register(0x06));
 80014a6:	2006      	movs	r0, #6
 80014a8:	f000 f8c8 	bl	800163c <read_register>
 80014ac:	4603      	mov	r3, r0
 80014ae:	4638      	mov	r0, r7
 80014b0:	4a41      	ldr	r2, [pc, #260]	@ (80015b8 <nrf24l01p_dump_registers+0x16c>)
 80014b2:	2140      	movs	r1, #64	@ 0x40
 80014b4:	f006 f958 	bl	8007768 <sniprintf>
	    HAL_UART_Transmit(&huart1, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
 80014b8:	463b      	mov	r3, r7
 80014ba:	4618      	mov	r0, r3
 80014bc:	f7fe fe48 	bl	8000150 <strlen>
 80014c0:	4603      	mov	r3, r0
 80014c2:	b29a      	uxth	r2, r3
 80014c4:	4639      	mov	r1, r7
 80014c6:	f04f 33ff 	mov.w	r3, #4294967295
 80014ca:	4839      	ldr	r0, [pc, #228]	@ (80015b0 <nrf24l01p_dump_registers+0x164>)
 80014cc:	f005 fa55 	bl	800697a <HAL_UART_Transmit>

	    // STATUS (0x07)
	    snprintf(buf, sizeof(buf), "STATUS     = 0x%02X\r\n", read_register(0x07));
 80014d0:	2007      	movs	r0, #7
 80014d2:	f000 f8b3 	bl	800163c <read_register>
 80014d6:	4603      	mov	r3, r0
 80014d8:	4638      	mov	r0, r7
 80014da:	4a38      	ldr	r2, [pc, #224]	@ (80015bc <nrf24l01p_dump_registers+0x170>)
 80014dc:	2140      	movs	r1, #64	@ 0x40
 80014de:	f006 f943 	bl	8007768 <sniprintf>
	    HAL_UART_Transmit(&huart1, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
 80014e2:	463b      	mov	r3, r7
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7fe fe33 	bl	8000150 <strlen>
 80014ea:	4603      	mov	r3, r0
 80014ec:	b29a      	uxth	r2, r3
 80014ee:	4639      	mov	r1, r7
 80014f0:	f04f 33ff 	mov.w	r3, #4294967295
 80014f4:	482e      	ldr	r0, [pc, #184]	@ (80015b0 <nrf24l01p_dump_registers+0x164>)
 80014f6:	f005 fa40 	bl	800697a <HAL_UART_Transmit>

	    // FIFO_STATUS (0x17)
	    snprintf(buf, sizeof(buf), "FIFO_STAT  = 0x%02X\r\n", read_register(0x17));
 80014fa:	2017      	movs	r0, #23
 80014fc:	f000 f89e 	bl	800163c <read_register>
 8001500:	4603      	mov	r3, r0
 8001502:	4638      	mov	r0, r7
 8001504:	4a2e      	ldr	r2, [pc, #184]	@ (80015c0 <nrf24l01p_dump_registers+0x174>)
 8001506:	2140      	movs	r1, #64	@ 0x40
 8001508:	f006 f92e 	bl	8007768 <sniprintf>
	    HAL_UART_Transmit(&huart1, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
 800150c:	463b      	mov	r3, r7
 800150e:	4618      	mov	r0, r3
 8001510:	f7fe fe1e 	bl	8000150 <strlen>
 8001514:	4603      	mov	r3, r0
 8001516:	b29a      	uxth	r2, r3
 8001518:	4639      	mov	r1, r7
 800151a:	f04f 33ff 	mov.w	r3, #4294967295
 800151e:	4824      	ldr	r0, [pc, #144]	@ (80015b0 <nrf24l01p_dump_registers+0x164>)
 8001520:	f005 fa2b 	bl	800697a <HAL_UART_Transmit>

	    // TX_ADDR (0x10) - 5 bytes
	    snprintf(buf, sizeof(buf), "TX_ADDR    = 0x%02X\r\n", read_register(0x10));
 8001524:	2010      	movs	r0, #16
 8001526:	f000 f889 	bl	800163c <read_register>
 800152a:	4603      	mov	r3, r0
 800152c:	4638      	mov	r0, r7
 800152e:	4a25      	ldr	r2, [pc, #148]	@ (80015c4 <nrf24l01p_dump_registers+0x178>)
 8001530:	2140      	movs	r1, #64	@ 0x40
 8001532:	f006 f919 	bl	8007768 <sniprintf>
	    HAL_UART_Transmit(&huart1, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
 8001536:	463b      	mov	r3, r7
 8001538:	4618      	mov	r0, r3
 800153a:	f7fe fe09 	bl	8000150 <strlen>
 800153e:	4603      	mov	r3, r0
 8001540:	b29a      	uxth	r2, r3
 8001542:	4639      	mov	r1, r7
 8001544:	f04f 33ff 	mov.w	r3, #4294967295
 8001548:	4819      	ldr	r0, [pc, #100]	@ (80015b0 <nrf24l01p_dump_registers+0x164>)
 800154a:	f005 fa16 	bl	800697a <HAL_UART_Transmit>

	    snprintf(buf, sizeof(buf), "RX_ADDR_P0    = 0x%02X\r\n", read_register(0x0A));
 800154e:	200a      	movs	r0, #10
 8001550:	f000 f874 	bl	800163c <read_register>
 8001554:	4603      	mov	r3, r0
 8001556:	4638      	mov	r0, r7
 8001558:	4a1b      	ldr	r2, [pc, #108]	@ (80015c8 <nrf24l01p_dump_registers+0x17c>)
 800155a:	2140      	movs	r1, #64	@ 0x40
 800155c:	f006 f904 	bl	8007768 <sniprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
 8001560:	463b      	mov	r3, r7
 8001562:	4618      	mov	r0, r3
 8001564:	f7fe fdf4 	bl	8000150 <strlen>
 8001568:	4603      	mov	r3, r0
 800156a:	b29a      	uxth	r2, r3
 800156c:	4639      	mov	r1, r7
 800156e:	f04f 33ff 	mov.w	r3, #4294967295
 8001572:	480f      	ldr	r0, [pc, #60]	@ (80015b0 <nrf24l01p_dump_registers+0x164>)
 8001574:	f005 fa01 	bl	800697a <HAL_UART_Transmit>

		snprintf(buf, sizeof(buf), "RX_ADDR_P1    = 0x%02X\r\n", read_register(0x0B));
 8001578:	200b      	movs	r0, #11
 800157a:	f000 f85f 	bl	800163c <read_register>
 800157e:	4603      	mov	r3, r0
 8001580:	4638      	mov	r0, r7
 8001582:	4a12      	ldr	r2, [pc, #72]	@ (80015cc <nrf24l01p_dump_registers+0x180>)
 8001584:	2140      	movs	r1, #64	@ 0x40
 8001586:	f006 f8ef 	bl	8007768 <sniprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
 800158a:	463b      	mov	r3, r7
 800158c:	4618      	mov	r0, r3
 800158e:	f7fe fddf 	bl	8000150 <strlen>
 8001592:	4603      	mov	r3, r0
 8001594:	b29a      	uxth	r2, r3
 8001596:	4639      	mov	r1, r7
 8001598:	f04f 33ff 	mov.w	r3, #4294967295
 800159c:	4804      	ldr	r0, [pc, #16]	@ (80015b0 <nrf24l01p_dump_registers+0x164>)
 800159e:	f005 f9ec 	bl	800697a <HAL_UART_Transmit>

	}
 80015a2:	bf00      	nop
 80015a4:	3740      	adds	r7, #64	@ 0x40
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	080088d0 	.word	0x080088d0
 80015b0:	20000170 	.word	0x20000170
 80015b4:	080088e8 	.word	0x080088e8
 80015b8:	08008900 	.word	0x08008900
 80015bc:	08008918 	.word	0x08008918
 80015c0:	08008930 	.word	0x08008930
 80015c4:	08008948 	.word	0x08008948
 80015c8:	08008960 	.word	0x08008960
 80015cc:	0800897c 	.word	0x0800897c

080015d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015d4:	b672      	cpsid	i
}
 80015d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015d8:	bf00      	nop
 80015da:	e7fd      	b.n	80015d8 <Error_Handler+0x8>

080015dc <cs_high>:

#include "nrf24l01p.h"

volatile bool tx_failed = false;
static void cs_high()
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_SPI_CS_PIN_PORT, NRF24L01P_SPI_CS_PIN_NUMBER, GPIO_PIN_SET);
 80015e0:	2201      	movs	r2, #1
 80015e2:	2110      	movs	r1, #16
 80015e4:	4802      	ldr	r0, [pc, #8]	@ (80015f0 <cs_high+0x14>)
 80015e6:	f001 f912 	bl	800280e <HAL_GPIO_WritePin>
}
 80015ea:	bf00      	nop
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	40010800 	.word	0x40010800

080015f4 <cs_low>:

static void cs_low()
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_SPI_CS_PIN_PORT, NRF24L01P_SPI_CS_PIN_NUMBER, GPIO_PIN_RESET);
 80015f8:	2200      	movs	r2, #0
 80015fa:	2110      	movs	r1, #16
 80015fc:	4802      	ldr	r0, [pc, #8]	@ (8001608 <cs_low+0x14>)
 80015fe:	f001 f906 	bl	800280e <HAL_GPIO_WritePin>
}
 8001602:	bf00      	nop
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	40010800 	.word	0x40010800

0800160c <ce_high>:

static void ce_high()
{
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_CE_PIN_PORT, NRF24L01P_CE_PIN_NUMBER, GPIO_PIN_SET);
 8001610:	2201      	movs	r2, #1
 8001612:	2101      	movs	r1, #1
 8001614:	4802      	ldr	r0, [pc, #8]	@ (8001620 <ce_high+0x14>)
 8001616:	f001 f8fa 	bl	800280e <HAL_GPIO_WritePin>
}
 800161a:	bf00      	nop
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	40010c00 	.word	0x40010c00

08001624 <ce_low>:

void ce_low()
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_CE_PIN_PORT, NRF24L01P_CE_PIN_NUMBER, GPIO_PIN_RESET);
 8001628:	2200      	movs	r2, #0
 800162a:	2101      	movs	r1, #1
 800162c:	4802      	ldr	r0, [pc, #8]	@ (8001638 <ce_low+0x14>)
 800162e:	f001 f8ee 	bl	800280e <HAL_GPIO_WritePin>
}
 8001632:	bf00      	nop
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	40010c00 	.word	0x40010c00

0800163c <read_register>:

uint8_t read_register(uint8_t reg)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b086      	sub	sp, #24
 8001640:	af02      	add	r7, sp, #8
 8001642:	4603      	mov	r3, r0
 8001644:	71fb      	strb	r3, [r7, #7]
    uint8_t command = NRF24L01P_CMD_R_REGISTER | reg;
 8001646:	79fb      	ldrb	r3, [r7, #7]
 8001648:	73fb      	strb	r3, [r7, #15]
    uint8_t status;
    uint8_t read_val;

    cs_low();
 800164a:	f7ff ffd3 	bl	80015f4 <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 800164e:	f107 020e 	add.w	r2, r7, #14
 8001652:	f107 010f 	add.w	r1, r7, #15
 8001656:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800165a:	9300      	str	r3, [sp, #0]
 800165c:	2301      	movs	r3, #1
 800165e:	4809      	ldr	r0, [pc, #36]	@ (8001684 <read_register+0x48>)
 8001660:	f004 fd83 	bl	800616a <HAL_SPI_TransmitReceive>
    HAL_SPI_Receive(NRF24L01P_SPI, &read_val, 1, 2000);
 8001664:	f107 010d 	add.w	r1, r7, #13
 8001668:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800166c:	2201      	movs	r2, #1
 800166e:	4805      	ldr	r0, [pc, #20]	@ (8001684 <read_register+0x48>)
 8001670:	f004 fc62 	bl	8005f38 <HAL_SPI_Receive>
    cs_high();
 8001674:	f7ff ffb2 	bl	80015dc <cs_high>

    return read_val;
 8001678:	7b7b      	ldrb	r3, [r7, #13]
}
 800167a:	4618      	mov	r0, r3
 800167c:	3710      	adds	r7, #16
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	20000114 	.word	0x20000114

08001688 <write_register>:
    return status;
}


uint8_t write_register(uint8_t reg, uint8_t value)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b086      	sub	sp, #24
 800168c:	af02      	add	r7, sp, #8
 800168e:	4603      	mov	r3, r0
 8001690:	460a      	mov	r2, r1
 8001692:	71fb      	strb	r3, [r7, #7]
 8001694:	4613      	mov	r3, r2
 8001696:	71bb      	strb	r3, [r7, #6]
    uint8_t command = NRF24L01P_CMD_W_REGISTER | reg;
 8001698:	79fb      	ldrb	r3, [r7, #7]
 800169a:	f043 0320 	orr.w	r3, r3, #32
 800169e:	b2db      	uxtb	r3, r3
 80016a0:	73fb      	strb	r3, [r7, #15]
    uint8_t status;
    uint8_t write_val = value;
 80016a2:	79bb      	ldrb	r3, [r7, #6]
 80016a4:	737b      	strb	r3, [r7, #13]

    cs_low();
 80016a6:	f7ff ffa5 	bl	80015f4 <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 80016aa:	f107 020e 	add.w	r2, r7, #14
 80016ae:	f107 010f 	add.w	r1, r7, #15
 80016b2:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80016b6:	9300      	str	r3, [sp, #0]
 80016b8:	2301      	movs	r3, #1
 80016ba:	4809      	ldr	r0, [pc, #36]	@ (80016e0 <write_register+0x58>)
 80016bc:	f004 fd55 	bl	800616a <HAL_SPI_TransmitReceive>
    HAL_SPI_Transmit(NRF24L01P_SPI, &write_val, 1, 2000);
 80016c0:	f107 010d 	add.w	r1, r7, #13
 80016c4:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80016c8:	2201      	movs	r2, #1
 80016ca:	4805      	ldr	r0, [pc, #20]	@ (80016e0 <write_register+0x58>)
 80016cc:	f004 faf0 	bl	8005cb0 <HAL_SPI_Transmit>
    cs_high();
 80016d0:	f7ff ff84 	bl	80015dc <cs_high>

    return write_val;
 80016d4:	7b7b      	ldrb	r3, [r7, #13]
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3710      	adds	r7, #16
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	20000114 	.word	0x20000114

080016e4 <nrf24l01p_tx_init>:

    ce_high();
}

void nrf24l01p_tx_init(channel MHz, air_data_rate bps)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	4603      	mov	r3, r0
 80016ec:	460a      	mov	r2, r1
 80016ee:	80fb      	strh	r3, [r7, #6]
 80016f0:	4613      	mov	r3, r2
 80016f2:	717b      	strb	r3, [r7, #5]
    nrf24l01p_reset();
 80016f4:	f000 f856 	bl	80017a4 <nrf24l01p_reset>

    nrf24l01p_ptx_mode();
 80016f8:	f000 f8a8 	bl	800184c <nrf24l01p_ptx_mode>
    nrf24l01p_power_up();
 80016fc:	f000 f952 	bl	80019a4 <nrf24l01p_power_up>

    nrf24l01p_set_rf_channel(MHz);
 8001700:	88fb      	ldrh	r3, [r7, #6]
 8001702:	4618      	mov	r0, r3
 8001704:	f000 f9da 	bl	8001abc <nrf24l01p_set_rf_channel>
    nrf24l01p_set_rf_air_data_rate(bps);
 8001708:	797b      	ldrb	r3, [r7, #5]
 800170a:	4618      	mov	r0, r3
 800170c:	f000 fa07 	bl	8001b1e <nrf24l01p_set_rf_air_data_rate>
    nrf24l01p_set_rf_tx_output_power(_0dBm);
 8001710:	2003      	movs	r0, #3
 8001712:	f000 f9e6 	bl	8001ae2 <nrf24l01p_set_rf_tx_output_power>

    nrf24l01p_set_crc_length(1);
 8001716:	2001      	movs	r0, #1
 8001718:	f000 f959 	bl	80019ce <nrf24l01p_set_crc_length>
    nrf24l01p_set_address_widths(5);
 800171c:	2005      	movs	r0, #5
 800171e:	f000 f979 	bl	8001a14 <nrf24l01p_set_address_widths>

    nrf24l01p_auto_retransmit_count(3);
 8001722:	2003      	movs	r0, #3
 8001724:	f000 f986 	bl	8001a34 <nrf24l01p_auto_retransmit_count>
    nrf24l01p_auto_retransmit_delay(250);
 8001728:	20fa      	movs	r0, #250	@ 0xfa
 800172a:	f000 f99f 	bl	8001a6c <nrf24l01p_auto_retransmit_delay>

    ce_high();
 800172e:	f7ff ff6d 	bl	800160c <ce_high>
}
 8001732:	bf00      	nop
 8001734:	3708      	adds	r7, #8
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}

0800173a <nrf24l01p_tx_transmit>:

    HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
}

void nrf24l01p_tx_transmit(uint8_t* tx_payload)
{
 800173a:	b580      	push	{r7, lr}
 800173c:	b082      	sub	sp, #8
 800173e:	af00      	add	r7, sp, #0
 8001740:	6078      	str	r0, [r7, #4]
    nrf24l01p_write_tx_fifo(tx_payload);
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	f000 f898 	bl	8001878 <nrf24l01p_write_tx_fifo>
}
 8001748:	bf00      	nop
 800174a:	3708      	adds	r7, #8
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}

08001750 <nrf24l01p_tx_irq>:

void nrf24l01p_tx_irq()
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
    uint8_t tx_ds = nrf24l01p_get_status();
 8001756:	f000 f8e3 	bl	8001920 <nrf24l01p_get_status>
 800175a:	4603      	mov	r3, r0
 800175c:	71fb      	strb	r3, [r7, #7]
    tx_ds &= 0x20;
 800175e:	79fb      	ldrb	r3, [r7, #7]
 8001760:	f003 0320 	and.w	r3, r3, #32
 8001764:	71fb      	strb	r3, [r7, #7]

    if(tx_ds)
 8001766:	79fb      	ldrb	r3, [r7, #7]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d007      	beq.n	800177c <nrf24l01p_tx_irq+0x2c>
    {
        // TX_DS
        HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800176c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001770:	480a      	ldr	r0, [pc, #40]	@ (800179c <nrf24l01p_tx_irq+0x4c>)
 8001772:	f001 f864 	bl	800283e <HAL_GPIO_TogglePin>
        nrf24l01p_clear_tx_ds();
 8001776:	f000 f8ed 	bl	8001954 <nrf24l01p_clear_tx_ds>
        // MAX_RT
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
        nrf24l01p_clear_max_rt();
        tx_failed = true;
    }
}
 800177a:	e00a      	b.n	8001792 <nrf24l01p_tx_irq+0x42>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
 800177c:	2201      	movs	r2, #1
 800177e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001782:	4806      	ldr	r0, [pc, #24]	@ (800179c <nrf24l01p_tx_irq+0x4c>)
 8001784:	f001 f843 	bl	800280e <HAL_GPIO_WritePin>
        nrf24l01p_clear_max_rt();
 8001788:	f000 f8f8 	bl	800197c <nrf24l01p_clear_max_rt>
        tx_failed = true;
 800178c:	4b04      	ldr	r3, [pc, #16]	@ (80017a0 <nrf24l01p_tx_irq+0x50>)
 800178e:	2201      	movs	r2, #1
 8001790:	701a      	strb	r2, [r3, #0]
}
 8001792:	bf00      	nop
 8001794:	3708      	adds	r7, #8
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	40011000 	.word	0x40011000
 80017a0:	20000110 	.word	0x20000110

080017a4 <nrf24l01p_reset>:

/* nRF24L01+ Sub Functions */
void nrf24l01p_reset()
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
    // Reset pins
    cs_high();
 80017a8:	f7ff ff18 	bl	80015dc <cs_high>
    ce_low();
 80017ac:	f7ff ff3a 	bl	8001624 <ce_low>

    // Reset registers
    write_register(NRF24L01P_REG_CONFIG, 0x08);
 80017b0:	2108      	movs	r1, #8
 80017b2:	2000      	movs	r0, #0
 80017b4:	f7ff ff68 	bl	8001688 <write_register>
    write_register(NRF24L01P_REG_EN_AA, 0x3F);
 80017b8:	213f      	movs	r1, #63	@ 0x3f
 80017ba:	2001      	movs	r0, #1
 80017bc:	f7ff ff64 	bl	8001688 <write_register>
    write_register(NRF24L01P_REG_EN_RXADDR, 0x03);
 80017c0:	2103      	movs	r1, #3
 80017c2:	2002      	movs	r0, #2
 80017c4:	f7ff ff60 	bl	8001688 <write_register>
    write_register(NRF24L01P_REG_SETUP_AW, 0x03);
 80017c8:	2103      	movs	r1, #3
 80017ca:	2003      	movs	r0, #3
 80017cc:	f7ff ff5c 	bl	8001688 <write_register>
    write_register(NRF24L01P_REG_SETUP_RETR, 0x03);
 80017d0:	2103      	movs	r1, #3
 80017d2:	2004      	movs	r0, #4
 80017d4:	f7ff ff58 	bl	8001688 <write_register>
    write_register(NRF24L01P_REG_RF_CH, 0x02);
 80017d8:	2102      	movs	r1, #2
 80017da:	2005      	movs	r0, #5
 80017dc:	f7ff ff54 	bl	8001688 <write_register>
    write_register(NRF24L01P_REG_RF_SETUP, 0x07);
 80017e0:	2107      	movs	r1, #7
 80017e2:	2006      	movs	r0, #6
 80017e4:	f7ff ff50 	bl	8001688 <write_register>
    write_register(NRF24L01P_REG_STATUS, 0x7E);
 80017e8:	217e      	movs	r1, #126	@ 0x7e
 80017ea:	2007      	movs	r0, #7
 80017ec:	f7ff ff4c 	bl	8001688 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P0, 0x00);
 80017f0:	2100      	movs	r1, #0
 80017f2:	2011      	movs	r0, #17
 80017f4:	f7ff ff48 	bl	8001688 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P0, 0x00);
 80017f8:	2100      	movs	r1, #0
 80017fa:	2011      	movs	r0, #17
 80017fc:	f7ff ff44 	bl	8001688 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P1, 0x00);
 8001800:	2100      	movs	r1, #0
 8001802:	2012      	movs	r0, #18
 8001804:	f7ff ff40 	bl	8001688 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P2, 0x00);
 8001808:	2100      	movs	r1, #0
 800180a:	2013      	movs	r0, #19
 800180c:	f7ff ff3c 	bl	8001688 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P3, 0x00);
 8001810:	2100      	movs	r1, #0
 8001812:	2014      	movs	r0, #20
 8001814:	f7ff ff38 	bl	8001688 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P4, 0x00);
 8001818:	2100      	movs	r1, #0
 800181a:	2015      	movs	r0, #21
 800181c:	f7ff ff34 	bl	8001688 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P5, 0x00);
 8001820:	2100      	movs	r1, #0
 8001822:	2016      	movs	r0, #22
 8001824:	f7ff ff30 	bl	8001688 <write_register>
    write_register(NRF24L01P_REG_FIFO_STATUS, 0x11);
 8001828:	2111      	movs	r1, #17
 800182a:	2017      	movs	r0, #23
 800182c:	f7ff ff2c 	bl	8001688 <write_register>
    write_register(NRF24L01P_REG_DYNPD, 0x00);
 8001830:	2100      	movs	r1, #0
 8001832:	201c      	movs	r0, #28
 8001834:	f7ff ff28 	bl	8001688 <write_register>
    write_register(NRF24L01P_REG_FEATURE, 0x00);
 8001838:	2100      	movs	r1, #0
 800183a:	201d      	movs	r0, #29
 800183c:	f7ff ff24 	bl	8001688 <write_register>

    // Reset FIFO
    nrf24l01p_flush_rx_fifo();
 8001840:	f000 f83e 	bl	80018c0 <nrf24l01p_flush_rx_fifo>
    nrf24l01p_flush_tx_fifo();
 8001844:	f000 f854 	bl	80018f0 <nrf24l01p_flush_tx_fifo>
}
 8001848:	bf00      	nop
 800184a:	bd80      	pop	{r7, pc}

0800184c <nrf24l01p_ptx_mode>:

    write_register(NRF24L01P_REG_CONFIG, new_config);
}

void nrf24l01p_ptx_mode()
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
    uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 8001852:	2000      	movs	r0, #0
 8001854:	f7ff fef2 	bl	800163c <read_register>
 8001858:	4603      	mov	r3, r0
 800185a:	71fb      	strb	r3, [r7, #7]
    new_config &= 0xFE;
 800185c:	79fb      	ldrb	r3, [r7, #7]
 800185e:	f023 0301 	bic.w	r3, r3, #1
 8001862:	71fb      	strb	r3, [r7, #7]

    write_register(NRF24L01P_REG_CONFIG, new_config);
 8001864:	79fb      	ldrb	r3, [r7, #7]
 8001866:	4619      	mov	r1, r3
 8001868:	2000      	movs	r0, #0
 800186a:	f7ff ff0d 	bl	8001688 <write_register>
}
 800186e:	bf00      	nop
 8001870:	3708      	adds	r7, #8
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
	...

08001878 <nrf24l01p_write_tx_fifo>:

    return status;
}

uint8_t nrf24l01p_write_tx_fifo(uint8_t* tx_payload)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b086      	sub	sp, #24
 800187c:	af02      	add	r7, sp, #8
 800187e:	6078      	str	r0, [r7, #4]
    uint8_t command = NRF24L01P_CMD_W_TX_PAYLOAD;
 8001880:	23a0      	movs	r3, #160	@ 0xa0
 8001882:	73fb      	strb	r3, [r7, #15]
    uint8_t status;

    cs_low();
 8001884:	f7ff feb6 	bl	80015f4 <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8001888:	f107 020e 	add.w	r2, r7, #14
 800188c:	f107 010f 	add.w	r1, r7, #15
 8001890:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001894:	9300      	str	r3, [sp, #0]
 8001896:	2301      	movs	r3, #1
 8001898:	4808      	ldr	r0, [pc, #32]	@ (80018bc <nrf24l01p_write_tx_fifo+0x44>)
 800189a:	f004 fc66 	bl	800616a <HAL_SPI_TransmitReceive>
    HAL_SPI_Transmit(NRF24L01P_SPI, tx_payload, NRF24L01P_PAYLOAD_LENGTH, 2000);
 800189e:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80018a2:	220e      	movs	r2, #14
 80018a4:	6879      	ldr	r1, [r7, #4]
 80018a6:	4805      	ldr	r0, [pc, #20]	@ (80018bc <nrf24l01p_write_tx_fifo+0x44>)
 80018a8:	f004 fa02 	bl	8005cb0 <HAL_SPI_Transmit>
    cs_high();
 80018ac:	f7ff fe96 	bl	80015dc <cs_high>

    return status;
 80018b0:	7bbb      	ldrb	r3, [r7, #14]
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3710      	adds	r7, #16
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	20000114 	.word	0x20000114

080018c0 <nrf24l01p_flush_rx_fifo>:

void nrf24l01p_flush_rx_fifo()
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b084      	sub	sp, #16
 80018c4:	af02      	add	r7, sp, #8
    uint8_t command = NRF24L01P_CMD_FLUSH_RX;
 80018c6:	23e2      	movs	r3, #226	@ 0xe2
 80018c8:	71fb      	strb	r3, [r7, #7]
    uint8_t status;

    cs_low();
 80018ca:	f7ff fe93 	bl	80015f4 <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 80018ce:	1dba      	adds	r2, r7, #6
 80018d0:	1df9      	adds	r1, r7, #7
 80018d2:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80018d6:	9300      	str	r3, [sp, #0]
 80018d8:	2301      	movs	r3, #1
 80018da:	4804      	ldr	r0, [pc, #16]	@ (80018ec <nrf24l01p_flush_rx_fifo+0x2c>)
 80018dc:	f004 fc45 	bl	800616a <HAL_SPI_TransmitReceive>
    cs_high();
 80018e0:	f7ff fe7c 	bl	80015dc <cs_high>
}
 80018e4:	bf00      	nop
 80018e6:	3708      	adds	r7, #8
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	20000114 	.word	0x20000114

080018f0 <nrf24l01p_flush_tx_fifo>:

void nrf24l01p_flush_tx_fifo()
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b084      	sub	sp, #16
 80018f4:	af02      	add	r7, sp, #8
    uint8_t command = NRF24L01P_CMD_FLUSH_TX;
 80018f6:	23e1      	movs	r3, #225	@ 0xe1
 80018f8:	71fb      	strb	r3, [r7, #7]
    uint8_t status;

    cs_low();
 80018fa:	f7ff fe7b 	bl	80015f4 <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 80018fe:	1dba      	adds	r2, r7, #6
 8001900:	1df9      	adds	r1, r7, #7
 8001902:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001906:	9300      	str	r3, [sp, #0]
 8001908:	2301      	movs	r3, #1
 800190a:	4804      	ldr	r0, [pc, #16]	@ (800191c <nrf24l01p_flush_tx_fifo+0x2c>)
 800190c:	f004 fc2d 	bl	800616a <HAL_SPI_TransmitReceive>
    cs_high();
 8001910:	f7ff fe64 	bl	80015dc <cs_high>
}
 8001914:	bf00      	nop
 8001916:	3708      	adds	r7, #8
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	20000114 	.word	0x20000114

08001920 <nrf24l01p_get_status>:

uint8_t nrf24l01p_get_status()
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b084      	sub	sp, #16
 8001924:	af02      	add	r7, sp, #8
    uint8_t command = NRF24L01P_CMD_NOP;
 8001926:	23ff      	movs	r3, #255	@ 0xff
 8001928:	71fb      	strb	r3, [r7, #7]
    uint8_t status;

    cs_low();
 800192a:	f7ff fe63 	bl	80015f4 <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 800192e:	1dba      	adds	r2, r7, #6
 8001930:	1df9      	adds	r1, r7, #7
 8001932:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001936:	9300      	str	r3, [sp, #0]
 8001938:	2301      	movs	r3, #1
 800193a:	4805      	ldr	r0, [pc, #20]	@ (8001950 <nrf24l01p_get_status+0x30>)
 800193c:	f004 fc15 	bl	800616a <HAL_SPI_TransmitReceive>
    cs_high();
 8001940:	f7ff fe4c 	bl	80015dc <cs_high>

    return status;
 8001944:	79bb      	ldrb	r3, [r7, #6]
}
 8001946:	4618      	mov	r0, r3
 8001948:	3708      	adds	r7, #8
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	20000114 	.word	0x20000114

08001954 <nrf24l01p_clear_tx_ds>:

    write_register(NRF24L01P_REG_STATUS, new_status);
}

void nrf24l01p_clear_tx_ds()
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b082      	sub	sp, #8
 8001958:	af00      	add	r7, sp, #0
    uint8_t new_status = nrf24l01p_get_status();
 800195a:	f7ff ffe1 	bl	8001920 <nrf24l01p_get_status>
 800195e:	4603      	mov	r3, r0
 8001960:	71fb      	strb	r3, [r7, #7]
    new_status |= 0x20;
 8001962:	79fb      	ldrb	r3, [r7, #7]
 8001964:	f043 0320 	orr.w	r3, r3, #32
 8001968:	71fb      	strb	r3, [r7, #7]

    write_register(NRF24L01P_REG_STATUS, new_status);
 800196a:	79fb      	ldrb	r3, [r7, #7]
 800196c:	4619      	mov	r1, r3
 800196e:	2007      	movs	r0, #7
 8001970:	f7ff fe8a 	bl	8001688 <write_register>
}
 8001974:	bf00      	nop
 8001976:	3708      	adds	r7, #8
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}

0800197c <nrf24l01p_clear_max_rt>:

void nrf24l01p_clear_max_rt()
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
    uint8_t new_status = nrf24l01p_get_status();
 8001982:	f7ff ffcd 	bl	8001920 <nrf24l01p_get_status>
 8001986:	4603      	mov	r3, r0
 8001988:	71fb      	strb	r3, [r7, #7]
    new_status |= 0x10;
 800198a:	79fb      	ldrb	r3, [r7, #7]
 800198c:	f043 0310 	orr.w	r3, r3, #16
 8001990:	71fb      	strb	r3, [r7, #7]

    write_register(NRF24L01P_REG_STATUS, new_status);
 8001992:	79fb      	ldrb	r3, [r7, #7]
 8001994:	4619      	mov	r1, r3
 8001996:	2007      	movs	r0, #7
 8001998:	f7ff fe76 	bl	8001688 <write_register>
}
 800199c:	bf00      	nop
 800199e:	3708      	adds	r7, #8
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}

080019a4 <nrf24l01p_power_up>:

void nrf24l01p_power_up()
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
    uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 80019aa:	2000      	movs	r0, #0
 80019ac:	f7ff fe46 	bl	800163c <read_register>
 80019b0:	4603      	mov	r3, r0
 80019b2:	71fb      	strb	r3, [r7, #7]
    new_config |= 1 << 1;
 80019b4:	79fb      	ldrb	r3, [r7, #7]
 80019b6:	f043 0302 	orr.w	r3, r3, #2
 80019ba:	71fb      	strb	r3, [r7, #7]

    write_register(NRF24L01P_REG_CONFIG, new_config);
 80019bc:	79fb      	ldrb	r3, [r7, #7]
 80019be:	4619      	mov	r1, r3
 80019c0:	2000      	movs	r0, #0
 80019c2:	f7ff fe61 	bl	8001688 <write_register>
}
 80019c6:	bf00      	nop
 80019c8:	3708      	adds	r7, #8
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}

080019ce <nrf24l01p_set_crc_length>:

    write_register(NRF24L01P_REG_CONFIG, new_config);
}

void nrf24l01p_set_crc_length(length bytes)
{
 80019ce:	b580      	push	{r7, lr}
 80019d0:	b084      	sub	sp, #16
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	4603      	mov	r3, r0
 80019d6:	71fb      	strb	r3, [r7, #7]
    uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 80019d8:	2000      	movs	r0, #0
 80019da:	f7ff fe2f 	bl	800163c <read_register>
 80019de:	4603      	mov	r3, r0
 80019e0:	73fb      	strb	r3, [r7, #15]

    switch(bytes)
 80019e2:	79fb      	ldrb	r3, [r7, #7]
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	d002      	beq.n	80019ee <nrf24l01p_set_crc_length+0x20>
 80019e8:	2b02      	cmp	r3, #2
 80019ea:	d005      	beq.n	80019f8 <nrf24l01p_set_crc_length+0x2a>
 80019ec:	e009      	b.n	8001a02 <nrf24l01p_set_crc_length+0x34>
    {
        // CRCO bit in CONFIG resiger set 0
        case 1:
            new_config &= 0xFB;
 80019ee:	7bfb      	ldrb	r3, [r7, #15]
 80019f0:	f023 0304 	bic.w	r3, r3, #4
 80019f4:	73fb      	strb	r3, [r7, #15]
            break;
 80019f6:	e004      	b.n	8001a02 <nrf24l01p_set_crc_length+0x34>
        // CRCO bit in CONFIG resiger set 1
        case 2:
            new_config |= 1 << 2;
 80019f8:	7bfb      	ldrb	r3, [r7, #15]
 80019fa:	f043 0304 	orr.w	r3, r3, #4
 80019fe:	73fb      	strb	r3, [r7, #15]
            break;
 8001a00:	bf00      	nop
    }

    write_register(NRF24L01P_REG_CONFIG, new_config);
 8001a02:	7bfb      	ldrb	r3, [r7, #15]
 8001a04:	4619      	mov	r1, r3
 8001a06:	2000      	movs	r0, #0
 8001a08:	f7ff fe3e 	bl	8001688 <write_register>
}
 8001a0c:	bf00      	nop
 8001a0e:	3710      	adds	r7, #16
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}

08001a14 <nrf24l01p_set_address_widths>:

void nrf24l01p_set_address_widths(widths bytes)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	71fb      	strb	r3, [r7, #7]
    write_register(NRF24L01P_REG_SETUP_AW, bytes - 2);
 8001a1e:	79fb      	ldrb	r3, [r7, #7]
 8001a20:	3b02      	subs	r3, #2
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	4619      	mov	r1, r3
 8001a26:	2003      	movs	r0, #3
 8001a28:	f7ff fe2e 	bl	8001688 <write_register>
}
 8001a2c:	bf00      	nop
 8001a2e:	3708      	adds	r7, #8
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}

08001a34 <nrf24l01p_auto_retransmit_count>:

void nrf24l01p_auto_retransmit_count(count cnt)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b084      	sub	sp, #16
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	71fb      	strb	r3, [r7, #7]
    uint8_t new_setup_retr = read_register(NRF24L01P_REG_SETUP_RETR);
 8001a3e:	2004      	movs	r0, #4
 8001a40:	f7ff fdfc 	bl	800163c <read_register>
 8001a44:	4603      	mov	r3, r0
 8001a46:	73fb      	strb	r3, [r7, #15]

    // Reset ARC register 0
    new_setup_retr |= 0xF0;
 8001a48:	7bfb      	ldrb	r3, [r7, #15]
 8001a4a:	f063 030f 	orn	r3, r3, #15
 8001a4e:	73fb      	strb	r3, [r7, #15]
    new_setup_retr |= cnt;
 8001a50:	7bfa      	ldrb	r2, [r7, #15]
 8001a52:	79fb      	ldrb	r3, [r7, #7]
 8001a54:	4313      	orrs	r3, r2
 8001a56:	73fb      	strb	r3, [r7, #15]
    write_register(NRF24L01P_REG_SETUP_RETR, new_setup_retr);
 8001a58:	7bfb      	ldrb	r3, [r7, #15]
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	2004      	movs	r0, #4
 8001a5e:	f7ff fe13 	bl	8001688 <write_register>
}
 8001a62:	bf00      	nop
 8001a64:	3710      	adds	r7, #16
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
	...

08001a6c <nrf24l01p_auto_retransmit_delay>:

void nrf24l01p_auto_retransmit_delay(delay us)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b084      	sub	sp, #16
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	4603      	mov	r3, r0
 8001a74:	80fb      	strh	r3, [r7, #6]
    uint8_t new_setup_retr = read_register(NRF24L01P_REG_SETUP_RETR);
 8001a76:	2004      	movs	r0, #4
 8001a78:	f7ff fde0 	bl	800163c <read_register>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	73fb      	strb	r3, [r7, #15]

    // Reset ARD register 0
    new_setup_retr |= 0x0F;
 8001a80:	7bfb      	ldrb	r3, [r7, #15]
 8001a82:	f043 030f 	orr.w	r3, r3, #15
 8001a86:	73fb      	strb	r3, [r7, #15]
    new_setup_retr |= ((us / 250) - 1) << 4;
 8001a88:	88fb      	ldrh	r3, [r7, #6]
 8001a8a:	4a0b      	ldr	r2, [pc, #44]	@ (8001ab8 <nrf24l01p_auto_retransmit_delay+0x4c>)
 8001a8c:	fba2 2303 	umull	r2, r3, r2, r3
 8001a90:	091b      	lsrs	r3, r3, #4
 8001a92:	b29b      	uxth	r3, r3
 8001a94:	3b01      	subs	r3, #1
 8001a96:	b25b      	sxtb	r3, r3
 8001a98:	011b      	lsls	r3, r3, #4
 8001a9a:	b25a      	sxtb	r2, r3
 8001a9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	b25b      	sxtb	r3, r3
 8001aa4:	73fb      	strb	r3, [r7, #15]
    write_register(NRF24L01P_REG_SETUP_RETR, new_setup_retr);
 8001aa6:	7bfb      	ldrb	r3, [r7, #15]
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	2004      	movs	r0, #4
 8001aac:	f7ff fdec 	bl	8001688 <write_register>
}
 8001ab0:	bf00      	nop
 8001ab2:	3710      	adds	r7, #16
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	10624dd3 	.word	0x10624dd3

08001abc <nrf24l01p_set_rf_channel>:

void nrf24l01p_set_rf_channel(channel MHz)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b084      	sub	sp, #16
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	80fb      	strh	r3, [r7, #6]
	uint16_t new_rf_ch = MHz - 2400;
 8001ac6:	88fb      	ldrh	r3, [r7, #6]
 8001ac8:	f5a3 6316 	sub.w	r3, r3, #2400	@ 0x960
 8001acc:	81fb      	strh	r3, [r7, #14]
    write_register(NRF24L01P_REG_RF_CH, new_rf_ch);
 8001ace:	89fb      	ldrh	r3, [r7, #14]
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	2005      	movs	r0, #5
 8001ad6:	f7ff fdd7 	bl	8001688 <write_register>
}
 8001ada:	bf00      	nop
 8001adc:	3710      	adds	r7, #16
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}

08001ae2 <nrf24l01p_set_rf_tx_output_power>:

void nrf24l01p_set_rf_tx_output_power(output_power dBm)
{
 8001ae2:	b580      	push	{r7, lr}
 8001ae4:	b084      	sub	sp, #16
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	4603      	mov	r3, r0
 8001aea:	71fb      	strb	r3, [r7, #7]
    uint8_t new_rf_setup = read_register(NRF24L01P_REG_RF_SETUP) & 0xF9;
 8001aec:	2006      	movs	r0, #6
 8001aee:	f7ff fda5 	bl	800163c <read_register>
 8001af2:	4603      	mov	r3, r0
 8001af4:	f023 0306 	bic.w	r3, r3, #6
 8001af8:	73fb      	strb	r3, [r7, #15]
    new_rf_setup |= (dBm << 1);
 8001afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001afe:	005b      	lsls	r3, r3, #1
 8001b00:	b25a      	sxtb	r2, r3
 8001b02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b06:	4313      	orrs	r3, r2
 8001b08:	b25b      	sxtb	r3, r3
 8001b0a:	73fb      	strb	r3, [r7, #15]

    write_register(NRF24L01P_REG_RF_SETUP, new_rf_setup);
 8001b0c:	7bfb      	ldrb	r3, [r7, #15]
 8001b0e:	4619      	mov	r1, r3
 8001b10:	2006      	movs	r0, #6
 8001b12:	f7ff fdb9 	bl	8001688 <write_register>
}
 8001b16:	bf00      	nop
 8001b18:	3710      	adds	r7, #16
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}

08001b1e <nrf24l01p_set_rf_air_data_rate>:

void nrf24l01p_set_rf_air_data_rate(air_data_rate bps)
{
 8001b1e:	b580      	push	{r7, lr}
 8001b20:	b084      	sub	sp, #16
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	4603      	mov	r3, r0
 8001b26:	71fb      	strb	r3, [r7, #7]
    // Set value to 0
    uint8_t new_rf_setup = read_register(NRF24L01P_REG_RF_SETUP) & 0xD7;
 8001b28:	2006      	movs	r0, #6
 8001b2a:	f7ff fd87 	bl	800163c <read_register>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	f023 0328 	bic.w	r3, r3, #40	@ 0x28
 8001b34:	73fb      	strb	r3, [r7, #15]

    switch(bps)
 8001b36:	79fb      	ldrb	r3, [r7, #7]
 8001b38:	2b02      	cmp	r3, #2
 8001b3a:	d00a      	beq.n	8001b52 <nrf24l01p_set_rf_air_data_rate+0x34>
 8001b3c:	2b02      	cmp	r3, #2
 8001b3e:	dc0e      	bgt.n	8001b5e <nrf24l01p_set_rf_air_data_rate+0x40>
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d00b      	beq.n	8001b5c <nrf24l01p_set_rf_air_data_rate+0x3e>
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	d10a      	bne.n	8001b5e <nrf24l01p_set_rf_air_data_rate+0x40>
    {
        case _1Mbps:
            break;
        case _2Mbps:
            new_rf_setup |= 1 << 3;
 8001b48:	7bfb      	ldrb	r3, [r7, #15]
 8001b4a:	f043 0308 	orr.w	r3, r3, #8
 8001b4e:	73fb      	strb	r3, [r7, #15]
            break;
 8001b50:	e005      	b.n	8001b5e <nrf24l01p_set_rf_air_data_rate+0x40>
        case _250kbps:
            new_rf_setup |= 1 << 5;
 8001b52:	7bfb      	ldrb	r3, [r7, #15]
 8001b54:	f043 0320 	orr.w	r3, r3, #32
 8001b58:	73fb      	strb	r3, [r7, #15]
            break;
 8001b5a:	e000      	b.n	8001b5e <nrf24l01p_set_rf_air_data_rate+0x40>
            break;
 8001b5c:	bf00      	nop
    }
    write_register(NRF24L01P_REG_RF_SETUP, new_rf_setup);
 8001b5e:	7bfb      	ldrb	r3, [r7, #15]
 8001b60:	4619      	mov	r1, r3
 8001b62:	2006      	movs	r0, #6
 8001b64:	f7ff fd90 	bl	8001688 <write_register>
}
 8001b68:	bf00      	nop
 8001b6a:	3710      	adds	r7, #16
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}

08001b70 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001b74:	4b17      	ldr	r3, [pc, #92]	@ (8001bd4 <MX_SPI1_Init+0x64>)
 8001b76:	4a18      	ldr	r2, [pc, #96]	@ (8001bd8 <MX_SPI1_Init+0x68>)
 8001b78:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001b7a:	4b16      	ldr	r3, [pc, #88]	@ (8001bd4 <MX_SPI1_Init+0x64>)
 8001b7c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001b80:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001b82:	4b14      	ldr	r3, [pc, #80]	@ (8001bd4 <MX_SPI1_Init+0x64>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b88:	4b12      	ldr	r3, [pc, #72]	@ (8001bd4 <MX_SPI1_Init+0x64>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b8e:	4b11      	ldr	r3, [pc, #68]	@ (8001bd4 <MX_SPI1_Init+0x64>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b94:	4b0f      	ldr	r3, [pc, #60]	@ (8001bd4 <MX_SPI1_Init+0x64>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001b9a:	4b0e      	ldr	r3, [pc, #56]	@ (8001bd4 <MX_SPI1_Init+0x64>)
 8001b9c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ba0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001ba2:	4b0c      	ldr	r3, [pc, #48]	@ (8001bd4 <MX_SPI1_Init+0x64>)
 8001ba4:	2210      	movs	r2, #16
 8001ba6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ba8:	4b0a      	ldr	r3, [pc, #40]	@ (8001bd4 <MX_SPI1_Init+0x64>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001bae:	4b09      	ldr	r3, [pc, #36]	@ (8001bd4 <MX_SPI1_Init+0x64>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001bb4:	4b07      	ldr	r3, [pc, #28]	@ (8001bd4 <MX_SPI1_Init+0x64>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001bba:	4b06      	ldr	r3, [pc, #24]	@ (8001bd4 <MX_SPI1_Init+0x64>)
 8001bbc:	220a      	movs	r2, #10
 8001bbe:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001bc0:	4804      	ldr	r0, [pc, #16]	@ (8001bd4 <MX_SPI1_Init+0x64>)
 8001bc2:	f003 fff1 	bl	8005ba8 <HAL_SPI_Init>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d001      	beq.n	8001bd0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001bcc:	f7ff fd00 	bl	80015d0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001bd0:	bf00      	nop
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	20000114 	.word	0x20000114
 8001bd8:	40013000 	.word	0x40013000

08001bdc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b088      	sub	sp, #32
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001be4:	f107 0310 	add.w	r3, r7, #16
 8001be8:	2200      	movs	r2, #0
 8001bea:	601a      	str	r2, [r3, #0]
 8001bec:	605a      	str	r2, [r3, #4]
 8001bee:	609a      	str	r2, [r3, #8]
 8001bf0:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a1f      	ldr	r2, [pc, #124]	@ (8001c74 <HAL_SPI_MspInit+0x98>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d137      	bne.n	8001c6c <HAL_SPI_MspInit+0x90>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001bfc:	4b1e      	ldr	r3, [pc, #120]	@ (8001c78 <HAL_SPI_MspInit+0x9c>)
 8001bfe:	699b      	ldr	r3, [r3, #24]
 8001c00:	4a1d      	ldr	r2, [pc, #116]	@ (8001c78 <HAL_SPI_MspInit+0x9c>)
 8001c02:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001c06:	6193      	str	r3, [r2, #24]
 8001c08:	4b1b      	ldr	r3, [pc, #108]	@ (8001c78 <HAL_SPI_MspInit+0x9c>)
 8001c0a:	699b      	ldr	r3, [r3, #24]
 8001c0c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c10:	60fb      	str	r3, [r7, #12]
 8001c12:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c14:	4b18      	ldr	r3, [pc, #96]	@ (8001c78 <HAL_SPI_MspInit+0x9c>)
 8001c16:	699b      	ldr	r3, [r3, #24]
 8001c18:	4a17      	ldr	r2, [pc, #92]	@ (8001c78 <HAL_SPI_MspInit+0x9c>)
 8001c1a:	f043 0304 	orr.w	r3, r3, #4
 8001c1e:	6193      	str	r3, [r2, #24]
 8001c20:	4b15      	ldr	r3, [pc, #84]	@ (8001c78 <HAL_SPI_MspInit+0x9c>)
 8001c22:	699b      	ldr	r3, [r3, #24]
 8001c24:	f003 0304 	and.w	r3, r3, #4
 8001c28:	60bb      	str	r3, [r7, #8]
 8001c2a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = RADIO_SCK_Pin|RADIO_MOSI_Pin;
 8001c2c:	23a0      	movs	r3, #160	@ 0xa0
 8001c2e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c30:	2302      	movs	r3, #2
 8001c32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c34:	2303      	movs	r3, #3
 8001c36:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c38:	f107 0310 	add.w	r3, r7, #16
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	480f      	ldr	r0, [pc, #60]	@ (8001c7c <HAL_SPI_MspInit+0xa0>)
 8001c40:	f000 fc4a 	bl	80024d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RADIO_MISO_Pin;
 8001c44:	2340      	movs	r3, #64	@ 0x40
 8001c46:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(RADIO_MISO_GPIO_Port, &GPIO_InitStruct);
 8001c50:	f107 0310 	add.w	r3, r7, #16
 8001c54:	4619      	mov	r1, r3
 8001c56:	4809      	ldr	r0, [pc, #36]	@ (8001c7c <HAL_SPI_MspInit+0xa0>)
 8001c58:	f000 fc3e 	bl	80024d8 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	2100      	movs	r1, #0
 8001c60:	2023      	movs	r0, #35	@ 0x23
 8001c62:	f000 fb42 	bl	80022ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001c66:	2023      	movs	r0, #35	@ 0x23
 8001c68:	f000 fb5b 	bl	8002322 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001c6c:	bf00      	nop
 8001c6e:	3720      	adds	r7, #32
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	40013000 	.word	0x40013000
 8001c78:	40021000 	.word	0x40021000
 8001c7c:	40010800 	.word	0x40010800

08001c80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b085      	sub	sp, #20
 8001c84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001c86:	4b15      	ldr	r3, [pc, #84]	@ (8001cdc <HAL_MspInit+0x5c>)
 8001c88:	699b      	ldr	r3, [r3, #24]
 8001c8a:	4a14      	ldr	r2, [pc, #80]	@ (8001cdc <HAL_MspInit+0x5c>)
 8001c8c:	f043 0301 	orr.w	r3, r3, #1
 8001c90:	6193      	str	r3, [r2, #24]
 8001c92:	4b12      	ldr	r3, [pc, #72]	@ (8001cdc <HAL_MspInit+0x5c>)
 8001c94:	699b      	ldr	r3, [r3, #24]
 8001c96:	f003 0301 	and.w	r3, r3, #1
 8001c9a:	60bb      	str	r3, [r7, #8]
 8001c9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c9e:	4b0f      	ldr	r3, [pc, #60]	@ (8001cdc <HAL_MspInit+0x5c>)
 8001ca0:	69db      	ldr	r3, [r3, #28]
 8001ca2:	4a0e      	ldr	r2, [pc, #56]	@ (8001cdc <HAL_MspInit+0x5c>)
 8001ca4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ca8:	61d3      	str	r3, [r2, #28]
 8001caa:	4b0c      	ldr	r3, [pc, #48]	@ (8001cdc <HAL_MspInit+0x5c>)
 8001cac:	69db      	ldr	r3, [r3, #28]
 8001cae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cb2:	607b      	str	r3, [r7, #4]
 8001cb4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001cb6:	4b0a      	ldr	r3, [pc, #40]	@ (8001ce0 <HAL_MspInit+0x60>)
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	60fb      	str	r3, [r7, #12]
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001cc2:	60fb      	str	r3, [r7, #12]
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001cca:	60fb      	str	r3, [r7, #12]
 8001ccc:	4a04      	ldr	r2, [pc, #16]	@ (8001ce0 <HAL_MspInit+0x60>)
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cd2:	bf00      	nop
 8001cd4:	3714      	adds	r7, #20
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bc80      	pop	{r7}
 8001cda:	4770      	bx	lr
 8001cdc:	40021000 	.word	0x40021000
 8001ce0:	40010000 	.word	0x40010000

08001ce4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ce8:	bf00      	nop
 8001cea:	e7fd      	b.n	8001ce8 <NMI_Handler+0x4>

08001cec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cf0:	bf00      	nop
 8001cf2:	e7fd      	b.n	8001cf0 <HardFault_Handler+0x4>

08001cf4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cf8:	bf00      	nop
 8001cfa:	e7fd      	b.n	8001cf8 <MemManage_Handler+0x4>

08001cfc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d00:	bf00      	nop
 8001d02:	e7fd      	b.n	8001d00 <BusFault_Handler+0x4>

08001d04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d08:	bf00      	nop
 8001d0a:	e7fd      	b.n	8001d08 <UsageFault_Handler+0x4>

08001d0c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d10:	bf00      	nop
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bc80      	pop	{r7}
 8001d16:	4770      	bx	lr

08001d18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d1c:	bf00      	nop
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bc80      	pop	{r7}
 8001d22:	4770      	bx	lr

08001d24 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d28:	bf00      	nop
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bc80      	pop	{r7}
 8001d2e:	4770      	bx	lr

08001d30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d34:	f000 f9c2 	bl	80020bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d38:	bf00      	nop
 8001d3a:	bd80      	pop	{r7, pc}

08001d3c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RADIO_IRQ_Pin);
 8001d40:	2002      	movs	r0, #2
 8001d42:	f000 fd95 	bl	8002870 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001d46:	bf00      	nop
 8001d48:	bd80      	pop	{r7, pc}
	...

08001d4c <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8001d50:	4802      	ldr	r0, [pc, #8]	@ (8001d5c <I2C2_EV_IRQHandler+0x10>)
 8001d52:	f001 fa6b 	bl	800322c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8001d56:	bf00      	nop
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	200000b8 	.word	0x200000b8

08001d60 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8001d64:	4802      	ldr	r0, [pc, #8]	@ (8001d70 <I2C2_ER_IRQHandler+0x10>)
 8001d66:	f001 fbd2 	bl	800350e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8001d6a:	bf00      	nop
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	200000b8 	.word	0x200000b8

08001d74 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001d78:	4802      	ldr	r0, [pc, #8]	@ (8001d84 <SPI1_IRQHandler+0x10>)
 8001d7a:	f004 fb9f 	bl	80064bc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001d7e:	bf00      	nop
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	20000114 	.word	0x20000114

08001d88 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001d8c:	4802      	ldr	r0, [pc, #8]	@ (8001d98 <USART1_IRQHandler+0x10>)
 8001d8e:	f004 fe7f 	bl	8006a90 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001d92:	bf00      	nop
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	20000170 	.word	0x20000170

08001d9c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b086      	sub	sp, #24
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	60f8      	str	r0, [r7, #12]
 8001da4:	60b9      	str	r1, [r7, #8]
 8001da6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001da8:	2300      	movs	r3, #0
 8001daa:	617b      	str	r3, [r7, #20]
 8001dac:	e00a      	b.n	8001dc4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001dae:	f3af 8000 	nop.w
 8001db2:	4601      	mov	r1, r0
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	1c5a      	adds	r2, r3, #1
 8001db8:	60ba      	str	r2, [r7, #8]
 8001dba:	b2ca      	uxtb	r2, r1
 8001dbc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	3301      	adds	r3, #1
 8001dc2:	617b      	str	r3, [r7, #20]
 8001dc4:	697a      	ldr	r2, [r7, #20]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	dbf0      	blt.n	8001dae <_read+0x12>
  }

  return len;
 8001dcc:	687b      	ldr	r3, [r7, #4]
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3718      	adds	r7, #24
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}

08001dd6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001dd6:	b580      	push	{r7, lr}
 8001dd8:	b086      	sub	sp, #24
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	60f8      	str	r0, [r7, #12]
 8001dde:	60b9      	str	r1, [r7, #8]
 8001de0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001de2:	2300      	movs	r3, #0
 8001de4:	617b      	str	r3, [r7, #20]
 8001de6:	e009      	b.n	8001dfc <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	1c5a      	adds	r2, r3, #1
 8001dec:	60ba      	str	r2, [r7, #8]
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	4618      	mov	r0, r3
 8001df2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	3301      	adds	r3, #1
 8001dfa:	617b      	str	r3, [r7, #20]
 8001dfc:	697a      	ldr	r2, [r7, #20]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	429a      	cmp	r2, r3
 8001e02:	dbf1      	blt.n	8001de8 <_write+0x12>
  }
  return len;
 8001e04:	687b      	ldr	r3, [r7, #4]
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3718      	adds	r7, #24
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}

08001e0e <_close>:

int _close(int file)
{
 8001e0e:	b480      	push	{r7}
 8001e10:	b083      	sub	sp, #12
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e16:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	370c      	adds	r7, #12
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bc80      	pop	{r7}
 8001e22:	4770      	bx	lr

08001e24 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
 8001e2c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e34:	605a      	str	r2, [r3, #4]
  return 0;
 8001e36:	2300      	movs	r3, #0
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	370c      	adds	r7, #12
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bc80      	pop	{r7}
 8001e40:	4770      	bx	lr

08001e42 <_isatty>:

int _isatty(int file)
{
 8001e42:	b480      	push	{r7}
 8001e44:	b083      	sub	sp, #12
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e4a:	2301      	movs	r3, #1
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	370c      	adds	r7, #12
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bc80      	pop	{r7}
 8001e54:	4770      	bx	lr

08001e56 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e56:	b480      	push	{r7}
 8001e58:	b085      	sub	sp, #20
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	60f8      	str	r0, [r7, #12]
 8001e5e:	60b9      	str	r1, [r7, #8]
 8001e60:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e62:	2300      	movs	r3, #0
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	3714      	adds	r7, #20
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bc80      	pop	{r7}
 8001e6c:	4770      	bx	lr
	...

08001e70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b086      	sub	sp, #24
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e78:	4a14      	ldr	r2, [pc, #80]	@ (8001ecc <_sbrk+0x5c>)
 8001e7a:	4b15      	ldr	r3, [pc, #84]	@ (8001ed0 <_sbrk+0x60>)
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e84:	4b13      	ldr	r3, [pc, #76]	@ (8001ed4 <_sbrk+0x64>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d102      	bne.n	8001e92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e8c:	4b11      	ldr	r3, [pc, #68]	@ (8001ed4 <_sbrk+0x64>)
 8001e8e:	4a12      	ldr	r2, [pc, #72]	@ (8001ed8 <_sbrk+0x68>)
 8001e90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e92:	4b10      	ldr	r3, [pc, #64]	@ (8001ed4 <_sbrk+0x64>)
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	4413      	add	r3, r2
 8001e9a:	693a      	ldr	r2, [r7, #16]
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d207      	bcs.n	8001eb0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ea0:	f005 fdbe 	bl	8007a20 <__errno>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	220c      	movs	r2, #12
 8001ea8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001eaa:	f04f 33ff 	mov.w	r3, #4294967295
 8001eae:	e009      	b.n	8001ec4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001eb0:	4b08      	ldr	r3, [pc, #32]	@ (8001ed4 <_sbrk+0x64>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001eb6:	4b07      	ldr	r3, [pc, #28]	@ (8001ed4 <_sbrk+0x64>)
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4413      	add	r3, r2
 8001ebe:	4a05      	ldr	r2, [pc, #20]	@ (8001ed4 <_sbrk+0x64>)
 8001ec0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3718      	adds	r7, #24
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	20005000 	.word	0x20005000
 8001ed0:	00000400 	.word	0x00000400
 8001ed4:	2000016c 	.word	0x2000016c
 8001ed8:	20000308 	.word	0x20000308

08001edc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ee0:	bf00      	nop
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bc80      	pop	{r7}
 8001ee6:	4770      	bx	lr

08001ee8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001eec:	4b11      	ldr	r3, [pc, #68]	@ (8001f34 <MX_USART1_UART_Init+0x4c>)
 8001eee:	4a12      	ldr	r2, [pc, #72]	@ (8001f38 <MX_USART1_UART_Init+0x50>)
 8001ef0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001ef2:	4b10      	ldr	r3, [pc, #64]	@ (8001f34 <MX_USART1_UART_Init+0x4c>)
 8001ef4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ef8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001efa:	4b0e      	ldr	r3, [pc, #56]	@ (8001f34 <MX_USART1_UART_Init+0x4c>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001f00:	4b0c      	ldr	r3, [pc, #48]	@ (8001f34 <MX_USART1_UART_Init+0x4c>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001f06:	4b0b      	ldr	r3, [pc, #44]	@ (8001f34 <MX_USART1_UART_Init+0x4c>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001f0c:	4b09      	ldr	r3, [pc, #36]	@ (8001f34 <MX_USART1_UART_Init+0x4c>)
 8001f0e:	220c      	movs	r2, #12
 8001f10:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f12:	4b08      	ldr	r3, [pc, #32]	@ (8001f34 <MX_USART1_UART_Init+0x4c>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f18:	4b06      	ldr	r3, [pc, #24]	@ (8001f34 <MX_USART1_UART_Init+0x4c>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001f1e:	4805      	ldr	r0, [pc, #20]	@ (8001f34 <MX_USART1_UART_Init+0x4c>)
 8001f20:	f004 fcdb 	bl	80068da <HAL_UART_Init>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d001      	beq.n	8001f2e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001f2a:	f7ff fb51 	bl	80015d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001f2e:	bf00      	nop
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	20000170 	.word	0x20000170
 8001f38:	40013800 	.word	0x40013800

08001f3c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b088      	sub	sp, #32
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f44:	f107 0310 	add.w	r3, r7, #16
 8001f48:	2200      	movs	r2, #0
 8001f4a:	601a      	str	r2, [r3, #0]
 8001f4c:	605a      	str	r2, [r3, #4]
 8001f4e:	609a      	str	r2, [r3, #8]
 8001f50:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a20      	ldr	r2, [pc, #128]	@ (8001fd8 <HAL_UART_MspInit+0x9c>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d139      	bne.n	8001fd0 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f5c:	4b1f      	ldr	r3, [pc, #124]	@ (8001fdc <HAL_UART_MspInit+0xa0>)
 8001f5e:	699b      	ldr	r3, [r3, #24]
 8001f60:	4a1e      	ldr	r2, [pc, #120]	@ (8001fdc <HAL_UART_MspInit+0xa0>)
 8001f62:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f66:	6193      	str	r3, [r2, #24]
 8001f68:	4b1c      	ldr	r3, [pc, #112]	@ (8001fdc <HAL_UART_MspInit+0xa0>)
 8001f6a:	699b      	ldr	r3, [r3, #24]
 8001f6c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f70:	60fb      	str	r3, [r7, #12]
 8001f72:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f74:	4b19      	ldr	r3, [pc, #100]	@ (8001fdc <HAL_UART_MspInit+0xa0>)
 8001f76:	699b      	ldr	r3, [r3, #24]
 8001f78:	4a18      	ldr	r2, [pc, #96]	@ (8001fdc <HAL_UART_MspInit+0xa0>)
 8001f7a:	f043 0304 	orr.w	r3, r3, #4
 8001f7e:	6193      	str	r3, [r2, #24]
 8001f80:	4b16      	ldr	r3, [pc, #88]	@ (8001fdc <HAL_UART_MspInit+0xa0>)
 8001f82:	699b      	ldr	r3, [r3, #24]
 8001f84:	f003 0304 	and.w	r3, r3, #4
 8001f88:	60bb      	str	r3, [r7, #8]
 8001f8a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001f8c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001f90:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f92:	2302      	movs	r3, #2
 8001f94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f96:	2303      	movs	r3, #3
 8001f98:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f9a:	f107 0310 	add.w	r3, r7, #16
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	480f      	ldr	r0, [pc, #60]	@ (8001fe0 <HAL_UART_MspInit+0xa4>)
 8001fa2:	f000 fa99 	bl	80024d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001fa6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001faa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fac:	2300      	movs	r3, #0
 8001fae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fb4:	f107 0310 	add.w	r3, r7, #16
 8001fb8:	4619      	mov	r1, r3
 8001fba:	4809      	ldr	r0, [pc, #36]	@ (8001fe0 <HAL_UART_MspInit+0xa4>)
 8001fbc:	f000 fa8c 	bl	80024d8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	2100      	movs	r1, #0
 8001fc4:	2025      	movs	r0, #37	@ 0x25
 8001fc6:	f000 f990 	bl	80022ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001fca:	2025      	movs	r0, #37	@ 0x25
 8001fcc:	f000 f9a9 	bl	8002322 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001fd0:	bf00      	nop
 8001fd2:	3720      	adds	r7, #32
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	40013800 	.word	0x40013800
 8001fdc:	40021000 	.word	0x40021000
 8001fe0:	40010800 	.word	0x40010800

08001fe4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001fe4:	f7ff ff7a 	bl	8001edc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001fe8:	480b      	ldr	r0, [pc, #44]	@ (8002018 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001fea:	490c      	ldr	r1, [pc, #48]	@ (800201c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001fec:	4a0c      	ldr	r2, [pc, #48]	@ (8002020 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001fee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ff0:	e002      	b.n	8001ff8 <LoopCopyDataInit>

08001ff2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ff2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ff4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ff6:	3304      	adds	r3, #4

08001ff8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ff8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ffa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ffc:	d3f9      	bcc.n	8001ff2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ffe:	4a09      	ldr	r2, [pc, #36]	@ (8002024 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002000:	4c09      	ldr	r4, [pc, #36]	@ (8002028 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002002:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002004:	e001      	b.n	800200a <LoopFillZerobss>

08002006 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002006:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002008:	3204      	adds	r2, #4

0800200a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800200a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800200c:	d3fb      	bcc.n	8002006 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800200e:	f005 fd0d 	bl	8007a2c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002012:	f7ff f89f 	bl	8001154 <main>
  bx lr
 8002016:	4770      	bx	lr
  ldr r0, =_sdata
 8002018:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800201c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8002020:	08008a08 	.word	0x08008a08
  ldr r2, =_sbss
 8002024:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8002028:	20000308 	.word	0x20000308

0800202c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800202c:	e7fe      	b.n	800202c <ADC1_2_IRQHandler>
	...

08002030 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002034:	4b08      	ldr	r3, [pc, #32]	@ (8002058 <HAL_Init+0x28>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a07      	ldr	r2, [pc, #28]	@ (8002058 <HAL_Init+0x28>)
 800203a:	f043 0310 	orr.w	r3, r3, #16
 800203e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002040:	2003      	movs	r0, #3
 8002042:	f000 f947 	bl	80022d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002046:	200f      	movs	r0, #15
 8002048:	f000 f808 	bl	800205c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800204c:	f7ff fe18 	bl	8001c80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002050:	2300      	movs	r3, #0
}
 8002052:	4618      	mov	r0, r3
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	40022000 	.word	0x40022000

0800205c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002064:	4b12      	ldr	r3, [pc, #72]	@ (80020b0 <HAL_InitTick+0x54>)
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	4b12      	ldr	r3, [pc, #72]	@ (80020b4 <HAL_InitTick+0x58>)
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	4619      	mov	r1, r3
 800206e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002072:	fbb3 f3f1 	udiv	r3, r3, r1
 8002076:	fbb2 f3f3 	udiv	r3, r2, r3
 800207a:	4618      	mov	r0, r3
 800207c:	f000 f95f 	bl	800233e <HAL_SYSTICK_Config>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d001      	beq.n	800208a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e00e      	b.n	80020a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2b0f      	cmp	r3, #15
 800208e:	d80a      	bhi.n	80020a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002090:	2200      	movs	r2, #0
 8002092:	6879      	ldr	r1, [r7, #4]
 8002094:	f04f 30ff 	mov.w	r0, #4294967295
 8002098:	f000 f927 	bl	80022ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800209c:	4a06      	ldr	r2, [pc, #24]	@ (80020b8 <HAL_InitTick+0x5c>)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020a2:	2300      	movs	r3, #0
 80020a4:	e000      	b.n	80020a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3708      	adds	r7, #8
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	20000000 	.word	0x20000000
 80020b4:	20000008 	.word	0x20000008
 80020b8:	20000004 	.word	0x20000004

080020bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020bc:	b480      	push	{r7}
 80020be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020c0:	4b05      	ldr	r3, [pc, #20]	@ (80020d8 <HAL_IncTick+0x1c>)
 80020c2:	781b      	ldrb	r3, [r3, #0]
 80020c4:	461a      	mov	r2, r3
 80020c6:	4b05      	ldr	r3, [pc, #20]	@ (80020dc <HAL_IncTick+0x20>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4413      	add	r3, r2
 80020cc:	4a03      	ldr	r2, [pc, #12]	@ (80020dc <HAL_IncTick+0x20>)
 80020ce:	6013      	str	r3, [r2, #0]
}
 80020d0:	bf00      	nop
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bc80      	pop	{r7}
 80020d6:	4770      	bx	lr
 80020d8:	20000008 	.word	0x20000008
 80020dc:	200001b8 	.word	0x200001b8

080020e0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020e0:	b480      	push	{r7}
 80020e2:	af00      	add	r7, sp, #0
  return uwTick;
 80020e4:	4b02      	ldr	r3, [pc, #8]	@ (80020f0 <HAL_GetTick+0x10>)
 80020e6:	681b      	ldr	r3, [r3, #0]
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bc80      	pop	{r7}
 80020ee:	4770      	bx	lr
 80020f0:	200001b8 	.word	0x200001b8

080020f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b084      	sub	sp, #16
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020fc:	f7ff fff0 	bl	80020e0 <HAL_GetTick>
 8002100:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	f1b3 3fff 	cmp.w	r3, #4294967295
 800210c:	d005      	beq.n	800211a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800210e:	4b0a      	ldr	r3, [pc, #40]	@ (8002138 <HAL_Delay+0x44>)
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	461a      	mov	r2, r3
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	4413      	add	r3, r2
 8002118:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800211a:	bf00      	nop
 800211c:	f7ff ffe0 	bl	80020e0 <HAL_GetTick>
 8002120:	4602      	mov	r2, r0
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	68fa      	ldr	r2, [r7, #12]
 8002128:	429a      	cmp	r2, r3
 800212a:	d8f7      	bhi.n	800211c <HAL_Delay+0x28>
  {
  }
}
 800212c:	bf00      	nop
 800212e:	bf00      	nop
 8002130:	3710      	adds	r7, #16
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	20000008 	.word	0x20000008

0800213c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800213c:	b480      	push	{r7}
 800213e:	b085      	sub	sp, #20
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	f003 0307 	and.w	r3, r3, #7
 800214a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800214c:	4b0c      	ldr	r3, [pc, #48]	@ (8002180 <__NVIC_SetPriorityGrouping+0x44>)
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002152:	68ba      	ldr	r2, [r7, #8]
 8002154:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002158:	4013      	ands	r3, r2
 800215a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002164:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002168:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800216c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800216e:	4a04      	ldr	r2, [pc, #16]	@ (8002180 <__NVIC_SetPriorityGrouping+0x44>)
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	60d3      	str	r3, [r2, #12]
}
 8002174:	bf00      	nop
 8002176:	3714      	adds	r7, #20
 8002178:	46bd      	mov	sp, r7
 800217a:	bc80      	pop	{r7}
 800217c:	4770      	bx	lr
 800217e:	bf00      	nop
 8002180:	e000ed00 	.word	0xe000ed00

08002184 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002184:	b480      	push	{r7}
 8002186:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002188:	4b04      	ldr	r3, [pc, #16]	@ (800219c <__NVIC_GetPriorityGrouping+0x18>)
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	0a1b      	lsrs	r3, r3, #8
 800218e:	f003 0307 	and.w	r3, r3, #7
}
 8002192:	4618      	mov	r0, r3
 8002194:	46bd      	mov	sp, r7
 8002196:	bc80      	pop	{r7}
 8002198:	4770      	bx	lr
 800219a:	bf00      	nop
 800219c:	e000ed00 	.word	0xe000ed00

080021a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	4603      	mov	r3, r0
 80021a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	db0b      	blt.n	80021ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021b2:	79fb      	ldrb	r3, [r7, #7]
 80021b4:	f003 021f 	and.w	r2, r3, #31
 80021b8:	4906      	ldr	r1, [pc, #24]	@ (80021d4 <__NVIC_EnableIRQ+0x34>)
 80021ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021be:	095b      	lsrs	r3, r3, #5
 80021c0:	2001      	movs	r0, #1
 80021c2:	fa00 f202 	lsl.w	r2, r0, r2
 80021c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80021ca:	bf00      	nop
 80021cc:	370c      	adds	r7, #12
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bc80      	pop	{r7}
 80021d2:	4770      	bx	lr
 80021d4:	e000e100 	.word	0xe000e100

080021d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021d8:	b480      	push	{r7}
 80021da:	b083      	sub	sp, #12
 80021dc:	af00      	add	r7, sp, #0
 80021de:	4603      	mov	r3, r0
 80021e0:	6039      	str	r1, [r7, #0]
 80021e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	db0a      	blt.n	8002202 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	b2da      	uxtb	r2, r3
 80021f0:	490c      	ldr	r1, [pc, #48]	@ (8002224 <__NVIC_SetPriority+0x4c>)
 80021f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021f6:	0112      	lsls	r2, r2, #4
 80021f8:	b2d2      	uxtb	r2, r2
 80021fa:	440b      	add	r3, r1
 80021fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002200:	e00a      	b.n	8002218 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	b2da      	uxtb	r2, r3
 8002206:	4908      	ldr	r1, [pc, #32]	@ (8002228 <__NVIC_SetPriority+0x50>)
 8002208:	79fb      	ldrb	r3, [r7, #7]
 800220a:	f003 030f 	and.w	r3, r3, #15
 800220e:	3b04      	subs	r3, #4
 8002210:	0112      	lsls	r2, r2, #4
 8002212:	b2d2      	uxtb	r2, r2
 8002214:	440b      	add	r3, r1
 8002216:	761a      	strb	r2, [r3, #24]
}
 8002218:	bf00      	nop
 800221a:	370c      	adds	r7, #12
 800221c:	46bd      	mov	sp, r7
 800221e:	bc80      	pop	{r7}
 8002220:	4770      	bx	lr
 8002222:	bf00      	nop
 8002224:	e000e100 	.word	0xe000e100
 8002228:	e000ed00 	.word	0xe000ed00

0800222c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800222c:	b480      	push	{r7}
 800222e:	b089      	sub	sp, #36	@ 0x24
 8002230:	af00      	add	r7, sp, #0
 8002232:	60f8      	str	r0, [r7, #12]
 8002234:	60b9      	str	r1, [r7, #8]
 8002236:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	f003 0307 	and.w	r3, r3, #7
 800223e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002240:	69fb      	ldr	r3, [r7, #28]
 8002242:	f1c3 0307 	rsb	r3, r3, #7
 8002246:	2b04      	cmp	r3, #4
 8002248:	bf28      	it	cs
 800224a:	2304      	movcs	r3, #4
 800224c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	3304      	adds	r3, #4
 8002252:	2b06      	cmp	r3, #6
 8002254:	d902      	bls.n	800225c <NVIC_EncodePriority+0x30>
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	3b03      	subs	r3, #3
 800225a:	e000      	b.n	800225e <NVIC_EncodePriority+0x32>
 800225c:	2300      	movs	r3, #0
 800225e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002260:	f04f 32ff 	mov.w	r2, #4294967295
 8002264:	69bb      	ldr	r3, [r7, #24]
 8002266:	fa02 f303 	lsl.w	r3, r2, r3
 800226a:	43da      	mvns	r2, r3
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	401a      	ands	r2, r3
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002274:	f04f 31ff 	mov.w	r1, #4294967295
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	fa01 f303 	lsl.w	r3, r1, r3
 800227e:	43d9      	mvns	r1, r3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002284:	4313      	orrs	r3, r2
         );
}
 8002286:	4618      	mov	r0, r3
 8002288:	3724      	adds	r7, #36	@ 0x24
 800228a:	46bd      	mov	sp, r7
 800228c:	bc80      	pop	{r7}
 800228e:	4770      	bx	lr

08002290 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b082      	sub	sp, #8
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	3b01      	subs	r3, #1
 800229c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80022a0:	d301      	bcc.n	80022a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022a2:	2301      	movs	r3, #1
 80022a4:	e00f      	b.n	80022c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022a6:	4a0a      	ldr	r2, [pc, #40]	@ (80022d0 <SysTick_Config+0x40>)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	3b01      	subs	r3, #1
 80022ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022ae:	210f      	movs	r1, #15
 80022b0:	f04f 30ff 	mov.w	r0, #4294967295
 80022b4:	f7ff ff90 	bl	80021d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022b8:	4b05      	ldr	r3, [pc, #20]	@ (80022d0 <SysTick_Config+0x40>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022be:	4b04      	ldr	r3, [pc, #16]	@ (80022d0 <SysTick_Config+0x40>)
 80022c0:	2207      	movs	r2, #7
 80022c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022c4:	2300      	movs	r3, #0
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3708      	adds	r7, #8
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	e000e010 	.word	0xe000e010

080022d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b082      	sub	sp, #8
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022dc:	6878      	ldr	r0, [r7, #4]
 80022de:	f7ff ff2d 	bl	800213c <__NVIC_SetPriorityGrouping>
}
 80022e2:	bf00      	nop
 80022e4:	3708      	adds	r7, #8
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}

080022ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022ea:	b580      	push	{r7, lr}
 80022ec:	b086      	sub	sp, #24
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	4603      	mov	r3, r0
 80022f2:	60b9      	str	r1, [r7, #8]
 80022f4:	607a      	str	r2, [r7, #4]
 80022f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022f8:	2300      	movs	r3, #0
 80022fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022fc:	f7ff ff42 	bl	8002184 <__NVIC_GetPriorityGrouping>
 8002300:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002302:	687a      	ldr	r2, [r7, #4]
 8002304:	68b9      	ldr	r1, [r7, #8]
 8002306:	6978      	ldr	r0, [r7, #20]
 8002308:	f7ff ff90 	bl	800222c <NVIC_EncodePriority>
 800230c:	4602      	mov	r2, r0
 800230e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002312:	4611      	mov	r1, r2
 8002314:	4618      	mov	r0, r3
 8002316:	f7ff ff5f 	bl	80021d8 <__NVIC_SetPriority>
}
 800231a:	bf00      	nop
 800231c:	3718      	adds	r7, #24
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}

08002322 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002322:	b580      	push	{r7, lr}
 8002324:	b082      	sub	sp, #8
 8002326:	af00      	add	r7, sp, #0
 8002328:	4603      	mov	r3, r0
 800232a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800232c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002330:	4618      	mov	r0, r3
 8002332:	f7ff ff35 	bl	80021a0 <__NVIC_EnableIRQ>
}
 8002336:	bf00      	nop
 8002338:	3708      	adds	r7, #8
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}

0800233e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800233e:	b580      	push	{r7, lr}
 8002340:	b082      	sub	sp, #8
 8002342:	af00      	add	r7, sp, #0
 8002344:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f7ff ffa2 	bl	8002290 <SysTick_Config>
 800234c:	4603      	mov	r3, r0
}
 800234e:	4618      	mov	r0, r3
 8002350:	3708      	adds	r7, #8
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}

08002356 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002356:	b480      	push	{r7}
 8002358:	b085      	sub	sp, #20
 800235a:	af00      	add	r7, sp, #0
 800235c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800235e:	2300      	movs	r3, #0
 8002360:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002368:	b2db      	uxtb	r3, r3
 800236a:	2b02      	cmp	r3, #2
 800236c:	d008      	beq.n	8002380 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2204      	movs	r2, #4
 8002372:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2200      	movs	r2, #0
 8002378:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	e020      	b.n	80023c2 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f022 020e 	bic.w	r2, r2, #14
 800238e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f022 0201 	bic.w	r2, r2, #1
 800239e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023a8:	2101      	movs	r1, #1
 80023aa:	fa01 f202 	lsl.w	r2, r1, r2
 80023ae:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2201      	movs	r2, #1
 80023b4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2200      	movs	r2, #0
 80023bc:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80023c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3714      	adds	r7, #20
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bc80      	pop	{r7}
 80023ca:	4770      	bx	lr

080023cc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b084      	sub	sp, #16
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023d4:	2300      	movs	r3, #0
 80023d6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80023de:	b2db      	uxtb	r3, r3
 80023e0:	2b02      	cmp	r3, #2
 80023e2:	d005      	beq.n	80023f0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2204      	movs	r2, #4
 80023e8:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	73fb      	strb	r3, [r7, #15]
 80023ee:	e051      	b.n	8002494 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f022 020e 	bic.w	r2, r2, #14
 80023fe:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f022 0201 	bic.w	r2, r2, #1
 800240e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a22      	ldr	r2, [pc, #136]	@ (80024a0 <HAL_DMA_Abort_IT+0xd4>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d029      	beq.n	800246e <HAL_DMA_Abort_IT+0xa2>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a21      	ldr	r2, [pc, #132]	@ (80024a4 <HAL_DMA_Abort_IT+0xd8>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d022      	beq.n	800246a <HAL_DMA_Abort_IT+0x9e>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a1f      	ldr	r2, [pc, #124]	@ (80024a8 <HAL_DMA_Abort_IT+0xdc>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d01a      	beq.n	8002464 <HAL_DMA_Abort_IT+0x98>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a1e      	ldr	r2, [pc, #120]	@ (80024ac <HAL_DMA_Abort_IT+0xe0>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d012      	beq.n	800245e <HAL_DMA_Abort_IT+0x92>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a1c      	ldr	r2, [pc, #112]	@ (80024b0 <HAL_DMA_Abort_IT+0xe4>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d00a      	beq.n	8002458 <HAL_DMA_Abort_IT+0x8c>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a1b      	ldr	r2, [pc, #108]	@ (80024b4 <HAL_DMA_Abort_IT+0xe8>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d102      	bne.n	8002452 <HAL_DMA_Abort_IT+0x86>
 800244c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002450:	e00e      	b.n	8002470 <HAL_DMA_Abort_IT+0xa4>
 8002452:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002456:	e00b      	b.n	8002470 <HAL_DMA_Abort_IT+0xa4>
 8002458:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800245c:	e008      	b.n	8002470 <HAL_DMA_Abort_IT+0xa4>
 800245e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002462:	e005      	b.n	8002470 <HAL_DMA_Abort_IT+0xa4>
 8002464:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002468:	e002      	b.n	8002470 <HAL_DMA_Abort_IT+0xa4>
 800246a:	2310      	movs	r3, #16
 800246c:	e000      	b.n	8002470 <HAL_DMA_Abort_IT+0xa4>
 800246e:	2301      	movs	r3, #1
 8002470:	4a11      	ldr	r2, [pc, #68]	@ (80024b8 <HAL_DMA_Abort_IT+0xec>)
 8002472:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2201      	movs	r2, #1
 8002478:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2200      	movs	r2, #0
 8002480:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002488:	2b00      	cmp	r3, #0
 800248a:	d003      	beq.n	8002494 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002490:	6878      	ldr	r0, [r7, #4]
 8002492:	4798      	blx	r3
    } 
  }
  return status;
 8002494:	7bfb      	ldrb	r3, [r7, #15]
}
 8002496:	4618      	mov	r0, r3
 8002498:	3710      	adds	r7, #16
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	40020008 	.word	0x40020008
 80024a4:	4002001c 	.word	0x4002001c
 80024a8:	40020030 	.word	0x40020030
 80024ac:	40020044 	.word	0x40020044
 80024b0:	40020058 	.word	0x40020058
 80024b4:	4002006c 	.word	0x4002006c
 80024b8:	40020000 	.word	0x40020000

080024bc <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80024bc:	b480      	push	{r7}
 80024be:	b083      	sub	sp, #12
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80024ca:	b2db      	uxtb	r3, r3
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	370c      	adds	r7, #12
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bc80      	pop	{r7}
 80024d4:	4770      	bx	lr
	...

080024d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024d8:	b480      	push	{r7}
 80024da:	b08b      	sub	sp, #44	@ 0x2c
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80024e2:	2300      	movs	r3, #0
 80024e4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80024e6:	2300      	movs	r3, #0
 80024e8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024ea:	e169      	b.n	80027c0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80024ec:	2201      	movs	r2, #1
 80024ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024f0:	fa02 f303 	lsl.w	r3, r2, r3
 80024f4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	69fa      	ldr	r2, [r7, #28]
 80024fc:	4013      	ands	r3, r2
 80024fe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002500:	69ba      	ldr	r2, [r7, #24]
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	429a      	cmp	r2, r3
 8002506:	f040 8158 	bne.w	80027ba <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	4a9a      	ldr	r2, [pc, #616]	@ (8002778 <HAL_GPIO_Init+0x2a0>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d05e      	beq.n	80025d2 <HAL_GPIO_Init+0xfa>
 8002514:	4a98      	ldr	r2, [pc, #608]	@ (8002778 <HAL_GPIO_Init+0x2a0>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d875      	bhi.n	8002606 <HAL_GPIO_Init+0x12e>
 800251a:	4a98      	ldr	r2, [pc, #608]	@ (800277c <HAL_GPIO_Init+0x2a4>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d058      	beq.n	80025d2 <HAL_GPIO_Init+0xfa>
 8002520:	4a96      	ldr	r2, [pc, #600]	@ (800277c <HAL_GPIO_Init+0x2a4>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d86f      	bhi.n	8002606 <HAL_GPIO_Init+0x12e>
 8002526:	4a96      	ldr	r2, [pc, #600]	@ (8002780 <HAL_GPIO_Init+0x2a8>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d052      	beq.n	80025d2 <HAL_GPIO_Init+0xfa>
 800252c:	4a94      	ldr	r2, [pc, #592]	@ (8002780 <HAL_GPIO_Init+0x2a8>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d869      	bhi.n	8002606 <HAL_GPIO_Init+0x12e>
 8002532:	4a94      	ldr	r2, [pc, #592]	@ (8002784 <HAL_GPIO_Init+0x2ac>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d04c      	beq.n	80025d2 <HAL_GPIO_Init+0xfa>
 8002538:	4a92      	ldr	r2, [pc, #584]	@ (8002784 <HAL_GPIO_Init+0x2ac>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d863      	bhi.n	8002606 <HAL_GPIO_Init+0x12e>
 800253e:	4a92      	ldr	r2, [pc, #584]	@ (8002788 <HAL_GPIO_Init+0x2b0>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d046      	beq.n	80025d2 <HAL_GPIO_Init+0xfa>
 8002544:	4a90      	ldr	r2, [pc, #576]	@ (8002788 <HAL_GPIO_Init+0x2b0>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d85d      	bhi.n	8002606 <HAL_GPIO_Init+0x12e>
 800254a:	2b12      	cmp	r3, #18
 800254c:	d82a      	bhi.n	80025a4 <HAL_GPIO_Init+0xcc>
 800254e:	2b12      	cmp	r3, #18
 8002550:	d859      	bhi.n	8002606 <HAL_GPIO_Init+0x12e>
 8002552:	a201      	add	r2, pc, #4	@ (adr r2, 8002558 <HAL_GPIO_Init+0x80>)
 8002554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002558:	080025d3 	.word	0x080025d3
 800255c:	080025ad 	.word	0x080025ad
 8002560:	080025bf 	.word	0x080025bf
 8002564:	08002601 	.word	0x08002601
 8002568:	08002607 	.word	0x08002607
 800256c:	08002607 	.word	0x08002607
 8002570:	08002607 	.word	0x08002607
 8002574:	08002607 	.word	0x08002607
 8002578:	08002607 	.word	0x08002607
 800257c:	08002607 	.word	0x08002607
 8002580:	08002607 	.word	0x08002607
 8002584:	08002607 	.word	0x08002607
 8002588:	08002607 	.word	0x08002607
 800258c:	08002607 	.word	0x08002607
 8002590:	08002607 	.word	0x08002607
 8002594:	08002607 	.word	0x08002607
 8002598:	08002607 	.word	0x08002607
 800259c:	080025b5 	.word	0x080025b5
 80025a0:	080025c9 	.word	0x080025c9
 80025a4:	4a79      	ldr	r2, [pc, #484]	@ (800278c <HAL_GPIO_Init+0x2b4>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d013      	beq.n	80025d2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80025aa:	e02c      	b.n	8002606 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	68db      	ldr	r3, [r3, #12]
 80025b0:	623b      	str	r3, [r7, #32]
          break;
 80025b2:	e029      	b.n	8002608 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	68db      	ldr	r3, [r3, #12]
 80025b8:	3304      	adds	r3, #4
 80025ba:	623b      	str	r3, [r7, #32]
          break;
 80025bc:	e024      	b.n	8002608 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	68db      	ldr	r3, [r3, #12]
 80025c2:	3308      	adds	r3, #8
 80025c4:	623b      	str	r3, [r7, #32]
          break;
 80025c6:	e01f      	b.n	8002608 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	330c      	adds	r3, #12
 80025ce:	623b      	str	r3, [r7, #32]
          break;
 80025d0:	e01a      	b.n	8002608 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d102      	bne.n	80025e0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80025da:	2304      	movs	r3, #4
 80025dc:	623b      	str	r3, [r7, #32]
          break;
 80025de:	e013      	b.n	8002608 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d105      	bne.n	80025f4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80025e8:	2308      	movs	r3, #8
 80025ea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	69fa      	ldr	r2, [r7, #28]
 80025f0:	611a      	str	r2, [r3, #16]
          break;
 80025f2:	e009      	b.n	8002608 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80025f4:	2308      	movs	r3, #8
 80025f6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	69fa      	ldr	r2, [r7, #28]
 80025fc:	615a      	str	r2, [r3, #20]
          break;
 80025fe:	e003      	b.n	8002608 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002600:	2300      	movs	r3, #0
 8002602:	623b      	str	r3, [r7, #32]
          break;
 8002604:	e000      	b.n	8002608 <HAL_GPIO_Init+0x130>
          break;
 8002606:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002608:	69bb      	ldr	r3, [r7, #24]
 800260a:	2bff      	cmp	r3, #255	@ 0xff
 800260c:	d801      	bhi.n	8002612 <HAL_GPIO_Init+0x13a>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	e001      	b.n	8002616 <HAL_GPIO_Init+0x13e>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	3304      	adds	r3, #4
 8002616:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002618:	69bb      	ldr	r3, [r7, #24]
 800261a:	2bff      	cmp	r3, #255	@ 0xff
 800261c:	d802      	bhi.n	8002624 <HAL_GPIO_Init+0x14c>
 800261e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	e002      	b.n	800262a <HAL_GPIO_Init+0x152>
 8002624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002626:	3b08      	subs	r3, #8
 8002628:	009b      	lsls	r3, r3, #2
 800262a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	210f      	movs	r1, #15
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	fa01 f303 	lsl.w	r3, r1, r3
 8002638:	43db      	mvns	r3, r3
 800263a:	401a      	ands	r2, r3
 800263c:	6a39      	ldr	r1, [r7, #32]
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	fa01 f303 	lsl.w	r3, r1, r3
 8002644:	431a      	orrs	r2, r3
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002652:	2b00      	cmp	r3, #0
 8002654:	f000 80b1 	beq.w	80027ba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002658:	4b4d      	ldr	r3, [pc, #308]	@ (8002790 <HAL_GPIO_Init+0x2b8>)
 800265a:	699b      	ldr	r3, [r3, #24]
 800265c:	4a4c      	ldr	r2, [pc, #304]	@ (8002790 <HAL_GPIO_Init+0x2b8>)
 800265e:	f043 0301 	orr.w	r3, r3, #1
 8002662:	6193      	str	r3, [r2, #24]
 8002664:	4b4a      	ldr	r3, [pc, #296]	@ (8002790 <HAL_GPIO_Init+0x2b8>)
 8002666:	699b      	ldr	r3, [r3, #24]
 8002668:	f003 0301 	and.w	r3, r3, #1
 800266c:	60bb      	str	r3, [r7, #8]
 800266e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002670:	4a48      	ldr	r2, [pc, #288]	@ (8002794 <HAL_GPIO_Init+0x2bc>)
 8002672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002674:	089b      	lsrs	r3, r3, #2
 8002676:	3302      	adds	r3, #2
 8002678:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800267c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800267e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002680:	f003 0303 	and.w	r3, r3, #3
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	220f      	movs	r2, #15
 8002688:	fa02 f303 	lsl.w	r3, r2, r3
 800268c:	43db      	mvns	r3, r3
 800268e:	68fa      	ldr	r2, [r7, #12]
 8002690:	4013      	ands	r3, r2
 8002692:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	4a40      	ldr	r2, [pc, #256]	@ (8002798 <HAL_GPIO_Init+0x2c0>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d013      	beq.n	80026c4 <HAL_GPIO_Init+0x1ec>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	4a3f      	ldr	r2, [pc, #252]	@ (800279c <HAL_GPIO_Init+0x2c4>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d00d      	beq.n	80026c0 <HAL_GPIO_Init+0x1e8>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	4a3e      	ldr	r2, [pc, #248]	@ (80027a0 <HAL_GPIO_Init+0x2c8>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d007      	beq.n	80026bc <HAL_GPIO_Init+0x1e4>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	4a3d      	ldr	r2, [pc, #244]	@ (80027a4 <HAL_GPIO_Init+0x2cc>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d101      	bne.n	80026b8 <HAL_GPIO_Init+0x1e0>
 80026b4:	2303      	movs	r3, #3
 80026b6:	e006      	b.n	80026c6 <HAL_GPIO_Init+0x1ee>
 80026b8:	2304      	movs	r3, #4
 80026ba:	e004      	b.n	80026c6 <HAL_GPIO_Init+0x1ee>
 80026bc:	2302      	movs	r3, #2
 80026be:	e002      	b.n	80026c6 <HAL_GPIO_Init+0x1ee>
 80026c0:	2301      	movs	r3, #1
 80026c2:	e000      	b.n	80026c6 <HAL_GPIO_Init+0x1ee>
 80026c4:	2300      	movs	r3, #0
 80026c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026c8:	f002 0203 	and.w	r2, r2, #3
 80026cc:	0092      	lsls	r2, r2, #2
 80026ce:	4093      	lsls	r3, r2
 80026d0:	68fa      	ldr	r2, [r7, #12]
 80026d2:	4313      	orrs	r3, r2
 80026d4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80026d6:	492f      	ldr	r1, [pc, #188]	@ (8002794 <HAL_GPIO_Init+0x2bc>)
 80026d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026da:	089b      	lsrs	r3, r3, #2
 80026dc:	3302      	adds	r3, #2
 80026de:	68fa      	ldr	r2, [r7, #12]
 80026e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d006      	beq.n	80026fe <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80026f0:	4b2d      	ldr	r3, [pc, #180]	@ (80027a8 <HAL_GPIO_Init+0x2d0>)
 80026f2:	689a      	ldr	r2, [r3, #8]
 80026f4:	492c      	ldr	r1, [pc, #176]	@ (80027a8 <HAL_GPIO_Init+0x2d0>)
 80026f6:	69bb      	ldr	r3, [r7, #24]
 80026f8:	4313      	orrs	r3, r2
 80026fa:	608b      	str	r3, [r1, #8]
 80026fc:	e006      	b.n	800270c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80026fe:	4b2a      	ldr	r3, [pc, #168]	@ (80027a8 <HAL_GPIO_Init+0x2d0>)
 8002700:	689a      	ldr	r2, [r3, #8]
 8002702:	69bb      	ldr	r3, [r7, #24]
 8002704:	43db      	mvns	r3, r3
 8002706:	4928      	ldr	r1, [pc, #160]	@ (80027a8 <HAL_GPIO_Init+0x2d0>)
 8002708:	4013      	ands	r3, r2
 800270a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002714:	2b00      	cmp	r3, #0
 8002716:	d006      	beq.n	8002726 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002718:	4b23      	ldr	r3, [pc, #140]	@ (80027a8 <HAL_GPIO_Init+0x2d0>)
 800271a:	68da      	ldr	r2, [r3, #12]
 800271c:	4922      	ldr	r1, [pc, #136]	@ (80027a8 <HAL_GPIO_Init+0x2d0>)
 800271e:	69bb      	ldr	r3, [r7, #24]
 8002720:	4313      	orrs	r3, r2
 8002722:	60cb      	str	r3, [r1, #12]
 8002724:	e006      	b.n	8002734 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002726:	4b20      	ldr	r3, [pc, #128]	@ (80027a8 <HAL_GPIO_Init+0x2d0>)
 8002728:	68da      	ldr	r2, [r3, #12]
 800272a:	69bb      	ldr	r3, [r7, #24]
 800272c:	43db      	mvns	r3, r3
 800272e:	491e      	ldr	r1, [pc, #120]	@ (80027a8 <HAL_GPIO_Init+0x2d0>)
 8002730:	4013      	ands	r3, r2
 8002732:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800273c:	2b00      	cmp	r3, #0
 800273e:	d006      	beq.n	800274e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002740:	4b19      	ldr	r3, [pc, #100]	@ (80027a8 <HAL_GPIO_Init+0x2d0>)
 8002742:	685a      	ldr	r2, [r3, #4]
 8002744:	4918      	ldr	r1, [pc, #96]	@ (80027a8 <HAL_GPIO_Init+0x2d0>)
 8002746:	69bb      	ldr	r3, [r7, #24]
 8002748:	4313      	orrs	r3, r2
 800274a:	604b      	str	r3, [r1, #4]
 800274c:	e006      	b.n	800275c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800274e:	4b16      	ldr	r3, [pc, #88]	@ (80027a8 <HAL_GPIO_Init+0x2d0>)
 8002750:	685a      	ldr	r2, [r3, #4]
 8002752:	69bb      	ldr	r3, [r7, #24]
 8002754:	43db      	mvns	r3, r3
 8002756:	4914      	ldr	r1, [pc, #80]	@ (80027a8 <HAL_GPIO_Init+0x2d0>)
 8002758:	4013      	ands	r3, r2
 800275a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002764:	2b00      	cmp	r3, #0
 8002766:	d021      	beq.n	80027ac <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002768:	4b0f      	ldr	r3, [pc, #60]	@ (80027a8 <HAL_GPIO_Init+0x2d0>)
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	490e      	ldr	r1, [pc, #56]	@ (80027a8 <HAL_GPIO_Init+0x2d0>)
 800276e:	69bb      	ldr	r3, [r7, #24]
 8002770:	4313      	orrs	r3, r2
 8002772:	600b      	str	r3, [r1, #0]
 8002774:	e021      	b.n	80027ba <HAL_GPIO_Init+0x2e2>
 8002776:	bf00      	nop
 8002778:	10320000 	.word	0x10320000
 800277c:	10310000 	.word	0x10310000
 8002780:	10220000 	.word	0x10220000
 8002784:	10210000 	.word	0x10210000
 8002788:	10120000 	.word	0x10120000
 800278c:	10110000 	.word	0x10110000
 8002790:	40021000 	.word	0x40021000
 8002794:	40010000 	.word	0x40010000
 8002798:	40010800 	.word	0x40010800
 800279c:	40010c00 	.word	0x40010c00
 80027a0:	40011000 	.word	0x40011000
 80027a4:	40011400 	.word	0x40011400
 80027a8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80027ac:	4b0b      	ldr	r3, [pc, #44]	@ (80027dc <HAL_GPIO_Init+0x304>)
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	69bb      	ldr	r3, [r7, #24]
 80027b2:	43db      	mvns	r3, r3
 80027b4:	4909      	ldr	r1, [pc, #36]	@ (80027dc <HAL_GPIO_Init+0x304>)
 80027b6:	4013      	ands	r3, r2
 80027b8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80027ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027bc:	3301      	adds	r3, #1
 80027be:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027c6:	fa22 f303 	lsr.w	r3, r2, r3
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	f47f ae8e 	bne.w	80024ec <HAL_GPIO_Init+0x14>
  }
}
 80027d0:	bf00      	nop
 80027d2:	bf00      	nop
 80027d4:	372c      	adds	r7, #44	@ 0x2c
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bc80      	pop	{r7}
 80027da:	4770      	bx	lr
 80027dc:	40010400 	.word	0x40010400

080027e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b085      	sub	sp, #20
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	460b      	mov	r3, r1
 80027ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	689a      	ldr	r2, [r3, #8]
 80027f0:	887b      	ldrh	r3, [r7, #2]
 80027f2:	4013      	ands	r3, r2
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d002      	beq.n	80027fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80027f8:	2301      	movs	r3, #1
 80027fa:	73fb      	strb	r3, [r7, #15]
 80027fc:	e001      	b.n	8002802 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80027fe:	2300      	movs	r3, #0
 8002800:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002802:	7bfb      	ldrb	r3, [r7, #15]
}
 8002804:	4618      	mov	r0, r3
 8002806:	3714      	adds	r7, #20
 8002808:	46bd      	mov	sp, r7
 800280a:	bc80      	pop	{r7}
 800280c:	4770      	bx	lr

0800280e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800280e:	b480      	push	{r7}
 8002810:	b083      	sub	sp, #12
 8002812:	af00      	add	r7, sp, #0
 8002814:	6078      	str	r0, [r7, #4]
 8002816:	460b      	mov	r3, r1
 8002818:	807b      	strh	r3, [r7, #2]
 800281a:	4613      	mov	r3, r2
 800281c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800281e:	787b      	ldrb	r3, [r7, #1]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d003      	beq.n	800282c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002824:	887a      	ldrh	r2, [r7, #2]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800282a:	e003      	b.n	8002834 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800282c:	887b      	ldrh	r3, [r7, #2]
 800282e:	041a      	lsls	r2, r3, #16
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	611a      	str	r2, [r3, #16]
}
 8002834:	bf00      	nop
 8002836:	370c      	adds	r7, #12
 8002838:	46bd      	mov	sp, r7
 800283a:	bc80      	pop	{r7}
 800283c:	4770      	bx	lr

0800283e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800283e:	b480      	push	{r7}
 8002840:	b085      	sub	sp, #20
 8002842:	af00      	add	r7, sp, #0
 8002844:	6078      	str	r0, [r7, #4]
 8002846:	460b      	mov	r3, r1
 8002848:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	68db      	ldr	r3, [r3, #12]
 800284e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002850:	887a      	ldrh	r2, [r7, #2]
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	4013      	ands	r3, r2
 8002856:	041a      	lsls	r2, r3, #16
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	43d9      	mvns	r1, r3
 800285c:	887b      	ldrh	r3, [r7, #2]
 800285e:	400b      	ands	r3, r1
 8002860:	431a      	orrs	r2, r3
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	611a      	str	r2, [r3, #16]
}
 8002866:	bf00      	nop
 8002868:	3714      	adds	r7, #20
 800286a:	46bd      	mov	sp, r7
 800286c:	bc80      	pop	{r7}
 800286e:	4770      	bx	lr

08002870 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b082      	sub	sp, #8
 8002874:	af00      	add	r7, sp, #0
 8002876:	4603      	mov	r3, r0
 8002878:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800287a:	4b08      	ldr	r3, [pc, #32]	@ (800289c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800287c:	695a      	ldr	r2, [r3, #20]
 800287e:	88fb      	ldrh	r3, [r7, #6]
 8002880:	4013      	ands	r3, r2
 8002882:	2b00      	cmp	r3, #0
 8002884:	d006      	beq.n	8002894 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002886:	4a05      	ldr	r2, [pc, #20]	@ (800289c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002888:	88fb      	ldrh	r3, [r7, #6]
 800288a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800288c:	88fb      	ldrh	r3, [r7, #6]
 800288e:	4618      	mov	r0, r3
 8002890:	f7fe fdcd 	bl	800142e <HAL_GPIO_EXTI_Callback>
  }
}
 8002894:	bf00      	nop
 8002896:	3708      	adds	r7, #8
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}
 800289c:	40010400 	.word	0x40010400

080028a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b084      	sub	sp, #16
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d101      	bne.n	80028b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e12b      	b.n	8002b0a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d106      	bne.n	80028cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2200      	movs	r2, #0
 80028c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	f7fe fbf4 	bl	80010b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2224      	movs	r2, #36	@ 0x24
 80028d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f022 0201 	bic.w	r2, r2, #1
 80028e2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80028f2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002902:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002904:	f003 f90a 	bl	8005b1c <HAL_RCC_GetPCLK1Freq>
 8002908:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	4a81      	ldr	r2, [pc, #516]	@ (8002b14 <HAL_I2C_Init+0x274>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d807      	bhi.n	8002924 <HAL_I2C_Init+0x84>
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	4a80      	ldr	r2, [pc, #512]	@ (8002b18 <HAL_I2C_Init+0x278>)
 8002918:	4293      	cmp	r3, r2
 800291a:	bf94      	ite	ls
 800291c:	2301      	movls	r3, #1
 800291e:	2300      	movhi	r3, #0
 8002920:	b2db      	uxtb	r3, r3
 8002922:	e006      	b.n	8002932 <HAL_I2C_Init+0x92>
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	4a7d      	ldr	r2, [pc, #500]	@ (8002b1c <HAL_I2C_Init+0x27c>)
 8002928:	4293      	cmp	r3, r2
 800292a:	bf94      	ite	ls
 800292c:	2301      	movls	r3, #1
 800292e:	2300      	movhi	r3, #0
 8002930:	b2db      	uxtb	r3, r3
 8002932:	2b00      	cmp	r3, #0
 8002934:	d001      	beq.n	800293a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e0e7      	b.n	8002b0a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	4a78      	ldr	r2, [pc, #480]	@ (8002b20 <HAL_I2C_Init+0x280>)
 800293e:	fba2 2303 	umull	r2, r3, r2, r3
 8002942:	0c9b      	lsrs	r3, r3, #18
 8002944:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	68ba      	ldr	r2, [r7, #8]
 8002956:	430a      	orrs	r2, r1
 8002958:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	6a1b      	ldr	r3, [r3, #32]
 8002960:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	4a6a      	ldr	r2, [pc, #424]	@ (8002b14 <HAL_I2C_Init+0x274>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d802      	bhi.n	8002974 <HAL_I2C_Init+0xd4>
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	3301      	adds	r3, #1
 8002972:	e009      	b.n	8002988 <HAL_I2C_Init+0xe8>
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800297a:	fb02 f303 	mul.w	r3, r2, r3
 800297e:	4a69      	ldr	r2, [pc, #420]	@ (8002b24 <HAL_I2C_Init+0x284>)
 8002980:	fba2 2303 	umull	r2, r3, r2, r3
 8002984:	099b      	lsrs	r3, r3, #6
 8002986:	3301      	adds	r3, #1
 8002988:	687a      	ldr	r2, [r7, #4]
 800298a:	6812      	ldr	r2, [r2, #0]
 800298c:	430b      	orrs	r3, r1
 800298e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	69db      	ldr	r3, [r3, #28]
 8002996:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800299a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	495c      	ldr	r1, [pc, #368]	@ (8002b14 <HAL_I2C_Init+0x274>)
 80029a4:	428b      	cmp	r3, r1
 80029a6:	d819      	bhi.n	80029dc <HAL_I2C_Init+0x13c>
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	1e59      	subs	r1, r3, #1
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	005b      	lsls	r3, r3, #1
 80029b2:	fbb1 f3f3 	udiv	r3, r1, r3
 80029b6:	1c59      	adds	r1, r3, #1
 80029b8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80029bc:	400b      	ands	r3, r1
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d00a      	beq.n	80029d8 <HAL_I2C_Init+0x138>
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	1e59      	subs	r1, r3, #1
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	005b      	lsls	r3, r3, #1
 80029cc:	fbb1 f3f3 	udiv	r3, r1, r3
 80029d0:	3301      	adds	r3, #1
 80029d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029d6:	e051      	b.n	8002a7c <HAL_I2C_Init+0x1dc>
 80029d8:	2304      	movs	r3, #4
 80029da:	e04f      	b.n	8002a7c <HAL_I2C_Init+0x1dc>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d111      	bne.n	8002a08 <HAL_I2C_Init+0x168>
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	1e58      	subs	r0, r3, #1
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6859      	ldr	r1, [r3, #4]
 80029ec:	460b      	mov	r3, r1
 80029ee:	005b      	lsls	r3, r3, #1
 80029f0:	440b      	add	r3, r1
 80029f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80029f6:	3301      	adds	r3, #1
 80029f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	bf0c      	ite	eq
 8002a00:	2301      	moveq	r3, #1
 8002a02:	2300      	movne	r3, #0
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	e012      	b.n	8002a2e <HAL_I2C_Init+0x18e>
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	1e58      	subs	r0, r3, #1
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6859      	ldr	r1, [r3, #4]
 8002a10:	460b      	mov	r3, r1
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	440b      	add	r3, r1
 8002a16:	0099      	lsls	r1, r3, #2
 8002a18:	440b      	add	r3, r1
 8002a1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a1e:	3301      	adds	r3, #1
 8002a20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	bf0c      	ite	eq
 8002a28:	2301      	moveq	r3, #1
 8002a2a:	2300      	movne	r3, #0
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d001      	beq.n	8002a36 <HAL_I2C_Init+0x196>
 8002a32:	2301      	movs	r3, #1
 8002a34:	e022      	b.n	8002a7c <HAL_I2C_Init+0x1dc>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d10e      	bne.n	8002a5c <HAL_I2C_Init+0x1bc>
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	1e58      	subs	r0, r3, #1
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6859      	ldr	r1, [r3, #4]
 8002a46:	460b      	mov	r3, r1
 8002a48:	005b      	lsls	r3, r3, #1
 8002a4a:	440b      	add	r3, r1
 8002a4c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a50:	3301      	adds	r3, #1
 8002a52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a56:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002a5a:	e00f      	b.n	8002a7c <HAL_I2C_Init+0x1dc>
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	1e58      	subs	r0, r3, #1
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6859      	ldr	r1, [r3, #4]
 8002a64:	460b      	mov	r3, r1
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	440b      	add	r3, r1
 8002a6a:	0099      	lsls	r1, r3, #2
 8002a6c:	440b      	add	r3, r1
 8002a6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a72:	3301      	adds	r3, #1
 8002a74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a78:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002a7c:	6879      	ldr	r1, [r7, #4]
 8002a7e:	6809      	ldr	r1, [r1, #0]
 8002a80:	4313      	orrs	r3, r2
 8002a82:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	69da      	ldr	r2, [r3, #28]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6a1b      	ldr	r3, [r3, #32]
 8002a96:	431a      	orrs	r2, r3
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	430a      	orrs	r2, r1
 8002a9e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002aaa:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002aae:	687a      	ldr	r2, [r7, #4]
 8002ab0:	6911      	ldr	r1, [r2, #16]
 8002ab2:	687a      	ldr	r2, [r7, #4]
 8002ab4:	68d2      	ldr	r2, [r2, #12]
 8002ab6:	4311      	orrs	r1, r2
 8002ab8:	687a      	ldr	r2, [r7, #4]
 8002aba:	6812      	ldr	r2, [r2, #0]
 8002abc:	430b      	orrs	r3, r1
 8002abe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	68db      	ldr	r3, [r3, #12]
 8002ac6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	695a      	ldr	r2, [r3, #20]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	699b      	ldr	r3, [r3, #24]
 8002ad2:	431a      	orrs	r2, r3
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	430a      	orrs	r2, r1
 8002ada:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f042 0201 	orr.w	r2, r2, #1
 8002aea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2200      	movs	r2, #0
 8002af0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2220      	movs	r2, #32
 8002af6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2200      	movs	r2, #0
 8002afe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2200      	movs	r2, #0
 8002b04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002b08:	2300      	movs	r3, #0
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	3710      	adds	r7, #16
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	000186a0 	.word	0x000186a0
 8002b18:	001e847f 	.word	0x001e847f
 8002b1c:	003d08ff 	.word	0x003d08ff
 8002b20:	431bde83 	.word	0x431bde83
 8002b24:	10624dd3 	.word	0x10624dd3

08002b28 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	695b      	ldr	r3, [r3, #20]
 8002b36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b3a:	2b80      	cmp	r3, #128	@ 0x80
 8002b3c:	d103      	bne.n	8002b46 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	2200      	movs	r2, #0
 8002b44:	611a      	str	r2, [r3, #16]
  }
}
 8002b46:	bf00      	nop
 8002b48:	370c      	adds	r7, #12
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bc80      	pop	{r7}
 8002b4e:	4770      	bx	lr

08002b50 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b088      	sub	sp, #32
 8002b54:	af02      	add	r7, sp, #8
 8002b56:	60f8      	str	r0, [r7, #12]
 8002b58:	4608      	mov	r0, r1
 8002b5a:	4611      	mov	r1, r2
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	4603      	mov	r3, r0
 8002b60:	817b      	strh	r3, [r7, #10]
 8002b62:	460b      	mov	r3, r1
 8002b64:	813b      	strh	r3, [r7, #8]
 8002b66:	4613      	mov	r3, r2
 8002b68:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002b6a:	f7ff fab9 	bl	80020e0 <HAL_GetTick>
 8002b6e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	2b20      	cmp	r3, #32
 8002b7a:	f040 80d9 	bne.w	8002d30 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	9300      	str	r3, [sp, #0]
 8002b82:	2319      	movs	r3, #25
 8002b84:	2201      	movs	r2, #1
 8002b86:	496d      	ldr	r1, [pc, #436]	@ (8002d3c <HAL_I2C_Mem_Write+0x1ec>)
 8002b88:	68f8      	ldr	r0, [r7, #12]
 8002b8a:	f002 f97b 	bl	8004e84 <I2C_WaitOnFlagUntilTimeout>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d001      	beq.n	8002b98 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002b94:	2302      	movs	r3, #2
 8002b96:	e0cc      	b.n	8002d32 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d101      	bne.n	8002ba6 <HAL_I2C_Mem_Write+0x56>
 8002ba2:	2302      	movs	r3, #2
 8002ba4:	e0c5      	b.n	8002d32 <HAL_I2C_Mem_Write+0x1e2>
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2201      	movs	r2, #1
 8002baa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0301 	and.w	r3, r3, #1
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d007      	beq.n	8002bcc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f042 0201 	orr.w	r2, r2, #1
 8002bca:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002bda:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2221      	movs	r2, #33	@ 0x21
 8002be0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2240      	movs	r2, #64	@ 0x40
 8002be8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	6a3a      	ldr	r2, [r7, #32]
 8002bf6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002bfc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c02:	b29a      	uxth	r2, r3
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	4a4d      	ldr	r2, [pc, #308]	@ (8002d40 <HAL_I2C_Mem_Write+0x1f0>)
 8002c0c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002c0e:	88f8      	ldrh	r0, [r7, #6]
 8002c10:	893a      	ldrh	r2, [r7, #8]
 8002c12:	8979      	ldrh	r1, [r7, #10]
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	9301      	str	r3, [sp, #4]
 8002c18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c1a:	9300      	str	r3, [sp, #0]
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	68f8      	ldr	r0, [r7, #12]
 8002c20:	f001 ff0a 	bl	8004a38 <I2C_RequestMemoryWrite>
 8002c24:	4603      	mov	r3, r0
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d052      	beq.n	8002cd0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e081      	b.n	8002d32 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c2e:	697a      	ldr	r2, [r7, #20]
 8002c30:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002c32:	68f8      	ldr	r0, [r7, #12]
 8002c34:	f002 fa40 	bl	80050b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d00d      	beq.n	8002c5a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c42:	2b04      	cmp	r3, #4
 8002c44:	d107      	bne.n	8002c56 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c54:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e06b      	b.n	8002d32 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c5e:	781a      	ldrb	r2, [r3, #0]
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c6a:	1c5a      	adds	r2, r3, #1
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c74:	3b01      	subs	r3, #1
 8002c76:	b29a      	uxth	r2, r3
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c80:	b29b      	uxth	r3, r3
 8002c82:	3b01      	subs	r3, #1
 8002c84:	b29a      	uxth	r2, r3
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	695b      	ldr	r3, [r3, #20]
 8002c90:	f003 0304 	and.w	r3, r3, #4
 8002c94:	2b04      	cmp	r3, #4
 8002c96:	d11b      	bne.n	8002cd0 <HAL_I2C_Mem_Write+0x180>
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d017      	beq.n	8002cd0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ca4:	781a      	ldrb	r2, [r3, #0]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cb0:	1c5a      	adds	r2, r3, #1
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cba:	3b01      	subs	r3, #1
 8002cbc:	b29a      	uxth	r2, r3
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cc6:	b29b      	uxth	r3, r3
 8002cc8:	3b01      	subs	r3, #1
 8002cca:	b29a      	uxth	r2, r3
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d1aa      	bne.n	8002c2e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cd8:	697a      	ldr	r2, [r7, #20]
 8002cda:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002cdc:	68f8      	ldr	r0, [r7, #12]
 8002cde:	f002 fa33 	bl	8005148 <I2C_WaitOnBTFFlagUntilTimeout>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d00d      	beq.n	8002d04 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cec:	2b04      	cmp	r3, #4
 8002cee:	d107      	bne.n	8002d00 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002cfe:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	e016      	b.n	8002d32 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2220      	movs	r2, #32
 8002d18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2200      	movs	r2, #0
 8002d28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	e000      	b.n	8002d32 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002d30:	2302      	movs	r3, #2
  }
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	3718      	adds	r7, #24
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	00100002 	.word	0x00100002
 8002d40:	ffff0000 	.word	0xffff0000

08002d44 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b08c      	sub	sp, #48	@ 0x30
 8002d48:	af02      	add	r7, sp, #8
 8002d4a:	60f8      	str	r0, [r7, #12]
 8002d4c:	4608      	mov	r0, r1
 8002d4e:	4611      	mov	r1, r2
 8002d50:	461a      	mov	r2, r3
 8002d52:	4603      	mov	r3, r0
 8002d54:	817b      	strh	r3, [r7, #10]
 8002d56:	460b      	mov	r3, r1
 8002d58:	813b      	strh	r3, [r7, #8]
 8002d5a:	4613      	mov	r3, r2
 8002d5c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002d62:	f7ff f9bd 	bl	80020e0 <HAL_GetTick>
 8002d66:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	2b20      	cmp	r3, #32
 8002d72:	f040 8250 	bne.w	8003216 <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d78:	9300      	str	r3, [sp, #0]
 8002d7a:	2319      	movs	r3, #25
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	4982      	ldr	r1, [pc, #520]	@ (8002f88 <HAL_I2C_Mem_Read+0x244>)
 8002d80:	68f8      	ldr	r0, [r7, #12]
 8002d82:	f002 f87f 	bl	8004e84 <I2C_WaitOnFlagUntilTimeout>
 8002d86:	4603      	mov	r3, r0
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d001      	beq.n	8002d90 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002d8c:	2302      	movs	r3, #2
 8002d8e:	e243      	b.n	8003218 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d101      	bne.n	8002d9e <HAL_I2C_Mem_Read+0x5a>
 8002d9a:	2302      	movs	r3, #2
 8002d9c:	e23c      	b.n	8003218 <HAL_I2C_Mem_Read+0x4d4>
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2201      	movs	r2, #1
 8002da2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 0301 	and.w	r3, r3, #1
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d007      	beq.n	8002dc4 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f042 0201 	orr.w	r2, r2, #1
 8002dc2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002dd2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2222      	movs	r2, #34	@ 0x22
 8002dd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2240      	movs	r2, #64	@ 0x40
 8002de0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	2200      	movs	r2, #0
 8002de8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002dee:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002df4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dfa:	b29a      	uxth	r2, r3
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	4a62      	ldr	r2, [pc, #392]	@ (8002f8c <HAL_I2C_Mem_Read+0x248>)
 8002e04:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002e06:	88f8      	ldrh	r0, [r7, #6]
 8002e08:	893a      	ldrh	r2, [r7, #8]
 8002e0a:	8979      	ldrh	r1, [r7, #10]
 8002e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e0e:	9301      	str	r3, [sp, #4]
 8002e10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e12:	9300      	str	r3, [sp, #0]
 8002e14:	4603      	mov	r3, r0
 8002e16:	68f8      	ldr	r0, [r7, #12]
 8002e18:	f001 fea4 	bl	8004b64 <I2C_RequestMemoryRead>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d001      	beq.n	8002e26 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e1f8      	b.n	8003218 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d113      	bne.n	8002e56 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e2e:	2300      	movs	r3, #0
 8002e30:	61fb      	str	r3, [r7, #28]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	695b      	ldr	r3, [r3, #20]
 8002e38:	61fb      	str	r3, [r7, #28]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	699b      	ldr	r3, [r3, #24]
 8002e40:	61fb      	str	r3, [r7, #28]
 8002e42:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e52:	601a      	str	r2, [r3, #0]
 8002e54:	e1cc      	b.n	80031f0 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d11e      	bne.n	8002e9c <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e6c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002e6e:	b672      	cpsid	i
}
 8002e70:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e72:	2300      	movs	r3, #0
 8002e74:	61bb      	str	r3, [r7, #24]
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	695b      	ldr	r3, [r3, #20]
 8002e7c:	61bb      	str	r3, [r7, #24]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	699b      	ldr	r3, [r3, #24]
 8002e84:	61bb      	str	r3, [r7, #24]
 8002e86:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e96:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002e98:	b662      	cpsie	i
}
 8002e9a:	e035      	b.n	8002f08 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ea0:	2b02      	cmp	r3, #2
 8002ea2:	d11e      	bne.n	8002ee2 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002eb2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002eb4:	b672      	cpsid	i
}
 8002eb6:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002eb8:	2300      	movs	r3, #0
 8002eba:	617b      	str	r3, [r7, #20]
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	695b      	ldr	r3, [r3, #20]
 8002ec2:	617b      	str	r3, [r7, #20]
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	699b      	ldr	r3, [r3, #24]
 8002eca:	617b      	str	r3, [r7, #20]
 8002ecc:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002edc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002ede:	b662      	cpsie	i
}
 8002ee0:	e012      	b.n	8002f08 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002ef0:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	613b      	str	r3, [r7, #16]
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	695b      	ldr	r3, [r3, #20]
 8002efc:	613b      	str	r3, [r7, #16]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	699b      	ldr	r3, [r3, #24]
 8002f04:	613b      	str	r3, [r7, #16]
 8002f06:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002f08:	e172      	b.n	80031f0 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f0e:	2b03      	cmp	r3, #3
 8002f10:	f200 811f 	bhi.w	8003152 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d123      	bne.n	8002f64 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f1e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002f20:	68f8      	ldr	r0, [r7, #12]
 8002f22:	f002 f98b 	bl	800523c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002f26:	4603      	mov	r3, r0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d001      	beq.n	8002f30 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e173      	b.n	8003218 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	691a      	ldr	r2, [r3, #16]
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f3a:	b2d2      	uxtb	r2, r2
 8002f3c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f42:	1c5a      	adds	r2, r3, #1
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f4c:	3b01      	subs	r3, #1
 8002f4e:	b29a      	uxth	r2, r3
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f58:	b29b      	uxth	r3, r3
 8002f5a:	3b01      	subs	r3, #1
 8002f5c:	b29a      	uxth	r2, r3
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002f62:	e145      	b.n	80031f0 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f68:	2b02      	cmp	r3, #2
 8002f6a:	d152      	bne.n	8003012 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f6e:	9300      	str	r3, [sp, #0]
 8002f70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f72:	2200      	movs	r2, #0
 8002f74:	4906      	ldr	r1, [pc, #24]	@ (8002f90 <HAL_I2C_Mem_Read+0x24c>)
 8002f76:	68f8      	ldr	r0, [r7, #12]
 8002f78:	f001 ff84 	bl	8004e84 <I2C_WaitOnFlagUntilTimeout>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d008      	beq.n	8002f94 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e148      	b.n	8003218 <HAL_I2C_Mem_Read+0x4d4>
 8002f86:	bf00      	nop
 8002f88:	00100002 	.word	0x00100002
 8002f8c:	ffff0000 	.word	0xffff0000
 8002f90:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002f94:	b672      	cpsid	i
}
 8002f96:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002fa6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	691a      	ldr	r2, [r3, #16]
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fb2:	b2d2      	uxtb	r2, r2
 8002fb4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fba:	1c5a      	adds	r2, r3, #1
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fc4:	3b01      	subs	r3, #1
 8002fc6:	b29a      	uxth	r2, r3
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fd0:	b29b      	uxth	r3, r3
 8002fd2:	3b01      	subs	r3, #1
 8002fd4:	b29a      	uxth	r2, r3
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002fda:	b662      	cpsie	i
}
 8002fdc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	691a      	ldr	r2, [r3, #16]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fe8:	b2d2      	uxtb	r2, r2
 8002fea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ff0:	1c5a      	adds	r2, r3, #1
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ffa:	3b01      	subs	r3, #1
 8002ffc:	b29a      	uxth	r2, r3
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003006:	b29b      	uxth	r3, r3
 8003008:	3b01      	subs	r3, #1
 800300a:	b29a      	uxth	r2, r3
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003010:	e0ee      	b.n	80031f0 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003014:	9300      	str	r3, [sp, #0]
 8003016:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003018:	2200      	movs	r2, #0
 800301a:	4981      	ldr	r1, [pc, #516]	@ (8003220 <HAL_I2C_Mem_Read+0x4dc>)
 800301c:	68f8      	ldr	r0, [r7, #12]
 800301e:	f001 ff31 	bl	8004e84 <I2C_WaitOnFlagUntilTimeout>
 8003022:	4603      	mov	r3, r0
 8003024:	2b00      	cmp	r3, #0
 8003026:	d001      	beq.n	800302c <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	e0f5      	b.n	8003218 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800303a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800303c:	b672      	cpsid	i
}
 800303e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	691a      	ldr	r2, [r3, #16]
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800304a:	b2d2      	uxtb	r2, r2
 800304c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003052:	1c5a      	adds	r2, r3, #1
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800305c:	3b01      	subs	r3, #1
 800305e:	b29a      	uxth	r2, r3
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003068:	b29b      	uxth	r3, r3
 800306a:	3b01      	subs	r3, #1
 800306c:	b29a      	uxth	r2, r3
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003072:	4b6c      	ldr	r3, [pc, #432]	@ (8003224 <HAL_I2C_Mem_Read+0x4e0>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	08db      	lsrs	r3, r3, #3
 8003078:	4a6b      	ldr	r2, [pc, #428]	@ (8003228 <HAL_I2C_Mem_Read+0x4e4>)
 800307a:	fba2 2303 	umull	r2, r3, r2, r3
 800307e:	0a1a      	lsrs	r2, r3, #8
 8003080:	4613      	mov	r3, r2
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	4413      	add	r3, r2
 8003086:	00da      	lsls	r2, r3, #3
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800308c:	6a3b      	ldr	r3, [r7, #32]
 800308e:	3b01      	subs	r3, #1
 8003090:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003092:	6a3b      	ldr	r3, [r7, #32]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d118      	bne.n	80030ca <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2200      	movs	r2, #0
 800309c:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2220      	movs	r2, #32
 80030a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	2200      	movs	r2, #0
 80030aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030b2:	f043 0220 	orr.w	r2, r3, #32
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80030ba:	b662      	cpsie	i
}
 80030bc:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2200      	movs	r2, #0
 80030c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e0a6      	b.n	8003218 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	695b      	ldr	r3, [r3, #20]
 80030d0:	f003 0304 	and.w	r3, r3, #4
 80030d4:	2b04      	cmp	r3, #4
 80030d6:	d1d9      	bne.n	800308c <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	691a      	ldr	r2, [r3, #16]
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030f2:	b2d2      	uxtb	r2, r2
 80030f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030fa:	1c5a      	adds	r2, r3, #1
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003104:	3b01      	subs	r3, #1
 8003106:	b29a      	uxth	r2, r3
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003110:	b29b      	uxth	r3, r3
 8003112:	3b01      	subs	r3, #1
 8003114:	b29a      	uxth	r2, r3
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800311a:	b662      	cpsie	i
}
 800311c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	691a      	ldr	r2, [r3, #16]
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003128:	b2d2      	uxtb	r2, r2
 800312a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003130:	1c5a      	adds	r2, r3, #1
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800313a:	3b01      	subs	r3, #1
 800313c:	b29a      	uxth	r2, r3
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003146:	b29b      	uxth	r3, r3
 8003148:	3b01      	subs	r3, #1
 800314a:	b29a      	uxth	r2, r3
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003150:	e04e      	b.n	80031f0 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003152:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003154:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003156:	68f8      	ldr	r0, [r7, #12]
 8003158:	f002 f870 	bl	800523c <I2C_WaitOnRXNEFlagUntilTimeout>
 800315c:	4603      	mov	r3, r0
 800315e:	2b00      	cmp	r3, #0
 8003160:	d001      	beq.n	8003166 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e058      	b.n	8003218 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	691a      	ldr	r2, [r3, #16]
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003170:	b2d2      	uxtb	r2, r2
 8003172:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003178:	1c5a      	adds	r2, r3, #1
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003182:	3b01      	subs	r3, #1
 8003184:	b29a      	uxth	r2, r3
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800318e:	b29b      	uxth	r3, r3
 8003190:	3b01      	subs	r3, #1
 8003192:	b29a      	uxth	r2, r3
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	695b      	ldr	r3, [r3, #20]
 800319e:	f003 0304 	and.w	r3, r3, #4
 80031a2:	2b04      	cmp	r3, #4
 80031a4:	d124      	bne.n	80031f0 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031aa:	2b03      	cmp	r3, #3
 80031ac:	d107      	bne.n	80031be <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	681a      	ldr	r2, [r3, #0]
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80031bc:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	691a      	ldr	r2, [r3, #16]
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031c8:	b2d2      	uxtb	r2, r2
 80031ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031d0:	1c5a      	adds	r2, r3, #1
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031da:	3b01      	subs	r3, #1
 80031dc:	b29a      	uxth	r2, r3
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031e6:	b29b      	uxth	r3, r3
 80031e8:	3b01      	subs	r3, #1
 80031ea:	b29a      	uxth	r2, r3
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	f47f ae88 	bne.w	8002f0a <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2220      	movs	r2, #32
 80031fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2200      	movs	r2, #0
 8003206:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2200      	movs	r2, #0
 800320e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003212:	2300      	movs	r3, #0
 8003214:	e000      	b.n	8003218 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 8003216:	2302      	movs	r3, #2
  }
}
 8003218:	4618      	mov	r0, r3
 800321a:	3728      	adds	r7, #40	@ 0x28
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}
 8003220:	00010004 	.word	0x00010004
 8003224:	20000000 	.word	0x20000000
 8003228:	14f8b589 	.word	0x14f8b589

0800322c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b088      	sub	sp, #32
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003234:	2300      	movs	r3, #0
 8003236:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003244:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800324c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003254:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003256:	7bfb      	ldrb	r3, [r7, #15]
 8003258:	2b10      	cmp	r3, #16
 800325a:	d003      	beq.n	8003264 <HAL_I2C_EV_IRQHandler+0x38>
 800325c:	7bfb      	ldrb	r3, [r7, #15]
 800325e:	2b40      	cmp	r3, #64	@ 0x40
 8003260:	f040 80c1 	bne.w	80033e6 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	699b      	ldr	r3, [r3, #24]
 800326a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	695b      	ldr	r3, [r3, #20]
 8003272:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003274:	69fb      	ldr	r3, [r7, #28]
 8003276:	f003 0301 	and.w	r3, r3, #1
 800327a:	2b00      	cmp	r3, #0
 800327c:	d10d      	bne.n	800329a <HAL_I2C_EV_IRQHandler+0x6e>
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8003284:	d003      	beq.n	800328e <HAL_I2C_EV_IRQHandler+0x62>
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800328c:	d101      	bne.n	8003292 <HAL_I2C_EV_IRQHandler+0x66>
 800328e:	2301      	movs	r3, #1
 8003290:	e000      	b.n	8003294 <HAL_I2C_EV_IRQHandler+0x68>
 8003292:	2300      	movs	r3, #0
 8003294:	2b01      	cmp	r3, #1
 8003296:	f000 8132 	beq.w	80034fe <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800329a:	69fb      	ldr	r3, [r7, #28]
 800329c:	f003 0301 	and.w	r3, r3, #1
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d00c      	beq.n	80032be <HAL_I2C_EV_IRQHandler+0x92>
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	0a5b      	lsrs	r3, r3, #9
 80032a8:	f003 0301 	and.w	r3, r3, #1
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d006      	beq.n	80032be <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	f002 f84e 	bl	8005352 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f000 fd99 	bl	8003dee <I2C_Master_SB>
 80032bc:	e092      	b.n	80033e4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80032be:	69fb      	ldr	r3, [r7, #28]
 80032c0:	08db      	lsrs	r3, r3, #3
 80032c2:	f003 0301 	and.w	r3, r3, #1
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d009      	beq.n	80032de <HAL_I2C_EV_IRQHandler+0xb2>
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	0a5b      	lsrs	r3, r3, #9
 80032ce:	f003 0301 	and.w	r3, r3, #1
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d003      	beq.n	80032de <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f000 fe0e 	bl	8003ef8 <I2C_Master_ADD10>
 80032dc:	e082      	b.n	80033e4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80032de:	69fb      	ldr	r3, [r7, #28]
 80032e0:	085b      	lsrs	r3, r3, #1
 80032e2:	f003 0301 	and.w	r3, r3, #1
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d009      	beq.n	80032fe <HAL_I2C_EV_IRQHandler+0xd2>
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	0a5b      	lsrs	r3, r3, #9
 80032ee:	f003 0301 	and.w	r3, r3, #1
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d003      	beq.n	80032fe <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f000 fe27 	bl	8003f4a <I2C_Master_ADDR>
 80032fc:	e072      	b.n	80033e4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80032fe:	69bb      	ldr	r3, [r7, #24]
 8003300:	089b      	lsrs	r3, r3, #2
 8003302:	f003 0301 	and.w	r3, r3, #1
 8003306:	2b00      	cmp	r3, #0
 8003308:	d03b      	beq.n	8003382 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003314:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003318:	f000 80f3 	beq.w	8003502 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800331c:	69fb      	ldr	r3, [r7, #28]
 800331e:	09db      	lsrs	r3, r3, #7
 8003320:	f003 0301 	and.w	r3, r3, #1
 8003324:	2b00      	cmp	r3, #0
 8003326:	d00f      	beq.n	8003348 <HAL_I2C_EV_IRQHandler+0x11c>
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	0a9b      	lsrs	r3, r3, #10
 800332c:	f003 0301 	and.w	r3, r3, #1
 8003330:	2b00      	cmp	r3, #0
 8003332:	d009      	beq.n	8003348 <HAL_I2C_EV_IRQHandler+0x11c>
 8003334:	69fb      	ldr	r3, [r7, #28]
 8003336:	089b      	lsrs	r3, r3, #2
 8003338:	f003 0301 	and.w	r3, r3, #1
 800333c:	2b00      	cmp	r3, #0
 800333e:	d103      	bne.n	8003348 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003340:	6878      	ldr	r0, [r7, #4]
 8003342:	f000 f9f1 	bl	8003728 <I2C_MasterTransmit_TXE>
 8003346:	e04d      	b.n	80033e4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003348:	69fb      	ldr	r3, [r7, #28]
 800334a:	089b      	lsrs	r3, r3, #2
 800334c:	f003 0301 	and.w	r3, r3, #1
 8003350:	2b00      	cmp	r3, #0
 8003352:	f000 80d6 	beq.w	8003502 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	0a5b      	lsrs	r3, r3, #9
 800335a:	f003 0301 	and.w	r3, r3, #1
 800335e:	2b00      	cmp	r3, #0
 8003360:	f000 80cf 	beq.w	8003502 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003364:	7bbb      	ldrb	r3, [r7, #14]
 8003366:	2b21      	cmp	r3, #33	@ 0x21
 8003368:	d103      	bne.n	8003372 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	f000 fa78 	bl	8003860 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003370:	e0c7      	b.n	8003502 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003372:	7bfb      	ldrb	r3, [r7, #15]
 8003374:	2b40      	cmp	r3, #64	@ 0x40
 8003376:	f040 80c4 	bne.w	8003502 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f000 fae6 	bl	800394c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003380:	e0bf      	b.n	8003502 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800338c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003390:	f000 80b7 	beq.w	8003502 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003394:	69fb      	ldr	r3, [r7, #28]
 8003396:	099b      	lsrs	r3, r3, #6
 8003398:	f003 0301 	and.w	r3, r3, #1
 800339c:	2b00      	cmp	r3, #0
 800339e:	d00f      	beq.n	80033c0 <HAL_I2C_EV_IRQHandler+0x194>
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	0a9b      	lsrs	r3, r3, #10
 80033a4:	f003 0301 	and.w	r3, r3, #1
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d009      	beq.n	80033c0 <HAL_I2C_EV_IRQHandler+0x194>
 80033ac:	69fb      	ldr	r3, [r7, #28]
 80033ae:	089b      	lsrs	r3, r3, #2
 80033b0:	f003 0301 	and.w	r3, r3, #1
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d103      	bne.n	80033c0 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80033b8:	6878      	ldr	r0, [r7, #4]
 80033ba:	f000 fb5f 	bl	8003a7c <I2C_MasterReceive_RXNE>
 80033be:	e011      	b.n	80033e4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80033c0:	69fb      	ldr	r3, [r7, #28]
 80033c2:	089b      	lsrs	r3, r3, #2
 80033c4:	f003 0301 	and.w	r3, r3, #1
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	f000 809a 	beq.w	8003502 <HAL_I2C_EV_IRQHandler+0x2d6>
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	0a5b      	lsrs	r3, r3, #9
 80033d2:	f003 0301 	and.w	r3, r3, #1
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	f000 8093 	beq.w	8003502 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80033dc:	6878      	ldr	r0, [r7, #4]
 80033de:	f000 fc15 	bl	8003c0c <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80033e2:	e08e      	b.n	8003502 <HAL_I2C_EV_IRQHandler+0x2d6>
 80033e4:	e08d      	b.n	8003502 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d004      	beq.n	80033f8 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	695b      	ldr	r3, [r3, #20]
 80033f4:	61fb      	str	r3, [r7, #28]
 80033f6:	e007      	b.n	8003408 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	699b      	ldr	r3, [r3, #24]
 80033fe:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	695b      	ldr	r3, [r3, #20]
 8003406:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003408:	69fb      	ldr	r3, [r7, #28]
 800340a:	085b      	lsrs	r3, r3, #1
 800340c:	f003 0301 	and.w	r3, r3, #1
 8003410:	2b00      	cmp	r3, #0
 8003412:	d012      	beq.n	800343a <HAL_I2C_EV_IRQHandler+0x20e>
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	0a5b      	lsrs	r3, r3, #9
 8003418:	f003 0301 	and.w	r3, r3, #1
 800341c:	2b00      	cmp	r3, #0
 800341e:	d00c      	beq.n	800343a <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003424:	2b00      	cmp	r3, #0
 8003426:	d003      	beq.n	8003430 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	699b      	ldr	r3, [r3, #24]
 800342e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003430:	69b9      	ldr	r1, [r7, #24]
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f000 ffe0 	bl	80043f8 <I2C_Slave_ADDR>
 8003438:	e066      	b.n	8003508 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	091b      	lsrs	r3, r3, #4
 800343e:	f003 0301 	and.w	r3, r3, #1
 8003442:	2b00      	cmp	r3, #0
 8003444:	d009      	beq.n	800345a <HAL_I2C_EV_IRQHandler+0x22e>
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	0a5b      	lsrs	r3, r3, #9
 800344a:	f003 0301 	and.w	r3, r3, #1
 800344e:	2b00      	cmp	r3, #0
 8003450:	d003      	beq.n	800345a <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f001 f81a 	bl	800448c <I2C_Slave_STOPF>
 8003458:	e056      	b.n	8003508 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800345a:	7bbb      	ldrb	r3, [r7, #14]
 800345c:	2b21      	cmp	r3, #33	@ 0x21
 800345e:	d002      	beq.n	8003466 <HAL_I2C_EV_IRQHandler+0x23a>
 8003460:	7bbb      	ldrb	r3, [r7, #14]
 8003462:	2b29      	cmp	r3, #41	@ 0x29
 8003464:	d125      	bne.n	80034b2 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003466:	69fb      	ldr	r3, [r7, #28]
 8003468:	09db      	lsrs	r3, r3, #7
 800346a:	f003 0301 	and.w	r3, r3, #1
 800346e:	2b00      	cmp	r3, #0
 8003470:	d00f      	beq.n	8003492 <HAL_I2C_EV_IRQHandler+0x266>
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	0a9b      	lsrs	r3, r3, #10
 8003476:	f003 0301 	and.w	r3, r3, #1
 800347a:	2b00      	cmp	r3, #0
 800347c:	d009      	beq.n	8003492 <HAL_I2C_EV_IRQHandler+0x266>
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	089b      	lsrs	r3, r3, #2
 8003482:	f003 0301 	and.w	r3, r3, #1
 8003486:	2b00      	cmp	r3, #0
 8003488:	d103      	bne.n	8003492 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f000 fef8 	bl	8004280 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003490:	e039      	b.n	8003506 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003492:	69fb      	ldr	r3, [r7, #28]
 8003494:	089b      	lsrs	r3, r3, #2
 8003496:	f003 0301 	and.w	r3, r3, #1
 800349a:	2b00      	cmp	r3, #0
 800349c:	d033      	beq.n	8003506 <HAL_I2C_EV_IRQHandler+0x2da>
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	0a5b      	lsrs	r3, r3, #9
 80034a2:	f003 0301 	and.w	r3, r3, #1
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d02d      	beq.n	8003506 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f000 ff25 	bl	80042fa <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80034b0:	e029      	b.n	8003506 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80034b2:	69fb      	ldr	r3, [r7, #28]
 80034b4:	099b      	lsrs	r3, r3, #6
 80034b6:	f003 0301 	and.w	r3, r3, #1
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d00f      	beq.n	80034de <HAL_I2C_EV_IRQHandler+0x2b2>
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	0a9b      	lsrs	r3, r3, #10
 80034c2:	f003 0301 	and.w	r3, r3, #1
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d009      	beq.n	80034de <HAL_I2C_EV_IRQHandler+0x2b2>
 80034ca:	69fb      	ldr	r3, [r7, #28]
 80034cc:	089b      	lsrs	r3, r3, #2
 80034ce:	f003 0301 	and.w	r3, r3, #1
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d103      	bne.n	80034de <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f000 ff2f 	bl	800433a <I2C_SlaveReceive_RXNE>
 80034dc:	e014      	b.n	8003508 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80034de:	69fb      	ldr	r3, [r7, #28]
 80034e0:	089b      	lsrs	r3, r3, #2
 80034e2:	f003 0301 	and.w	r3, r3, #1
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d00e      	beq.n	8003508 <HAL_I2C_EV_IRQHandler+0x2dc>
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	0a5b      	lsrs	r3, r3, #9
 80034ee:	f003 0301 	and.w	r3, r3, #1
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d008      	beq.n	8003508 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f000 ff5d 	bl	80043b6 <I2C_SlaveReceive_BTF>
 80034fc:	e004      	b.n	8003508 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80034fe:	bf00      	nop
 8003500:	e002      	b.n	8003508 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003502:	bf00      	nop
 8003504:	e000      	b.n	8003508 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003506:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003508:	3720      	adds	r7, #32
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}

0800350e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800350e:	b580      	push	{r7, lr}
 8003510:	b08a      	sub	sp, #40	@ 0x28
 8003512:	af00      	add	r7, sp, #0
 8003514:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	695b      	ldr	r3, [r3, #20]
 800351c:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8003526:	2300      	movs	r3, #0
 8003528:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003530:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003532:	6a3b      	ldr	r3, [r7, #32]
 8003534:	0a1b      	lsrs	r3, r3, #8
 8003536:	f003 0301 	and.w	r3, r3, #1
 800353a:	2b00      	cmp	r3, #0
 800353c:	d016      	beq.n	800356c <HAL_I2C_ER_IRQHandler+0x5e>
 800353e:	69fb      	ldr	r3, [r7, #28]
 8003540:	0a1b      	lsrs	r3, r3, #8
 8003542:	f003 0301 	and.w	r3, r3, #1
 8003546:	2b00      	cmp	r3, #0
 8003548:	d010      	beq.n	800356c <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800354a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800354c:	f043 0301 	orr.w	r3, r3, #1
 8003550:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800355a:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800356a:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800356c:	6a3b      	ldr	r3, [r7, #32]
 800356e:	0a5b      	lsrs	r3, r3, #9
 8003570:	f003 0301 	and.w	r3, r3, #1
 8003574:	2b00      	cmp	r3, #0
 8003576:	d00e      	beq.n	8003596 <HAL_I2C_ER_IRQHandler+0x88>
 8003578:	69fb      	ldr	r3, [r7, #28]
 800357a:	0a1b      	lsrs	r3, r3, #8
 800357c:	f003 0301 	and.w	r3, r3, #1
 8003580:	2b00      	cmp	r3, #0
 8003582:	d008      	beq.n	8003596 <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003586:	f043 0302 	orr.w	r3, r3, #2
 800358a:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8003594:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003596:	6a3b      	ldr	r3, [r7, #32]
 8003598:	0a9b      	lsrs	r3, r3, #10
 800359a:	f003 0301 	and.w	r3, r3, #1
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d03f      	beq.n	8003622 <HAL_I2C_ER_IRQHandler+0x114>
 80035a2:	69fb      	ldr	r3, [r7, #28]
 80035a4:	0a1b      	lsrs	r3, r3, #8
 80035a6:	f003 0301 	and.w	r3, r3, #1
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d039      	beq.n	8003622 <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 80035ae:	7efb      	ldrb	r3, [r7, #27]
 80035b0:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035b6:	b29b      	uxth	r3, r3
 80035b8:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035c0:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035c6:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80035c8:	7ebb      	ldrb	r3, [r7, #26]
 80035ca:	2b20      	cmp	r3, #32
 80035cc:	d112      	bne.n	80035f4 <HAL_I2C_ER_IRQHandler+0xe6>
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d10f      	bne.n	80035f4 <HAL_I2C_ER_IRQHandler+0xe6>
 80035d4:	7cfb      	ldrb	r3, [r7, #19]
 80035d6:	2b21      	cmp	r3, #33	@ 0x21
 80035d8:	d008      	beq.n	80035ec <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80035da:	7cfb      	ldrb	r3, [r7, #19]
 80035dc:	2b29      	cmp	r3, #41	@ 0x29
 80035de:	d005      	beq.n	80035ec <HAL_I2C_ER_IRQHandler+0xde>
 80035e0:	7cfb      	ldrb	r3, [r7, #19]
 80035e2:	2b28      	cmp	r3, #40	@ 0x28
 80035e4:	d106      	bne.n	80035f4 <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2b21      	cmp	r3, #33	@ 0x21
 80035ea:	d103      	bne.n	80035f4 <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	f001 f87d 	bl	80046ec <I2C_Slave_AF>
 80035f2:	e016      	b.n	8003622 <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80035fc:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80035fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003600:	f043 0304 	orr.w	r3, r3, #4
 8003604:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003606:	7efb      	ldrb	r3, [r7, #27]
 8003608:	2b10      	cmp	r3, #16
 800360a:	d002      	beq.n	8003612 <HAL_I2C_ER_IRQHandler+0x104>
 800360c:	7efb      	ldrb	r3, [r7, #27]
 800360e:	2b40      	cmp	r3, #64	@ 0x40
 8003610:	d107      	bne.n	8003622 <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003620:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003622:	6a3b      	ldr	r3, [r7, #32]
 8003624:	0adb      	lsrs	r3, r3, #11
 8003626:	f003 0301 	and.w	r3, r3, #1
 800362a:	2b00      	cmp	r3, #0
 800362c:	d00e      	beq.n	800364c <HAL_I2C_ER_IRQHandler+0x13e>
 800362e:	69fb      	ldr	r3, [r7, #28]
 8003630:	0a1b      	lsrs	r3, r3, #8
 8003632:	f003 0301 	and.w	r3, r3, #1
 8003636:	2b00      	cmp	r3, #0
 8003638:	d008      	beq.n	800364c <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800363a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800363c:	f043 0308 	orr.w	r3, r3, #8
 8003640:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 800364a:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800364c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800364e:	2b00      	cmp	r3, #0
 8003650:	d008      	beq.n	8003664 <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003658:	431a      	orrs	r2, r3
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f001 f8b8 	bl	80047d4 <I2C_ITError>
  }
}
 8003664:	bf00      	nop
 8003666:	3728      	adds	r7, #40	@ 0x28
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}

0800366c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800366c:	b480      	push	{r7}
 800366e:	b083      	sub	sp, #12
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003674:	bf00      	nop
 8003676:	370c      	adds	r7, #12
 8003678:	46bd      	mov	sp, r7
 800367a:	bc80      	pop	{r7}
 800367c:	4770      	bx	lr

0800367e <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800367e:	b480      	push	{r7}
 8003680:	b083      	sub	sp, #12
 8003682:	af00      	add	r7, sp, #0
 8003684:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003686:	bf00      	nop
 8003688:	370c      	adds	r7, #12
 800368a:	46bd      	mov	sp, r7
 800368c:	bc80      	pop	{r7}
 800368e:	4770      	bx	lr

08003690 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003690:	b480      	push	{r7}
 8003692:	b083      	sub	sp, #12
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003698:	bf00      	nop
 800369a:	370c      	adds	r7, #12
 800369c:	46bd      	mov	sp, r7
 800369e:	bc80      	pop	{r7}
 80036a0:	4770      	bx	lr

080036a2 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80036a2:	b480      	push	{r7}
 80036a4:	b083      	sub	sp, #12
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80036aa:	bf00      	nop
 80036ac:	370c      	adds	r7, #12
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bc80      	pop	{r7}
 80036b2:	4770      	bx	lr

080036b4 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b083      	sub	sp, #12
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
 80036bc:	460b      	mov	r3, r1
 80036be:	70fb      	strb	r3, [r7, #3]
 80036c0:	4613      	mov	r3, r2
 80036c2:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80036c4:	bf00      	nop
 80036c6:	370c      	adds	r7, #12
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bc80      	pop	{r7}
 80036cc:	4770      	bx	lr

080036ce <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80036ce:	b480      	push	{r7}
 80036d0:	b083      	sub	sp, #12
 80036d2:	af00      	add	r7, sp, #0
 80036d4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80036d6:	bf00      	nop
 80036d8:	370c      	adds	r7, #12
 80036da:	46bd      	mov	sp, r7
 80036dc:	bc80      	pop	{r7}
 80036de:	4770      	bx	lr

080036e0 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b083      	sub	sp, #12
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80036e8:	bf00      	nop
 80036ea:	370c      	adds	r7, #12
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bc80      	pop	{r7}
 80036f0:	4770      	bx	lr

080036f2 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80036f2:	b480      	push	{r7}
 80036f4:	b083      	sub	sp, #12
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80036fa:	bf00      	nop
 80036fc:	370c      	adds	r7, #12
 80036fe:	46bd      	mov	sp, r7
 8003700:	bc80      	pop	{r7}
 8003702:	4770      	bx	lr

08003704 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003704:	b480      	push	{r7}
 8003706:	b083      	sub	sp, #12
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800370c:	bf00      	nop
 800370e:	370c      	adds	r7, #12
 8003710:	46bd      	mov	sp, r7
 8003712:	bc80      	pop	{r7}
 8003714:	4770      	bx	lr

08003716 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003716:	b480      	push	{r7}
 8003718:	b083      	sub	sp, #12
 800371a:	af00      	add	r7, sp, #0
 800371c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800371e:	bf00      	nop
 8003720:	370c      	adds	r7, #12
 8003722:	46bd      	mov	sp, r7
 8003724:	bc80      	pop	{r7}
 8003726:	4770      	bx	lr

08003728 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b084      	sub	sp, #16
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003736:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800373e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003744:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800374a:	2b00      	cmp	r3, #0
 800374c:	d150      	bne.n	80037f0 <I2C_MasterTransmit_TXE+0xc8>
 800374e:	7bfb      	ldrb	r3, [r7, #15]
 8003750:	2b21      	cmp	r3, #33	@ 0x21
 8003752:	d14d      	bne.n	80037f0 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	2b08      	cmp	r3, #8
 8003758:	d01d      	beq.n	8003796 <I2C_MasterTransmit_TXE+0x6e>
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	2b20      	cmp	r3, #32
 800375e:	d01a      	beq.n	8003796 <I2C_MasterTransmit_TXE+0x6e>
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003766:	d016      	beq.n	8003796 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	685a      	ldr	r2, [r3, #4]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003776:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2211      	movs	r2, #17
 800377c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2200      	movs	r2, #0
 8003782:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2220      	movs	r2, #32
 800378a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f7ff ff6c 	bl	800366c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003794:	e060      	b.n	8003858 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	685a      	ldr	r2, [r3, #4]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80037a4:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037b4:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2200      	movs	r2, #0
 80037ba:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2220      	movs	r2, #32
 80037c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80037ca:	b2db      	uxtb	r3, r3
 80037cc:	2b40      	cmp	r3, #64	@ 0x40
 80037ce:	d107      	bne.n	80037e0 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2200      	movs	r2, #0
 80037d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80037d8:	6878      	ldr	r0, [r7, #4]
 80037da:	f7ff ff81 	bl	80036e0 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80037de:	e03b      	b.n	8003858 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2200      	movs	r2, #0
 80037e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	f7ff ff3f 	bl	800366c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80037ee:	e033      	b.n	8003858 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80037f0:	7bfb      	ldrb	r3, [r7, #15]
 80037f2:	2b21      	cmp	r3, #33	@ 0x21
 80037f4:	d005      	beq.n	8003802 <I2C_MasterTransmit_TXE+0xda>
 80037f6:	7bbb      	ldrb	r3, [r7, #14]
 80037f8:	2b40      	cmp	r3, #64	@ 0x40
 80037fa:	d12d      	bne.n	8003858 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80037fc:	7bfb      	ldrb	r3, [r7, #15]
 80037fe:	2b22      	cmp	r3, #34	@ 0x22
 8003800:	d12a      	bne.n	8003858 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003806:	b29b      	uxth	r3, r3
 8003808:	2b00      	cmp	r3, #0
 800380a:	d108      	bne.n	800381e <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	685a      	ldr	r2, [r3, #4]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800381a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800381c:	e01c      	b.n	8003858 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003824:	b2db      	uxtb	r3, r3
 8003826:	2b40      	cmp	r3, #64	@ 0x40
 8003828:	d103      	bne.n	8003832 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f000 f88e 	bl	800394c <I2C_MemoryTransmit_TXE_BTF>
}
 8003830:	e012      	b.n	8003858 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003836:	781a      	ldrb	r2, [r3, #0]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003842:	1c5a      	adds	r2, r3, #1
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800384c:	b29b      	uxth	r3, r3
 800384e:	3b01      	subs	r3, #1
 8003850:	b29a      	uxth	r2, r3
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003856:	e7ff      	b.n	8003858 <I2C_MasterTransmit_TXE+0x130>
 8003858:	bf00      	nop
 800385a:	3710      	adds	r7, #16
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}

08003860 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b084      	sub	sp, #16
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800386c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003874:	b2db      	uxtb	r3, r3
 8003876:	2b21      	cmp	r3, #33	@ 0x21
 8003878:	d164      	bne.n	8003944 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800387e:	b29b      	uxth	r3, r3
 8003880:	2b00      	cmp	r3, #0
 8003882:	d012      	beq.n	80038aa <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003888:	781a      	ldrb	r2, [r3, #0]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003894:	1c5a      	adds	r2, r3, #1
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800389e:	b29b      	uxth	r3, r3
 80038a0:	3b01      	subs	r3, #1
 80038a2:	b29a      	uxth	r2, r3
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80038a8:	e04c      	b.n	8003944 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2b08      	cmp	r3, #8
 80038ae:	d01d      	beq.n	80038ec <I2C_MasterTransmit_BTF+0x8c>
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2b20      	cmp	r3, #32
 80038b4:	d01a      	beq.n	80038ec <I2C_MasterTransmit_BTF+0x8c>
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80038bc:	d016      	beq.n	80038ec <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	685a      	ldr	r2, [r3, #4]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80038cc:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2211      	movs	r2, #17
 80038d2:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2200      	movs	r2, #0
 80038d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2220      	movs	r2, #32
 80038e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	f7ff fec1 	bl	800366c <HAL_I2C_MasterTxCpltCallback>
}
 80038ea:	e02b      	b.n	8003944 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	685a      	ldr	r2, [r3, #4]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80038fa:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800390a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2200      	movs	r2, #0
 8003910:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2220      	movs	r2, #32
 8003916:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003920:	b2db      	uxtb	r3, r3
 8003922:	2b40      	cmp	r3, #64	@ 0x40
 8003924:	d107      	bne.n	8003936 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2200      	movs	r2, #0
 800392a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f7ff fed6 	bl	80036e0 <HAL_I2C_MemTxCpltCallback>
}
 8003934:	e006      	b.n	8003944 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2200      	movs	r2, #0
 800393a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f7ff fe94 	bl	800366c <HAL_I2C_MasterTxCpltCallback>
}
 8003944:	bf00      	nop
 8003946:	3710      	adds	r7, #16
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}

0800394c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b084      	sub	sp, #16
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800395a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003960:	2b00      	cmp	r3, #0
 8003962:	d11d      	bne.n	80039a0 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003968:	2b01      	cmp	r3, #1
 800396a:	d10b      	bne.n	8003984 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003970:	b2da      	uxtb	r2, r3
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800397c:	1c9a      	adds	r2, r3, #2
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8003982:	e077      	b.n	8003a74 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003988:	b29b      	uxth	r3, r3
 800398a:	121b      	asrs	r3, r3, #8
 800398c:	b2da      	uxtb	r2, r3
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003998:	1c5a      	adds	r2, r3, #1
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800399e:	e069      	b.n	8003a74 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d10b      	bne.n	80039c0 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039ac:	b2da      	uxtb	r2, r3
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039b8:	1c5a      	adds	r2, r3, #1
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80039be:	e059      	b.n	8003a74 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039c4:	2b02      	cmp	r3, #2
 80039c6:	d152      	bne.n	8003a6e <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80039c8:	7bfb      	ldrb	r3, [r7, #15]
 80039ca:	2b22      	cmp	r3, #34	@ 0x22
 80039cc:	d10d      	bne.n	80039ea <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80039dc:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039e2:	1c5a      	adds	r2, r3, #1
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80039e8:	e044      	b.n	8003a74 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039ee:	b29b      	uxth	r3, r3
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d015      	beq.n	8003a20 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80039f4:	7bfb      	ldrb	r3, [r7, #15]
 80039f6:	2b21      	cmp	r3, #33	@ 0x21
 80039f8:	d112      	bne.n	8003a20 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039fe:	781a      	ldrb	r2, [r3, #0]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a0a:	1c5a      	adds	r2, r3, #1
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a14:	b29b      	uxth	r3, r3
 8003a16:	3b01      	subs	r3, #1
 8003a18:	b29a      	uxth	r2, r3
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003a1e:	e029      	b.n	8003a74 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a24:	b29b      	uxth	r3, r3
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d124      	bne.n	8003a74 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8003a2a:	7bfb      	ldrb	r3, [r7, #15]
 8003a2c:	2b21      	cmp	r3, #33	@ 0x21
 8003a2e:	d121      	bne.n	8003a74 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	685a      	ldr	r2, [r3, #4]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003a3e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a4e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2200      	movs	r2, #0
 8003a54:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2220      	movs	r2, #32
 8003a5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2200      	movs	r2, #0
 8003a62:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f7ff fe3a 	bl	80036e0 <HAL_I2C_MemTxCpltCallback>
}
 8003a6c:	e002      	b.n	8003a74 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f7ff f85a 	bl	8002b28 <I2C_Flush_DR>
}
 8003a74:	bf00      	nop
 8003a76:	3710      	adds	r7, #16
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}

08003a7c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b084      	sub	sp, #16
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a8a:	b2db      	uxtb	r3, r3
 8003a8c:	2b22      	cmp	r3, #34	@ 0x22
 8003a8e:	f040 80b9 	bne.w	8003c04 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a96:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a9c:	b29b      	uxth	r3, r3
 8003a9e:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	2b03      	cmp	r3, #3
 8003aa4:	d921      	bls.n	8003aea <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	691a      	ldr	r2, [r3, #16]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ab0:	b2d2      	uxtb	r2, r2
 8003ab2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ab8:	1c5a      	adds	r2, r3, #1
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ac2:	b29b      	uxth	r3, r3
 8003ac4:	3b01      	subs	r3, #1
 8003ac6:	b29a      	uxth	r2, r3
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ad0:	b29b      	uxth	r3, r3
 8003ad2:	2b03      	cmp	r3, #3
 8003ad4:	f040 8096 	bne.w	8003c04 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	685a      	ldr	r2, [r3, #4]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ae6:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8003ae8:	e08c      	b.n	8003c04 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003aee:	2b02      	cmp	r3, #2
 8003af0:	d07f      	beq.n	8003bf2 <I2C_MasterReceive_RXNE+0x176>
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d002      	beq.n	8003afe <I2C_MasterReceive_RXNE+0x82>
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d179      	bne.n	8003bf2 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f001 fb6a 	bl	80051d8 <I2C_WaitOnSTOPRequestThroughIT>
 8003b04:	4603      	mov	r3, r0
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d14c      	bne.n	8003ba4 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b18:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	685a      	ldr	r2, [r3, #4]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003b28:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	691a      	ldr	r2, [r3, #16]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b34:	b2d2      	uxtb	r2, r2
 8003b36:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b3c:	1c5a      	adds	r2, r3, #1
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b46:	b29b      	uxth	r3, r3
 8003b48:	3b01      	subs	r3, #1
 8003b4a:	b29a      	uxth	r2, r3
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2220      	movs	r2, #32
 8003b54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003b5e:	b2db      	uxtb	r3, r3
 8003b60:	2b40      	cmp	r3, #64	@ 0x40
 8003b62:	d10a      	bne.n	8003b7a <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2200      	movs	r2, #0
 8003b68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f7ff fdbd 	bl	80036f2 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003b78:	e044      	b.n	8003c04 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2b08      	cmp	r3, #8
 8003b86:	d002      	beq.n	8003b8e <I2C_MasterReceive_RXNE+0x112>
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2b20      	cmp	r3, #32
 8003b8c:	d103      	bne.n	8003b96 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2200      	movs	r2, #0
 8003b92:	631a      	str	r2, [r3, #48]	@ 0x30
 8003b94:	e002      	b.n	8003b9c <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2212      	movs	r2, #18
 8003b9a:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003b9c:	6878      	ldr	r0, [r7, #4]
 8003b9e:	f7ff fd6e 	bl	800367e <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003ba2:	e02f      	b.n	8003c04 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	685a      	ldr	r2, [r3, #4]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003bb2:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	691a      	ldr	r2, [r3, #16]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bbe:	b2d2      	uxtb	r2, r2
 8003bc0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bc6:	1c5a      	adds	r2, r3, #1
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bd0:	b29b      	uxth	r3, r3
 8003bd2:	3b01      	subs	r3, #1
 8003bd4:	b29a      	uxth	r2, r3
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2220      	movs	r2, #32
 8003bde:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2200      	movs	r2, #0
 8003be6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f7ff fd8a 	bl	8003704 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003bf0:	e008      	b.n	8003c04 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	685a      	ldr	r2, [r3, #4]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c00:	605a      	str	r2, [r3, #4]
}
 8003c02:	e7ff      	b.n	8003c04 <I2C_MasterReceive_RXNE+0x188>
 8003c04:	bf00      	nop
 8003c06:	3710      	adds	r7, #16
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bd80      	pop	{r7, pc}

08003c0c <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b084      	sub	sp, #16
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c18:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c1e:	b29b      	uxth	r3, r3
 8003c20:	2b04      	cmp	r3, #4
 8003c22:	d11b      	bne.n	8003c5c <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	685a      	ldr	r2, [r3, #4]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c32:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	691a      	ldr	r2, [r3, #16]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c3e:	b2d2      	uxtb	r2, r2
 8003c40:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c46:	1c5a      	adds	r2, r3, #1
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c50:	b29b      	uxth	r3, r3
 8003c52:	3b01      	subs	r3, #1
 8003c54:	b29a      	uxth	r2, r3
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003c5a:	e0c4      	b.n	8003de6 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c60:	b29b      	uxth	r3, r3
 8003c62:	2b03      	cmp	r3, #3
 8003c64:	d129      	bne.n	8003cba <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	685a      	ldr	r2, [r3, #4]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c74:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2b04      	cmp	r3, #4
 8003c7a:	d00a      	beq.n	8003c92 <I2C_MasterReceive_BTF+0x86>
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2b02      	cmp	r3, #2
 8003c80:	d007      	beq.n	8003c92 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	681a      	ldr	r2, [r3, #0]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c90:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	691a      	ldr	r2, [r3, #16]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c9c:	b2d2      	uxtb	r2, r2
 8003c9e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ca4:	1c5a      	adds	r2, r3, #1
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cae:	b29b      	uxth	r3, r3
 8003cb0:	3b01      	subs	r3, #1
 8003cb2:	b29a      	uxth	r2, r3
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003cb8:	e095      	b.n	8003de6 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cbe:	b29b      	uxth	r3, r3
 8003cc0:	2b02      	cmp	r3, #2
 8003cc2:	d17d      	bne.n	8003dc0 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	d002      	beq.n	8003cd0 <I2C_MasterReceive_BTF+0xc4>
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2b10      	cmp	r3, #16
 8003cce:	d108      	bne.n	8003ce2 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003cde:	601a      	str	r2, [r3, #0]
 8003ce0:	e016      	b.n	8003d10 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2b04      	cmp	r3, #4
 8003ce6:	d002      	beq.n	8003cee <I2C_MasterReceive_BTF+0xe2>
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2b02      	cmp	r3, #2
 8003cec:	d108      	bne.n	8003d00 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003cfc:	601a      	str	r2, [r3, #0]
 8003cfe:	e007      	b.n	8003d10 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d0e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	691a      	ldr	r2, [r3, #16]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d1a:	b2d2      	uxtb	r2, r2
 8003d1c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d22:	1c5a      	adds	r2, r3, #1
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d2c:	b29b      	uxth	r3, r3
 8003d2e:	3b01      	subs	r3, #1
 8003d30:	b29a      	uxth	r2, r3
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	691a      	ldr	r2, [r3, #16]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d40:	b2d2      	uxtb	r2, r2
 8003d42:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d48:	1c5a      	adds	r2, r3, #1
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d52:	b29b      	uxth	r3, r3
 8003d54:	3b01      	subs	r3, #1
 8003d56:	b29a      	uxth	r2, r3
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	685a      	ldr	r2, [r3, #4]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003d6a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2220      	movs	r2, #32
 8003d70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003d7a:	b2db      	uxtb	r3, r3
 8003d7c:	2b40      	cmp	r3, #64	@ 0x40
 8003d7e:	d10a      	bne.n	8003d96 <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2200      	movs	r2, #0
 8003d84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f7ff fcaf 	bl	80036f2 <HAL_I2C_MemRxCpltCallback>
}
 8003d94:	e027      	b.n	8003de6 <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2b08      	cmp	r3, #8
 8003da2:	d002      	beq.n	8003daa <I2C_MasterReceive_BTF+0x19e>
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2b20      	cmp	r3, #32
 8003da8:	d103      	bne.n	8003db2 <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2200      	movs	r2, #0
 8003dae:	631a      	str	r2, [r3, #48]	@ 0x30
 8003db0:	e002      	b.n	8003db8 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2212      	movs	r2, #18
 8003db6:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003db8:	6878      	ldr	r0, [r7, #4]
 8003dba:	f7ff fc60 	bl	800367e <HAL_I2C_MasterRxCpltCallback>
}
 8003dbe:	e012      	b.n	8003de6 <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	691a      	ldr	r2, [r3, #16]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dca:	b2d2      	uxtb	r2, r2
 8003dcc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dd2:	1c5a      	adds	r2, r3, #1
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ddc:	b29b      	uxth	r3, r3
 8003dde:	3b01      	subs	r3, #1
 8003de0:	b29a      	uxth	r2, r3
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003de6:	bf00      	nop
 8003de8:	3710      	adds	r7, #16
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}

08003dee <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003dee:	b480      	push	{r7}
 8003df0:	b083      	sub	sp, #12
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003dfc:	b2db      	uxtb	r3, r3
 8003dfe:	2b40      	cmp	r3, #64	@ 0x40
 8003e00:	d117      	bne.n	8003e32 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d109      	bne.n	8003e1e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e0e:	b2db      	uxtb	r3, r3
 8003e10:	461a      	mov	r2, r3
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003e1a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003e1c:	e067      	b.n	8003eee <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e22:	b2db      	uxtb	r3, r3
 8003e24:	f043 0301 	orr.w	r3, r3, #1
 8003e28:	b2da      	uxtb	r2, r3
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	611a      	str	r2, [r3, #16]
}
 8003e30:	e05d      	b.n	8003eee <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	691b      	ldr	r3, [r3, #16]
 8003e36:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003e3a:	d133      	bne.n	8003ea4 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e42:	b2db      	uxtb	r3, r3
 8003e44:	2b21      	cmp	r3, #33	@ 0x21
 8003e46:	d109      	bne.n	8003e5c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e4c:	b2db      	uxtb	r3, r3
 8003e4e:	461a      	mov	r2, r3
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003e58:	611a      	str	r2, [r3, #16]
 8003e5a:	e008      	b.n	8003e6e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	f043 0301 	orr.w	r3, r3, #1
 8003e66:	b2da      	uxtb	r2, r3
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d004      	beq.n	8003e80 <I2C_Master_SB+0x92>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d108      	bne.n	8003e92 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d032      	beq.n	8003eee <I2C_Master_SB+0x100>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d02d      	beq.n	8003eee <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	685a      	ldr	r2, [r3, #4]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003ea0:	605a      	str	r2, [r3, #4]
}
 8003ea2:	e024      	b.n	8003eee <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d10e      	bne.n	8003eca <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003eb0:	b29b      	uxth	r3, r3
 8003eb2:	11db      	asrs	r3, r3, #7
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	f003 0306 	and.w	r3, r3, #6
 8003eba:	b2db      	uxtb	r3, r3
 8003ebc:	f063 030f 	orn	r3, r3, #15
 8003ec0:	b2da      	uxtb	r2, r3
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	611a      	str	r2, [r3, #16]
}
 8003ec8:	e011      	b.n	8003eee <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	d10d      	bne.n	8003eee <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ed6:	b29b      	uxth	r3, r3
 8003ed8:	11db      	asrs	r3, r3, #7
 8003eda:	b2db      	uxtb	r3, r3
 8003edc:	f003 0306 	and.w	r3, r3, #6
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	f063 030e 	orn	r3, r3, #14
 8003ee6:	b2da      	uxtb	r2, r3
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	611a      	str	r2, [r3, #16]
}
 8003eee:	bf00      	nop
 8003ef0:	370c      	adds	r7, #12
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bc80      	pop	{r7}
 8003ef6:	4770      	bx	lr

08003ef8 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b083      	sub	sp, #12
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f04:	b2da      	uxtb	r2, r3
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d004      	beq.n	8003f1e <I2C_Master_ADD10+0x26>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d108      	bne.n	8003f30 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d00c      	beq.n	8003f40 <I2C_Master_ADD10+0x48>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d007      	beq.n	8003f40 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	685a      	ldr	r2, [r3, #4]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003f3e:	605a      	str	r2, [r3, #4]
  }
}
 8003f40:	bf00      	nop
 8003f42:	370c      	adds	r7, #12
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bc80      	pop	{r7}
 8003f48:	4770      	bx	lr

08003f4a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003f4a:	b480      	push	{r7}
 8003f4c:	b091      	sub	sp, #68	@ 0x44
 8003f4e:	af00      	add	r7, sp, #0
 8003f50:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003f58:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f60:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f66:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f6e:	b2db      	uxtb	r3, r3
 8003f70:	2b22      	cmp	r3, #34	@ 0x22
 8003f72:	f040 8174 	bne.w	800425e <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d10f      	bne.n	8003f9e <I2C_Master_ADDR+0x54>
 8003f7e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8003f82:	2b40      	cmp	r3, #64	@ 0x40
 8003f84:	d10b      	bne.n	8003f9e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f86:	2300      	movs	r3, #0
 8003f88:	633b      	str	r3, [r7, #48]	@ 0x30
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	695b      	ldr	r3, [r3, #20]
 8003f90:	633b      	str	r3, [r7, #48]	@ 0x30
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	699b      	ldr	r3, [r3, #24]
 8003f98:	633b      	str	r3, [r7, #48]	@ 0x30
 8003f9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f9c:	e16b      	b.n	8004276 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d11d      	bne.n	8003fe2 <I2C_Master_ADDR+0x98>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	691b      	ldr	r3, [r3, #16]
 8003faa:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003fae:	d118      	bne.n	8003fe2 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	695b      	ldr	r3, [r3, #20]
 8003fba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	699b      	ldr	r3, [r3, #24]
 8003fc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003fc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003fd4:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fda:	1c5a      	adds	r2, r3, #1
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	651a      	str	r2, [r3, #80]	@ 0x50
 8003fe0:	e149      	b.n	8004276 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fe6:	b29b      	uxth	r3, r3
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d113      	bne.n	8004014 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fec:	2300      	movs	r3, #0
 8003fee:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	695b      	ldr	r3, [r3, #20]
 8003ff6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	699b      	ldr	r3, [r3, #24]
 8003ffe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004000:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004010:	601a      	str	r2, [r3, #0]
 8004012:	e120      	b.n	8004256 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004018:	b29b      	uxth	r3, r3
 800401a:	2b01      	cmp	r3, #1
 800401c:	f040 808a 	bne.w	8004134 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004020:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004022:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004026:	d137      	bne.n	8004098 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004036:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004042:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004046:	d113      	bne.n	8004070 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004056:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004058:	2300      	movs	r3, #0
 800405a:	627b      	str	r3, [r7, #36]	@ 0x24
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	695b      	ldr	r3, [r3, #20]
 8004062:	627b      	str	r3, [r7, #36]	@ 0x24
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	699b      	ldr	r3, [r3, #24]
 800406a:	627b      	str	r3, [r7, #36]	@ 0x24
 800406c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800406e:	e0f2      	b.n	8004256 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004070:	2300      	movs	r3, #0
 8004072:	623b      	str	r3, [r7, #32]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	695b      	ldr	r3, [r3, #20]
 800407a:	623b      	str	r3, [r7, #32]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	699b      	ldr	r3, [r3, #24]
 8004082:	623b      	str	r3, [r7, #32]
 8004084:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004094:	601a      	str	r2, [r3, #0]
 8004096:	e0de      	b.n	8004256 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004098:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800409a:	2b08      	cmp	r3, #8
 800409c:	d02e      	beq.n	80040fc <I2C_Master_ADDR+0x1b2>
 800409e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040a0:	2b20      	cmp	r3, #32
 80040a2:	d02b      	beq.n	80040fc <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80040a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040a6:	2b12      	cmp	r3, #18
 80040a8:	d102      	bne.n	80040b0 <I2C_Master_ADDR+0x166>
 80040aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	d125      	bne.n	80040fc <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80040b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040b2:	2b04      	cmp	r3, #4
 80040b4:	d00e      	beq.n	80040d4 <I2C_Master_ADDR+0x18a>
 80040b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040b8:	2b02      	cmp	r3, #2
 80040ba:	d00b      	beq.n	80040d4 <I2C_Master_ADDR+0x18a>
 80040bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040be:	2b10      	cmp	r3, #16
 80040c0:	d008      	beq.n	80040d4 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80040d0:	601a      	str	r2, [r3, #0]
 80040d2:	e007      	b.n	80040e4 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80040e2:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040e4:	2300      	movs	r3, #0
 80040e6:	61fb      	str	r3, [r7, #28]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	695b      	ldr	r3, [r3, #20]
 80040ee:	61fb      	str	r3, [r7, #28]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	699b      	ldr	r3, [r3, #24]
 80040f6:	61fb      	str	r3, [r7, #28]
 80040f8:	69fb      	ldr	r3, [r7, #28]
 80040fa:	e0ac      	b.n	8004256 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800410a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800410c:	2300      	movs	r3, #0
 800410e:	61bb      	str	r3, [r7, #24]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	695b      	ldr	r3, [r3, #20]
 8004116:	61bb      	str	r3, [r7, #24]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	699b      	ldr	r3, [r3, #24]
 800411e:	61bb      	str	r3, [r7, #24]
 8004120:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	681a      	ldr	r2, [r3, #0]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004130:	601a      	str	r2, [r3, #0]
 8004132:	e090      	b.n	8004256 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004138:	b29b      	uxth	r3, r3
 800413a:	2b02      	cmp	r3, #2
 800413c:	d158      	bne.n	80041f0 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800413e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004140:	2b04      	cmp	r3, #4
 8004142:	d021      	beq.n	8004188 <I2C_Master_ADDR+0x23e>
 8004144:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004146:	2b02      	cmp	r3, #2
 8004148:	d01e      	beq.n	8004188 <I2C_Master_ADDR+0x23e>
 800414a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800414c:	2b10      	cmp	r3, #16
 800414e:	d01b      	beq.n	8004188 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800415e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004160:	2300      	movs	r3, #0
 8004162:	617b      	str	r3, [r7, #20]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	695b      	ldr	r3, [r3, #20]
 800416a:	617b      	str	r3, [r7, #20]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	699b      	ldr	r3, [r3, #24]
 8004172:	617b      	str	r3, [r7, #20]
 8004174:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	681a      	ldr	r2, [r3, #0]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004184:	601a      	str	r2, [r3, #0]
 8004186:	e012      	b.n	80041ae <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	681a      	ldr	r2, [r3, #0]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004196:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004198:	2300      	movs	r3, #0
 800419a:	613b      	str	r3, [r7, #16]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	695b      	ldr	r3, [r3, #20]
 80041a2:	613b      	str	r3, [r7, #16]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	699b      	ldr	r3, [r3, #24]
 80041aa:	613b      	str	r3, [r7, #16]
 80041ac:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80041b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80041bc:	d14b      	bne.n	8004256 <I2C_Master_ADDR+0x30c>
 80041be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041c0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80041c4:	d00b      	beq.n	80041de <I2C_Master_ADDR+0x294>
 80041c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	d008      	beq.n	80041de <I2C_Master_ADDR+0x294>
 80041cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041ce:	2b08      	cmp	r3, #8
 80041d0:	d005      	beq.n	80041de <I2C_Master_ADDR+0x294>
 80041d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041d4:	2b10      	cmp	r3, #16
 80041d6:	d002      	beq.n	80041de <I2C_Master_ADDR+0x294>
 80041d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041da:	2b20      	cmp	r3, #32
 80041dc:	d13b      	bne.n	8004256 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	685a      	ldr	r2, [r3, #4]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80041ec:	605a      	str	r2, [r3, #4]
 80041ee:	e032      	b.n	8004256 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	681a      	ldr	r2, [r3, #0]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80041fe:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800420a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800420e:	d117      	bne.n	8004240 <I2C_Master_ADDR+0x2f6>
 8004210:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004212:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004216:	d00b      	beq.n	8004230 <I2C_Master_ADDR+0x2e6>
 8004218:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800421a:	2b01      	cmp	r3, #1
 800421c:	d008      	beq.n	8004230 <I2C_Master_ADDR+0x2e6>
 800421e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004220:	2b08      	cmp	r3, #8
 8004222:	d005      	beq.n	8004230 <I2C_Master_ADDR+0x2e6>
 8004224:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004226:	2b10      	cmp	r3, #16
 8004228:	d002      	beq.n	8004230 <I2C_Master_ADDR+0x2e6>
 800422a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800422c:	2b20      	cmp	r3, #32
 800422e:	d107      	bne.n	8004240 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	685a      	ldr	r2, [r3, #4]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800423e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004240:	2300      	movs	r3, #0
 8004242:	60fb      	str	r3, [r7, #12]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	695b      	ldr	r3, [r3, #20]
 800424a:	60fb      	str	r3, [r7, #12]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	699b      	ldr	r3, [r3, #24]
 8004252:	60fb      	str	r3, [r7, #12]
 8004254:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2200      	movs	r2, #0
 800425a:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800425c:	e00b      	b.n	8004276 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800425e:	2300      	movs	r3, #0
 8004260:	60bb      	str	r3, [r7, #8]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	695b      	ldr	r3, [r3, #20]
 8004268:	60bb      	str	r3, [r7, #8]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	699b      	ldr	r3, [r3, #24]
 8004270:	60bb      	str	r3, [r7, #8]
 8004272:	68bb      	ldr	r3, [r7, #8]
}
 8004274:	e7ff      	b.n	8004276 <I2C_Master_ADDR+0x32c>
 8004276:	bf00      	nop
 8004278:	3744      	adds	r7, #68	@ 0x44
 800427a:	46bd      	mov	sp, r7
 800427c:	bc80      	pop	{r7}
 800427e:	4770      	bx	lr

08004280 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b084      	sub	sp, #16
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800428e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004294:	b29b      	uxth	r3, r3
 8004296:	2b00      	cmp	r3, #0
 8004298:	d02b      	beq.n	80042f2 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800429e:	781a      	ldrb	r2, [r3, #0]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042aa:	1c5a      	adds	r2, r3, #1
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042b4:	b29b      	uxth	r3, r3
 80042b6:	3b01      	subs	r3, #1
 80042b8:	b29a      	uxth	r2, r3
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042c2:	b29b      	uxth	r3, r3
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d114      	bne.n	80042f2 <I2C_SlaveTransmit_TXE+0x72>
 80042c8:	7bfb      	ldrb	r3, [r7, #15]
 80042ca:	2b29      	cmp	r3, #41	@ 0x29
 80042cc:	d111      	bne.n	80042f2 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	685a      	ldr	r2, [r3, #4]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80042dc:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2221      	movs	r2, #33	@ 0x21
 80042e2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2228      	movs	r2, #40	@ 0x28
 80042e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80042ec:	6878      	ldr	r0, [r7, #4]
 80042ee:	f7ff f9cf 	bl	8003690 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80042f2:	bf00      	nop
 80042f4:	3710      	adds	r7, #16
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}

080042fa <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80042fa:	b480      	push	{r7}
 80042fc:	b083      	sub	sp, #12
 80042fe:	af00      	add	r7, sp, #0
 8004300:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004306:	b29b      	uxth	r3, r3
 8004308:	2b00      	cmp	r3, #0
 800430a:	d011      	beq.n	8004330 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004310:	781a      	ldrb	r2, [r3, #0]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800431c:	1c5a      	adds	r2, r3, #1
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004326:	b29b      	uxth	r3, r3
 8004328:	3b01      	subs	r3, #1
 800432a:	b29a      	uxth	r2, r3
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8004330:	bf00      	nop
 8004332:	370c      	adds	r7, #12
 8004334:	46bd      	mov	sp, r7
 8004336:	bc80      	pop	{r7}
 8004338:	4770      	bx	lr

0800433a <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800433a:	b580      	push	{r7, lr}
 800433c:	b084      	sub	sp, #16
 800433e:	af00      	add	r7, sp, #0
 8004340:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004348:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800434e:	b29b      	uxth	r3, r3
 8004350:	2b00      	cmp	r3, #0
 8004352:	d02c      	beq.n	80043ae <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	691a      	ldr	r2, [r3, #16]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800435e:	b2d2      	uxtb	r2, r2
 8004360:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004366:	1c5a      	adds	r2, r3, #1
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004370:	b29b      	uxth	r3, r3
 8004372:	3b01      	subs	r3, #1
 8004374:	b29a      	uxth	r2, r3
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800437e:	b29b      	uxth	r3, r3
 8004380:	2b00      	cmp	r3, #0
 8004382:	d114      	bne.n	80043ae <I2C_SlaveReceive_RXNE+0x74>
 8004384:	7bfb      	ldrb	r3, [r7, #15]
 8004386:	2b2a      	cmp	r3, #42	@ 0x2a
 8004388:	d111      	bne.n	80043ae <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	685a      	ldr	r2, [r3, #4]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004398:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2222      	movs	r2, #34	@ 0x22
 800439e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2228      	movs	r2, #40	@ 0x28
 80043a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80043a8:	6878      	ldr	r0, [r7, #4]
 80043aa:	f7ff f97a 	bl	80036a2 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80043ae:	bf00      	nop
 80043b0:	3710      	adds	r7, #16
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}

080043b6 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80043b6:	b480      	push	{r7}
 80043b8:	b083      	sub	sp, #12
 80043ba:	af00      	add	r7, sp, #0
 80043bc:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043c2:	b29b      	uxth	r3, r3
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d012      	beq.n	80043ee <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	691a      	ldr	r2, [r3, #16]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043d2:	b2d2      	uxtb	r2, r2
 80043d4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043da:	1c5a      	adds	r2, r3, #1
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043e4:	b29b      	uxth	r3, r3
 80043e6:	3b01      	subs	r3, #1
 80043e8:	b29a      	uxth	r2, r3
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80043ee:	bf00      	nop
 80043f0:	370c      	adds	r7, #12
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bc80      	pop	{r7}
 80043f6:	4770      	bx	lr

080043f8 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b084      	sub	sp, #16
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
 8004400:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004402:	2300      	movs	r3, #0
 8004404:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800440c:	b2db      	uxtb	r3, r3
 800440e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004412:	2b28      	cmp	r3, #40	@ 0x28
 8004414:	d127      	bne.n	8004466 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	685a      	ldr	r2, [r3, #4]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004424:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	089b      	lsrs	r3, r3, #2
 800442a:	f003 0301 	and.w	r3, r3, #1
 800442e:	2b00      	cmp	r3, #0
 8004430:	d101      	bne.n	8004436 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004432:	2301      	movs	r3, #1
 8004434:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	09db      	lsrs	r3, r3, #7
 800443a:	f003 0301 	and.w	r3, r3, #1
 800443e:	2b00      	cmp	r3, #0
 8004440:	d103      	bne.n	800444a <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	68db      	ldr	r3, [r3, #12]
 8004446:	81bb      	strh	r3, [r7, #12]
 8004448:	e002      	b.n	8004450 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	699b      	ldr	r3, [r3, #24]
 800444e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2200      	movs	r2, #0
 8004454:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004458:	89ba      	ldrh	r2, [r7, #12]
 800445a:	7bfb      	ldrb	r3, [r7, #15]
 800445c:	4619      	mov	r1, r3
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f7ff f928 	bl	80036b4 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004464:	e00e      	b.n	8004484 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004466:	2300      	movs	r3, #0
 8004468:	60bb      	str	r3, [r7, #8]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	695b      	ldr	r3, [r3, #20]
 8004470:	60bb      	str	r3, [r7, #8]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	699b      	ldr	r3, [r3, #24]
 8004478:	60bb      	str	r3, [r7, #8]
 800447a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2200      	movs	r2, #0
 8004480:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8004484:	bf00      	nop
 8004486:	3710      	adds	r7, #16
 8004488:	46bd      	mov	sp, r7
 800448a:	bd80      	pop	{r7, pc}

0800448c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b084      	sub	sp, #16
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800449a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	685a      	ldr	r2, [r3, #4]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80044aa:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80044ac:	2300      	movs	r3, #0
 80044ae:	60bb      	str	r3, [r7, #8]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	695b      	ldr	r3, [r3, #20]
 80044b6:	60bb      	str	r3, [r7, #8]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	681a      	ldr	r2, [r3, #0]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f042 0201 	orr.w	r2, r2, #1
 80044c6:	601a      	str	r2, [r3, #0]
 80044c8:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80044d8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80044e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80044e8:	d172      	bne.n	80045d0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80044ea:	7bfb      	ldrb	r3, [r7, #15]
 80044ec:	2b22      	cmp	r3, #34	@ 0x22
 80044ee:	d002      	beq.n	80044f6 <I2C_Slave_STOPF+0x6a>
 80044f0:	7bfb      	ldrb	r3, [r7, #15]
 80044f2:	2b2a      	cmp	r3, #42	@ 0x2a
 80044f4:	d135      	bne.n	8004562 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	b29a      	uxth	r2, r3
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004508:	b29b      	uxth	r3, r3
 800450a:	2b00      	cmp	r3, #0
 800450c:	d005      	beq.n	800451a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004512:	f043 0204 	orr.w	r2, r3, #4
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	685a      	ldr	r2, [r3, #4]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004528:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800452e:	4618      	mov	r0, r3
 8004530:	f7fd ffc4 	bl	80024bc <HAL_DMA_GetState>
 8004534:	4603      	mov	r3, r0
 8004536:	2b01      	cmp	r3, #1
 8004538:	d049      	beq.n	80045ce <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800453e:	4a69      	ldr	r2, [pc, #420]	@ (80046e4 <I2C_Slave_STOPF+0x258>)
 8004540:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004546:	4618      	mov	r0, r3
 8004548:	f7fd ff40 	bl	80023cc <HAL_DMA_Abort_IT>
 800454c:	4603      	mov	r3, r0
 800454e:	2b00      	cmp	r3, #0
 8004550:	d03d      	beq.n	80045ce <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004556:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004558:	687a      	ldr	r2, [r7, #4]
 800455a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800455c:	4610      	mov	r0, r2
 800455e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004560:	e035      	b.n	80045ce <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	b29a      	uxth	r2, r3
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004574:	b29b      	uxth	r3, r3
 8004576:	2b00      	cmp	r3, #0
 8004578:	d005      	beq.n	8004586 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800457e:	f043 0204 	orr.w	r2, r3, #4
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	685a      	ldr	r2, [r3, #4]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004594:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800459a:	4618      	mov	r0, r3
 800459c:	f7fd ff8e 	bl	80024bc <HAL_DMA_GetState>
 80045a0:	4603      	mov	r3, r0
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d014      	beq.n	80045d0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045aa:	4a4e      	ldr	r2, [pc, #312]	@ (80046e4 <I2C_Slave_STOPF+0x258>)
 80045ac:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045b2:	4618      	mov	r0, r3
 80045b4:	f7fd ff0a 	bl	80023cc <HAL_DMA_Abort_IT>
 80045b8:	4603      	mov	r3, r0
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d008      	beq.n	80045d0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045c4:	687a      	ldr	r2, [r7, #4]
 80045c6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80045c8:	4610      	mov	r0, r2
 80045ca:	4798      	blx	r3
 80045cc:	e000      	b.n	80045d0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80045ce:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045d4:	b29b      	uxth	r3, r3
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d03e      	beq.n	8004658 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	695b      	ldr	r3, [r3, #20]
 80045e0:	f003 0304 	and.w	r3, r3, #4
 80045e4:	2b04      	cmp	r3, #4
 80045e6:	d112      	bne.n	800460e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	691a      	ldr	r2, [r3, #16]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045f2:	b2d2      	uxtb	r2, r2
 80045f4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045fa:	1c5a      	adds	r2, r3, #1
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004604:	b29b      	uxth	r3, r3
 8004606:	3b01      	subs	r3, #1
 8004608:	b29a      	uxth	r2, r3
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	695b      	ldr	r3, [r3, #20]
 8004614:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004618:	2b40      	cmp	r3, #64	@ 0x40
 800461a:	d112      	bne.n	8004642 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	691a      	ldr	r2, [r3, #16]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004626:	b2d2      	uxtb	r2, r2
 8004628:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800462e:	1c5a      	adds	r2, r3, #1
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004638:	b29b      	uxth	r3, r3
 800463a:	3b01      	subs	r3, #1
 800463c:	b29a      	uxth	r2, r3
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004646:	b29b      	uxth	r3, r3
 8004648:	2b00      	cmp	r3, #0
 800464a:	d005      	beq.n	8004658 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004650:	f043 0204 	orr.w	r2, r3, #4
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800465c:	2b00      	cmp	r3, #0
 800465e:	d003      	beq.n	8004668 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004660:	6878      	ldr	r0, [r7, #4]
 8004662:	f000 f8b7 	bl	80047d4 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004666:	e039      	b.n	80046dc <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004668:	7bfb      	ldrb	r3, [r7, #15]
 800466a:	2b2a      	cmp	r3, #42	@ 0x2a
 800466c:	d109      	bne.n	8004682 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2200      	movs	r2, #0
 8004672:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2228      	movs	r2, #40	@ 0x28
 8004678:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800467c:	6878      	ldr	r0, [r7, #4]
 800467e:	f7ff f810 	bl	80036a2 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004688:	b2db      	uxtb	r3, r3
 800468a:	2b28      	cmp	r3, #40	@ 0x28
 800468c:	d111      	bne.n	80046b2 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	4a15      	ldr	r2, [pc, #84]	@ (80046e8 <I2C_Slave_STOPF+0x25c>)
 8004692:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2200      	movs	r2, #0
 8004698:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2220      	movs	r2, #32
 800469e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2200      	movs	r2, #0
 80046a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	f7ff f80f 	bl	80036ce <HAL_I2C_ListenCpltCallback>
}
 80046b0:	e014      	b.n	80046dc <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046b6:	2b22      	cmp	r3, #34	@ 0x22
 80046b8:	d002      	beq.n	80046c0 <I2C_Slave_STOPF+0x234>
 80046ba:	7bfb      	ldrb	r3, [r7, #15]
 80046bc:	2b22      	cmp	r3, #34	@ 0x22
 80046be:	d10d      	bne.n	80046dc <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2200      	movs	r2, #0
 80046c4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2220      	movs	r2, #32
 80046ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2200      	movs	r2, #0
 80046d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f7fe ffe3 	bl	80036a2 <HAL_I2C_SlaveRxCpltCallback>
}
 80046dc:	bf00      	nop
 80046de:	3710      	adds	r7, #16
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}
 80046e4:	08004d35 	.word	0x08004d35
 80046e8:	ffff0000 	.word	0xffff0000

080046ec <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b084      	sub	sp, #16
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046fa:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004700:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	2b08      	cmp	r3, #8
 8004706:	d002      	beq.n	800470e <I2C_Slave_AF+0x22>
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	2b20      	cmp	r3, #32
 800470c:	d129      	bne.n	8004762 <I2C_Slave_AF+0x76>
 800470e:	7bfb      	ldrb	r3, [r7, #15]
 8004710:	2b28      	cmp	r3, #40	@ 0x28
 8004712:	d126      	bne.n	8004762 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	4a2e      	ldr	r2, [pc, #184]	@ (80047d0 <I2C_Slave_AF+0xe4>)
 8004718:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	685a      	ldr	r2, [r3, #4]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004728:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004732:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	681a      	ldr	r2, [r3, #0]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004742:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2200      	movs	r2, #0
 8004748:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2220      	movs	r2, #32
 800474e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2200      	movs	r2, #0
 8004756:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f7fe ffb7 	bl	80036ce <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8004760:	e031      	b.n	80047c6 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004762:	7bfb      	ldrb	r3, [r7, #15]
 8004764:	2b21      	cmp	r3, #33	@ 0x21
 8004766:	d129      	bne.n	80047bc <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	4a19      	ldr	r2, [pc, #100]	@ (80047d0 <I2C_Slave_AF+0xe4>)
 800476c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2221      	movs	r2, #33	@ 0x21
 8004772:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2220      	movs	r2, #32
 8004778:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2200      	movs	r2, #0
 8004780:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	685a      	ldr	r2, [r3, #4]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004792:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800479c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	681a      	ldr	r2, [r3, #0]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80047ac:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f7fe f9ba 	bl	8002b28 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80047b4:	6878      	ldr	r0, [r7, #4]
 80047b6:	f7fe ff6b 	bl	8003690 <HAL_I2C_SlaveTxCpltCallback>
}
 80047ba:	e004      	b.n	80047c6 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80047c4:	615a      	str	r2, [r3, #20]
}
 80047c6:	bf00      	nop
 80047c8:	3710      	adds	r7, #16
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}
 80047ce:	bf00      	nop
 80047d0:	ffff0000 	.word	0xffff0000

080047d4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b084      	sub	sp, #16
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047e2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80047ea:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80047ec:	7bbb      	ldrb	r3, [r7, #14]
 80047ee:	2b10      	cmp	r3, #16
 80047f0:	d002      	beq.n	80047f8 <I2C_ITError+0x24>
 80047f2:	7bbb      	ldrb	r3, [r7, #14]
 80047f4:	2b40      	cmp	r3, #64	@ 0x40
 80047f6:	d10a      	bne.n	800480e <I2C_ITError+0x3a>
 80047f8:	7bfb      	ldrb	r3, [r7, #15]
 80047fa:	2b22      	cmp	r3, #34	@ 0x22
 80047fc:	d107      	bne.n	800480e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	681a      	ldr	r2, [r3, #0]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800480c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800480e:	7bfb      	ldrb	r3, [r7, #15]
 8004810:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004814:	2b28      	cmp	r3, #40	@ 0x28
 8004816:	d107      	bne.n	8004828 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2200      	movs	r2, #0
 800481c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2228      	movs	r2, #40	@ 0x28
 8004822:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004826:	e015      	b.n	8004854 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004832:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004836:	d00a      	beq.n	800484e <I2C_ITError+0x7a>
 8004838:	7bfb      	ldrb	r3, [r7, #15]
 800483a:	2b60      	cmp	r3, #96	@ 0x60
 800483c:	d007      	beq.n	800484e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2220      	movs	r2, #32
 8004842:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2200      	movs	r2, #0
 800484a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2200      	movs	r2, #0
 8004852:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800485e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004862:	d162      	bne.n	800492a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	685a      	ldr	r2, [r3, #4]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004872:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004878:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800487c:	b2db      	uxtb	r3, r3
 800487e:	2b01      	cmp	r3, #1
 8004880:	d020      	beq.n	80048c4 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004886:	4a6a      	ldr	r2, [pc, #424]	@ (8004a30 <I2C_ITError+0x25c>)
 8004888:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800488e:	4618      	mov	r0, r3
 8004890:	f7fd fd9c 	bl	80023cc <HAL_DMA_Abort_IT>
 8004894:	4603      	mov	r3, r0
 8004896:	2b00      	cmp	r3, #0
 8004898:	f000 8089 	beq.w	80049ae <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f022 0201 	bic.w	r2, r2, #1
 80048aa:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2220      	movs	r2, #32
 80048b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048ba:	687a      	ldr	r2, [r7, #4]
 80048bc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80048be:	4610      	mov	r0, r2
 80048c0:	4798      	blx	r3
 80048c2:	e074      	b.n	80049ae <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048c8:	4a59      	ldr	r2, [pc, #356]	@ (8004a30 <I2C_ITError+0x25c>)
 80048ca:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048d0:	4618      	mov	r0, r3
 80048d2:	f7fd fd7b 	bl	80023cc <HAL_DMA_Abort_IT>
 80048d6:	4603      	mov	r3, r0
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d068      	beq.n	80049ae <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	695b      	ldr	r3, [r3, #20]
 80048e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048e6:	2b40      	cmp	r3, #64	@ 0x40
 80048e8:	d10b      	bne.n	8004902 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	691a      	ldr	r2, [r3, #16]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048f4:	b2d2      	uxtb	r2, r2
 80048f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048fc:	1c5a      	adds	r2, r3, #1
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	681a      	ldr	r2, [r3, #0]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f022 0201 	bic.w	r2, r2, #1
 8004910:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2220      	movs	r2, #32
 8004916:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800491e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004920:	687a      	ldr	r2, [r7, #4]
 8004922:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004924:	4610      	mov	r0, r2
 8004926:	4798      	blx	r3
 8004928:	e041      	b.n	80049ae <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004930:	b2db      	uxtb	r3, r3
 8004932:	2b60      	cmp	r3, #96	@ 0x60
 8004934:	d125      	bne.n	8004982 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2220      	movs	r2, #32
 800493a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2200      	movs	r2, #0
 8004942:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	695b      	ldr	r3, [r3, #20]
 800494a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800494e:	2b40      	cmp	r3, #64	@ 0x40
 8004950:	d10b      	bne.n	800496a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	691a      	ldr	r2, [r3, #16]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800495c:	b2d2      	uxtb	r2, r2
 800495e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004964:	1c5a      	adds	r2, r3, #1
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f022 0201 	bic.w	r2, r2, #1
 8004978:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f7fe fecb 	bl	8003716 <HAL_I2C_AbortCpltCallback>
 8004980:	e015      	b.n	80049ae <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	695b      	ldr	r3, [r3, #20]
 8004988:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800498c:	2b40      	cmp	r3, #64	@ 0x40
 800498e:	d10b      	bne.n	80049a8 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	691a      	ldr	r2, [r3, #16]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800499a:	b2d2      	uxtb	r2, r2
 800499c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049a2:	1c5a      	adds	r2, r3, #1
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80049a8:	6878      	ldr	r0, [r7, #4]
 80049aa:	f7fe feab 	bl	8003704 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049b2:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	f003 0301 	and.w	r3, r3, #1
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d10e      	bne.n	80049dc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d109      	bne.n	80049dc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d104      	bne.n	80049dc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d007      	beq.n	80049ec <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	685a      	ldr	r2, [r3, #4]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80049ea:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049f2:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049f8:	f003 0304 	and.w	r3, r3, #4
 80049fc:	2b04      	cmp	r3, #4
 80049fe:	d113      	bne.n	8004a28 <I2C_ITError+0x254>
 8004a00:	7bfb      	ldrb	r3, [r7, #15]
 8004a02:	2b28      	cmp	r3, #40	@ 0x28
 8004a04:	d110      	bne.n	8004a28 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	4a0a      	ldr	r2, [pc, #40]	@ (8004a34 <I2C_ITError+0x260>)
 8004a0a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2220      	movs	r2, #32
 8004a16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	f7fe fe53 	bl	80036ce <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004a28:	bf00      	nop
 8004a2a:	3710      	adds	r7, #16
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}
 8004a30:	08004d35 	.word	0x08004d35
 8004a34:	ffff0000 	.word	0xffff0000

08004a38 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b088      	sub	sp, #32
 8004a3c:	af02      	add	r7, sp, #8
 8004a3e:	60f8      	str	r0, [r7, #12]
 8004a40:	4608      	mov	r0, r1
 8004a42:	4611      	mov	r1, r2
 8004a44:	461a      	mov	r2, r3
 8004a46:	4603      	mov	r3, r0
 8004a48:	817b      	strh	r3, [r7, #10]
 8004a4a:	460b      	mov	r3, r1
 8004a4c:	813b      	strh	r3, [r7, #8]
 8004a4e:	4613      	mov	r3, r2
 8004a50:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	681a      	ldr	r2, [r3, #0]
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004a60:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a64:	9300      	str	r3, [sp, #0]
 8004a66:	6a3b      	ldr	r3, [r7, #32]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004a6e:	68f8      	ldr	r0, [r7, #12]
 8004a70:	f000 fa08 	bl	8004e84 <I2C_WaitOnFlagUntilTimeout>
 8004a74:	4603      	mov	r3, r0
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d00d      	beq.n	8004a96 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a84:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a88:	d103      	bne.n	8004a92 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004a90:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004a92:	2303      	movs	r3, #3
 8004a94:	e05f      	b.n	8004b56 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004a96:	897b      	ldrh	r3, [r7, #10]
 8004a98:	b2db      	uxtb	r3, r3
 8004a9a:	461a      	mov	r2, r3
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004aa4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aa8:	6a3a      	ldr	r2, [r7, #32]
 8004aaa:	492d      	ldr	r1, [pc, #180]	@ (8004b60 <I2C_RequestMemoryWrite+0x128>)
 8004aac:	68f8      	ldr	r0, [r7, #12]
 8004aae:	f000 fa63 	bl	8004f78 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d001      	beq.n	8004abc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	e04c      	b.n	8004b56 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004abc:	2300      	movs	r3, #0
 8004abe:	617b      	str	r3, [r7, #20]
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	695b      	ldr	r3, [r3, #20]
 8004ac6:	617b      	str	r3, [r7, #20]
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	699b      	ldr	r3, [r3, #24]
 8004ace:	617b      	str	r3, [r7, #20]
 8004ad0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ad2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ad4:	6a39      	ldr	r1, [r7, #32]
 8004ad6:	68f8      	ldr	r0, [r7, #12]
 8004ad8:	f000 faee 	bl	80050b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004adc:	4603      	mov	r3, r0
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d00d      	beq.n	8004afe <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ae6:	2b04      	cmp	r3, #4
 8004ae8:	d107      	bne.n	8004afa <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	681a      	ldr	r2, [r3, #0]
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004af8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004afa:	2301      	movs	r3, #1
 8004afc:	e02b      	b.n	8004b56 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004afe:	88fb      	ldrh	r3, [r7, #6]
 8004b00:	2b01      	cmp	r3, #1
 8004b02:	d105      	bne.n	8004b10 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004b04:	893b      	ldrh	r3, [r7, #8]
 8004b06:	b2da      	uxtb	r2, r3
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	611a      	str	r2, [r3, #16]
 8004b0e:	e021      	b.n	8004b54 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004b10:	893b      	ldrh	r3, [r7, #8]
 8004b12:	0a1b      	lsrs	r3, r3, #8
 8004b14:	b29b      	uxth	r3, r3
 8004b16:	b2da      	uxtb	r2, r3
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b20:	6a39      	ldr	r1, [r7, #32]
 8004b22:	68f8      	ldr	r0, [r7, #12]
 8004b24:	f000 fac8 	bl	80050b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d00d      	beq.n	8004b4a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b32:	2b04      	cmp	r3, #4
 8004b34:	d107      	bne.n	8004b46 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	681a      	ldr	r2, [r3, #0]
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b44:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	e005      	b.n	8004b56 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004b4a:	893b      	ldrh	r3, [r7, #8]
 8004b4c:	b2da      	uxtb	r2, r3
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004b54:	2300      	movs	r3, #0
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	3718      	adds	r7, #24
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd80      	pop	{r7, pc}
 8004b5e:	bf00      	nop
 8004b60:	00010002 	.word	0x00010002

08004b64 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b088      	sub	sp, #32
 8004b68:	af02      	add	r7, sp, #8
 8004b6a:	60f8      	str	r0, [r7, #12]
 8004b6c:	4608      	mov	r0, r1
 8004b6e:	4611      	mov	r1, r2
 8004b70:	461a      	mov	r2, r3
 8004b72:	4603      	mov	r3, r0
 8004b74:	817b      	strh	r3, [r7, #10]
 8004b76:	460b      	mov	r3, r1
 8004b78:	813b      	strh	r3, [r7, #8]
 8004b7a:	4613      	mov	r3, r2
 8004b7c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	681a      	ldr	r2, [r3, #0]
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004b8c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	681a      	ldr	r2, [r3, #0]
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004b9c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ba0:	9300      	str	r3, [sp, #0]
 8004ba2:	6a3b      	ldr	r3, [r7, #32]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004baa:	68f8      	ldr	r0, [r7, #12]
 8004bac:	f000 f96a 	bl	8004e84 <I2C_WaitOnFlagUntilTimeout>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d00d      	beq.n	8004bd2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bc0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004bc4:	d103      	bne.n	8004bce <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004bcc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004bce:	2303      	movs	r3, #3
 8004bd0:	e0aa      	b.n	8004d28 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004bd2:	897b      	ldrh	r3, [r7, #10]
 8004bd4:	b2db      	uxtb	r3, r3
 8004bd6:	461a      	mov	r2, r3
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004be0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004be4:	6a3a      	ldr	r2, [r7, #32]
 8004be6:	4952      	ldr	r1, [pc, #328]	@ (8004d30 <I2C_RequestMemoryRead+0x1cc>)
 8004be8:	68f8      	ldr	r0, [r7, #12]
 8004bea:	f000 f9c5 	bl	8004f78 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d001      	beq.n	8004bf8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	e097      	b.n	8004d28 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	617b      	str	r3, [r7, #20]
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	695b      	ldr	r3, [r3, #20]
 8004c02:	617b      	str	r3, [r7, #20]
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	699b      	ldr	r3, [r3, #24]
 8004c0a:	617b      	str	r3, [r7, #20]
 8004c0c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c10:	6a39      	ldr	r1, [r7, #32]
 8004c12:	68f8      	ldr	r0, [r7, #12]
 8004c14:	f000 fa50 	bl	80050b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d00d      	beq.n	8004c3a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c22:	2b04      	cmp	r3, #4
 8004c24:	d107      	bne.n	8004c36 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c34:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	e076      	b.n	8004d28 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004c3a:	88fb      	ldrh	r3, [r7, #6]
 8004c3c:	2b01      	cmp	r3, #1
 8004c3e:	d105      	bne.n	8004c4c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004c40:	893b      	ldrh	r3, [r7, #8]
 8004c42:	b2da      	uxtb	r2, r3
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	611a      	str	r2, [r3, #16]
 8004c4a:	e021      	b.n	8004c90 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004c4c:	893b      	ldrh	r3, [r7, #8]
 8004c4e:	0a1b      	lsrs	r3, r3, #8
 8004c50:	b29b      	uxth	r3, r3
 8004c52:	b2da      	uxtb	r2, r3
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c5c:	6a39      	ldr	r1, [r7, #32]
 8004c5e:	68f8      	ldr	r0, [r7, #12]
 8004c60:	f000 fa2a 	bl	80050b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004c64:	4603      	mov	r3, r0
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d00d      	beq.n	8004c86 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c6e:	2b04      	cmp	r3, #4
 8004c70:	d107      	bne.n	8004c82 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	681a      	ldr	r2, [r3, #0]
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c80:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	e050      	b.n	8004d28 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004c86:	893b      	ldrh	r3, [r7, #8]
 8004c88:	b2da      	uxtb	r2, r3
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c92:	6a39      	ldr	r1, [r7, #32]
 8004c94:	68f8      	ldr	r0, [r7, #12]
 8004c96:	f000 fa0f 	bl	80050b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d00d      	beq.n	8004cbc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ca4:	2b04      	cmp	r3, #4
 8004ca6:	d107      	bne.n	8004cb8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	681a      	ldr	r2, [r3, #0]
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004cb6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004cb8:	2301      	movs	r3, #1
 8004cba:	e035      	b.n	8004d28 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	681a      	ldr	r2, [r3, #0]
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004cca:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004ccc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cce:	9300      	str	r3, [sp, #0]
 8004cd0:	6a3b      	ldr	r3, [r7, #32]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004cd8:	68f8      	ldr	r0, [r7, #12]
 8004cda:	f000 f8d3 	bl	8004e84 <I2C_WaitOnFlagUntilTimeout>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d00d      	beq.n	8004d00 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004cf2:	d103      	bne.n	8004cfc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004cfa:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004cfc:	2303      	movs	r3, #3
 8004cfe:	e013      	b.n	8004d28 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004d00:	897b      	ldrh	r3, [r7, #10]
 8004d02:	b2db      	uxtb	r3, r3
 8004d04:	f043 0301 	orr.w	r3, r3, #1
 8004d08:	b2da      	uxtb	r2, r3
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004d10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d12:	6a3a      	ldr	r2, [r7, #32]
 8004d14:	4906      	ldr	r1, [pc, #24]	@ (8004d30 <I2C_RequestMemoryRead+0x1cc>)
 8004d16:	68f8      	ldr	r0, [r7, #12]
 8004d18:	f000 f92e 	bl	8004f78 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d001      	beq.n	8004d26 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004d22:	2301      	movs	r3, #1
 8004d24:	e000      	b.n	8004d28 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004d26:	2300      	movs	r3, #0
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	3718      	adds	r7, #24
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bd80      	pop	{r7, pc}
 8004d30:	00010002 	.word	0x00010002

08004d34 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b086      	sub	sp, #24
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d44:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d4c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004d4e:	4b4b      	ldr	r3, [pc, #300]	@ (8004e7c <I2C_DMAAbort+0x148>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	08db      	lsrs	r3, r3, #3
 8004d54:	4a4a      	ldr	r2, [pc, #296]	@ (8004e80 <I2C_DMAAbort+0x14c>)
 8004d56:	fba2 2303 	umull	r2, r3, r2, r3
 8004d5a:	0a1a      	lsrs	r2, r3, #8
 8004d5c:	4613      	mov	r3, r2
 8004d5e:	009b      	lsls	r3, r3, #2
 8004d60:	4413      	add	r3, r2
 8004d62:	00da      	lsls	r2, r3, #3
 8004d64:	1ad3      	subs	r3, r2, r3
 8004d66:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d106      	bne.n	8004d7c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d72:	f043 0220 	orr.w	r2, r3, #32
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8004d7a:	e00a      	b.n	8004d92 <I2C_DMAAbort+0x5e>
    }
    count--;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	3b01      	subs	r3, #1
 8004d80:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004d8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d90:	d0ea      	beq.n	8004d68 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d003      	beq.n	8004da2 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d9e:	2200      	movs	r2, #0
 8004da0:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d003      	beq.n	8004db2 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dae:	2200      	movs	r2, #0
 8004db0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	681a      	ldr	r2, [r3, #0]
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004dc0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d003      	beq.n	8004dd8 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d003      	beq.n	8004de8 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004de4:	2200      	movs	r2, #0
 8004de6:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004de8:	697b      	ldr	r3, [r7, #20]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	681a      	ldr	r2, [r3, #0]
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f022 0201 	bic.w	r2, r2, #1
 8004df6:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004dfe:	b2db      	uxtb	r3, r3
 8004e00:	2b60      	cmp	r3, #96	@ 0x60
 8004e02:	d10e      	bne.n	8004e22 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	2220      	movs	r2, #32
 8004e08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	2200      	movs	r2, #0
 8004e18:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004e1a:	6978      	ldr	r0, [r7, #20]
 8004e1c:	f7fe fc7b 	bl	8003716 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004e20:	e027      	b.n	8004e72 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004e22:	7cfb      	ldrb	r3, [r7, #19]
 8004e24:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004e28:	2b28      	cmp	r3, #40	@ 0x28
 8004e2a:	d117      	bne.n	8004e5c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	681a      	ldr	r2, [r3, #0]
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f042 0201 	orr.w	r2, r2, #1
 8004e3a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	681a      	ldr	r2, [r3, #0]
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004e4a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	2228      	movs	r2, #40	@ 0x28
 8004e56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004e5a:	e007      	b.n	8004e6c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	2220      	movs	r2, #32
 8004e60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	2200      	movs	r2, #0
 8004e68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004e6c:	6978      	ldr	r0, [r7, #20]
 8004e6e:	f7fe fc49 	bl	8003704 <HAL_I2C_ErrorCallback>
}
 8004e72:	bf00      	nop
 8004e74:	3718      	adds	r7, #24
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}
 8004e7a:	bf00      	nop
 8004e7c:	20000000 	.word	0x20000000
 8004e80:	14f8b589 	.word	0x14f8b589

08004e84 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b084      	sub	sp, #16
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	60f8      	str	r0, [r7, #12]
 8004e8c:	60b9      	str	r1, [r7, #8]
 8004e8e:	603b      	str	r3, [r7, #0]
 8004e90:	4613      	mov	r3, r2
 8004e92:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004e94:	e048      	b.n	8004f28 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e9c:	d044      	beq.n	8004f28 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e9e:	f7fd f91f 	bl	80020e0 <HAL_GetTick>
 8004ea2:	4602      	mov	r2, r0
 8004ea4:	69bb      	ldr	r3, [r7, #24]
 8004ea6:	1ad3      	subs	r3, r2, r3
 8004ea8:	683a      	ldr	r2, [r7, #0]
 8004eaa:	429a      	cmp	r2, r3
 8004eac:	d302      	bcc.n	8004eb4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d139      	bne.n	8004f28 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	0c1b      	lsrs	r3, r3, #16
 8004eb8:	b2db      	uxtb	r3, r3
 8004eba:	2b01      	cmp	r3, #1
 8004ebc:	d10d      	bne.n	8004eda <I2C_WaitOnFlagUntilTimeout+0x56>
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	695b      	ldr	r3, [r3, #20]
 8004ec4:	43da      	mvns	r2, r3
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	4013      	ands	r3, r2
 8004eca:	b29b      	uxth	r3, r3
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	bf0c      	ite	eq
 8004ed0:	2301      	moveq	r3, #1
 8004ed2:	2300      	movne	r3, #0
 8004ed4:	b2db      	uxtb	r3, r3
 8004ed6:	461a      	mov	r2, r3
 8004ed8:	e00c      	b.n	8004ef4 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	699b      	ldr	r3, [r3, #24]
 8004ee0:	43da      	mvns	r2, r3
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	4013      	ands	r3, r2
 8004ee6:	b29b      	uxth	r3, r3
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	bf0c      	ite	eq
 8004eec:	2301      	moveq	r3, #1
 8004eee:	2300      	movne	r3, #0
 8004ef0:	b2db      	uxtb	r3, r3
 8004ef2:	461a      	mov	r2, r3
 8004ef4:	79fb      	ldrb	r3, [r7, #7]
 8004ef6:	429a      	cmp	r2, r3
 8004ef8:	d116      	bne.n	8004f28 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	2200      	movs	r2, #0
 8004efe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	2220      	movs	r2, #32
 8004f04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f14:	f043 0220 	orr.w	r2, r3, #32
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004f24:	2301      	movs	r3, #1
 8004f26:	e023      	b.n	8004f70 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	0c1b      	lsrs	r3, r3, #16
 8004f2c:	b2db      	uxtb	r3, r3
 8004f2e:	2b01      	cmp	r3, #1
 8004f30:	d10d      	bne.n	8004f4e <I2C_WaitOnFlagUntilTimeout+0xca>
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	695b      	ldr	r3, [r3, #20]
 8004f38:	43da      	mvns	r2, r3
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	4013      	ands	r3, r2
 8004f3e:	b29b      	uxth	r3, r3
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	bf0c      	ite	eq
 8004f44:	2301      	moveq	r3, #1
 8004f46:	2300      	movne	r3, #0
 8004f48:	b2db      	uxtb	r3, r3
 8004f4a:	461a      	mov	r2, r3
 8004f4c:	e00c      	b.n	8004f68 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	699b      	ldr	r3, [r3, #24]
 8004f54:	43da      	mvns	r2, r3
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	4013      	ands	r3, r2
 8004f5a:	b29b      	uxth	r3, r3
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	bf0c      	ite	eq
 8004f60:	2301      	moveq	r3, #1
 8004f62:	2300      	movne	r3, #0
 8004f64:	b2db      	uxtb	r3, r3
 8004f66:	461a      	mov	r2, r3
 8004f68:	79fb      	ldrb	r3, [r7, #7]
 8004f6a:	429a      	cmp	r2, r3
 8004f6c:	d093      	beq.n	8004e96 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f6e:	2300      	movs	r3, #0
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	3710      	adds	r7, #16
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bd80      	pop	{r7, pc}

08004f78 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b084      	sub	sp, #16
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	60f8      	str	r0, [r7, #12]
 8004f80:	60b9      	str	r1, [r7, #8]
 8004f82:	607a      	str	r2, [r7, #4]
 8004f84:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004f86:	e071      	b.n	800506c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	695b      	ldr	r3, [r3, #20]
 8004f8e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f96:	d123      	bne.n	8004fe0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	681a      	ldr	r2, [r3, #0]
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004fa6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004fb0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	2220      	movs	r2, #32
 8004fbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fcc:	f043 0204 	orr.w	r2, r3, #4
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	e067      	b.n	80050b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fe6:	d041      	beq.n	800506c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fe8:	f7fd f87a 	bl	80020e0 <HAL_GetTick>
 8004fec:	4602      	mov	r2, r0
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	1ad3      	subs	r3, r2, r3
 8004ff2:	687a      	ldr	r2, [r7, #4]
 8004ff4:	429a      	cmp	r2, r3
 8004ff6:	d302      	bcc.n	8004ffe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d136      	bne.n	800506c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	0c1b      	lsrs	r3, r3, #16
 8005002:	b2db      	uxtb	r3, r3
 8005004:	2b01      	cmp	r3, #1
 8005006:	d10c      	bne.n	8005022 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	695b      	ldr	r3, [r3, #20]
 800500e:	43da      	mvns	r2, r3
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	4013      	ands	r3, r2
 8005014:	b29b      	uxth	r3, r3
 8005016:	2b00      	cmp	r3, #0
 8005018:	bf14      	ite	ne
 800501a:	2301      	movne	r3, #1
 800501c:	2300      	moveq	r3, #0
 800501e:	b2db      	uxtb	r3, r3
 8005020:	e00b      	b.n	800503a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	699b      	ldr	r3, [r3, #24]
 8005028:	43da      	mvns	r2, r3
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	4013      	ands	r3, r2
 800502e:	b29b      	uxth	r3, r3
 8005030:	2b00      	cmp	r3, #0
 8005032:	bf14      	ite	ne
 8005034:	2301      	movne	r3, #1
 8005036:	2300      	moveq	r3, #0
 8005038:	b2db      	uxtb	r3, r3
 800503a:	2b00      	cmp	r3, #0
 800503c:	d016      	beq.n	800506c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	2200      	movs	r2, #0
 8005042:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	2220      	movs	r2, #32
 8005048:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	2200      	movs	r2, #0
 8005050:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005058:	f043 0220 	orr.w	r2, r3, #32
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	2200      	movs	r2, #0
 8005064:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005068:	2301      	movs	r3, #1
 800506a:	e021      	b.n	80050b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	0c1b      	lsrs	r3, r3, #16
 8005070:	b2db      	uxtb	r3, r3
 8005072:	2b01      	cmp	r3, #1
 8005074:	d10c      	bne.n	8005090 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	695b      	ldr	r3, [r3, #20]
 800507c:	43da      	mvns	r2, r3
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	4013      	ands	r3, r2
 8005082:	b29b      	uxth	r3, r3
 8005084:	2b00      	cmp	r3, #0
 8005086:	bf14      	ite	ne
 8005088:	2301      	movne	r3, #1
 800508a:	2300      	moveq	r3, #0
 800508c:	b2db      	uxtb	r3, r3
 800508e:	e00b      	b.n	80050a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	699b      	ldr	r3, [r3, #24]
 8005096:	43da      	mvns	r2, r3
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	4013      	ands	r3, r2
 800509c:	b29b      	uxth	r3, r3
 800509e:	2b00      	cmp	r3, #0
 80050a0:	bf14      	ite	ne
 80050a2:	2301      	movne	r3, #1
 80050a4:	2300      	moveq	r3, #0
 80050a6:	b2db      	uxtb	r3, r3
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	f47f af6d 	bne.w	8004f88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80050ae:	2300      	movs	r3, #0
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	3710      	adds	r7, #16
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bd80      	pop	{r7, pc}

080050b8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b084      	sub	sp, #16
 80050bc:	af00      	add	r7, sp, #0
 80050be:	60f8      	str	r0, [r7, #12]
 80050c0:	60b9      	str	r1, [r7, #8]
 80050c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80050c4:	e034      	b.n	8005130 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80050c6:	68f8      	ldr	r0, [r7, #12]
 80050c8:	f000 f915 	bl	80052f6 <I2C_IsAcknowledgeFailed>
 80050cc:	4603      	mov	r3, r0
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d001      	beq.n	80050d6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80050d2:	2301      	movs	r3, #1
 80050d4:	e034      	b.n	8005140 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050dc:	d028      	beq.n	8005130 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050de:	f7fc ffff 	bl	80020e0 <HAL_GetTick>
 80050e2:	4602      	mov	r2, r0
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	1ad3      	subs	r3, r2, r3
 80050e8:	68ba      	ldr	r2, [r7, #8]
 80050ea:	429a      	cmp	r2, r3
 80050ec:	d302      	bcc.n	80050f4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d11d      	bne.n	8005130 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	695b      	ldr	r3, [r3, #20]
 80050fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050fe:	2b80      	cmp	r3, #128	@ 0x80
 8005100:	d016      	beq.n	8005130 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	2200      	movs	r2, #0
 8005106:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	2220      	movs	r2, #32
 800510c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	2200      	movs	r2, #0
 8005114:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800511c:	f043 0220 	orr.w	r2, r3, #32
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	2200      	movs	r2, #0
 8005128:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800512c:	2301      	movs	r3, #1
 800512e:	e007      	b.n	8005140 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	695b      	ldr	r3, [r3, #20]
 8005136:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800513a:	2b80      	cmp	r3, #128	@ 0x80
 800513c:	d1c3      	bne.n	80050c6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800513e:	2300      	movs	r3, #0
}
 8005140:	4618      	mov	r0, r3
 8005142:	3710      	adds	r7, #16
 8005144:	46bd      	mov	sp, r7
 8005146:	bd80      	pop	{r7, pc}

08005148 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b084      	sub	sp, #16
 800514c:	af00      	add	r7, sp, #0
 800514e:	60f8      	str	r0, [r7, #12]
 8005150:	60b9      	str	r1, [r7, #8]
 8005152:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005154:	e034      	b.n	80051c0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005156:	68f8      	ldr	r0, [r7, #12]
 8005158:	f000 f8cd 	bl	80052f6 <I2C_IsAcknowledgeFailed>
 800515c:	4603      	mov	r3, r0
 800515e:	2b00      	cmp	r3, #0
 8005160:	d001      	beq.n	8005166 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005162:	2301      	movs	r3, #1
 8005164:	e034      	b.n	80051d0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005166:	68bb      	ldr	r3, [r7, #8]
 8005168:	f1b3 3fff 	cmp.w	r3, #4294967295
 800516c:	d028      	beq.n	80051c0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800516e:	f7fc ffb7 	bl	80020e0 <HAL_GetTick>
 8005172:	4602      	mov	r2, r0
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	1ad3      	subs	r3, r2, r3
 8005178:	68ba      	ldr	r2, [r7, #8]
 800517a:	429a      	cmp	r2, r3
 800517c:	d302      	bcc.n	8005184 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800517e:	68bb      	ldr	r3, [r7, #8]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d11d      	bne.n	80051c0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	695b      	ldr	r3, [r3, #20]
 800518a:	f003 0304 	and.w	r3, r3, #4
 800518e:	2b04      	cmp	r3, #4
 8005190:	d016      	beq.n	80051c0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	2200      	movs	r2, #0
 8005196:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	2220      	movs	r2, #32
 800519c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	2200      	movs	r2, #0
 80051a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051ac:	f043 0220 	orr.w	r2, r3, #32
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	2200      	movs	r2, #0
 80051b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80051bc:	2301      	movs	r3, #1
 80051be:	e007      	b.n	80051d0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	695b      	ldr	r3, [r3, #20]
 80051c6:	f003 0304 	and.w	r3, r3, #4
 80051ca:	2b04      	cmp	r3, #4
 80051cc:	d1c3      	bne.n	8005156 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80051ce:	2300      	movs	r3, #0
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	3710      	adds	r7, #16
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bd80      	pop	{r7, pc}

080051d8 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80051d8:	b480      	push	{r7}
 80051da:	b085      	sub	sp, #20
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80051e0:	2300      	movs	r3, #0
 80051e2:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80051e4:	4b13      	ldr	r3, [pc, #76]	@ (8005234 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	08db      	lsrs	r3, r3, #3
 80051ea:	4a13      	ldr	r2, [pc, #76]	@ (8005238 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80051ec:	fba2 2303 	umull	r2, r3, r2, r3
 80051f0:	0a1a      	lsrs	r2, r3, #8
 80051f2:	4613      	mov	r3, r2
 80051f4:	009b      	lsls	r3, r3, #2
 80051f6:	4413      	add	r3, r2
 80051f8:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	3b01      	subs	r3, #1
 80051fe:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d107      	bne.n	8005216 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800520a:	f043 0220 	orr.w	r2, r3, #32
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8005212:	2301      	movs	r3, #1
 8005214:	e008      	b.n	8005228 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005220:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005224:	d0e9      	beq.n	80051fa <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8005226:	2300      	movs	r3, #0
}
 8005228:	4618      	mov	r0, r3
 800522a:	3714      	adds	r7, #20
 800522c:	46bd      	mov	sp, r7
 800522e:	bc80      	pop	{r7}
 8005230:	4770      	bx	lr
 8005232:	bf00      	nop
 8005234:	20000000 	.word	0x20000000
 8005238:	14f8b589 	.word	0x14f8b589

0800523c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b084      	sub	sp, #16
 8005240:	af00      	add	r7, sp, #0
 8005242:	60f8      	str	r0, [r7, #12]
 8005244:	60b9      	str	r1, [r7, #8]
 8005246:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005248:	e049      	b.n	80052de <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	695b      	ldr	r3, [r3, #20]
 8005250:	f003 0310 	and.w	r3, r3, #16
 8005254:	2b10      	cmp	r3, #16
 8005256:	d119      	bne.n	800528c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f06f 0210 	mvn.w	r2, #16
 8005260:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	2200      	movs	r2, #0
 8005266:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	2220      	movs	r2, #32
 800526c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	2200      	movs	r2, #0
 8005274:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	2200      	movs	r2, #0
 8005284:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005288:	2301      	movs	r3, #1
 800528a:	e030      	b.n	80052ee <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800528c:	f7fc ff28 	bl	80020e0 <HAL_GetTick>
 8005290:	4602      	mov	r2, r0
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	1ad3      	subs	r3, r2, r3
 8005296:	68ba      	ldr	r2, [r7, #8]
 8005298:	429a      	cmp	r2, r3
 800529a:	d302      	bcc.n	80052a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d11d      	bne.n	80052de <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	695b      	ldr	r3, [r3, #20]
 80052a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052ac:	2b40      	cmp	r3, #64	@ 0x40
 80052ae:	d016      	beq.n	80052de <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	2200      	movs	r2, #0
 80052b4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	2220      	movs	r2, #32
 80052ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	2200      	movs	r2, #0
 80052c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052ca:	f043 0220 	orr.w	r2, r3, #32
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2200      	movs	r2, #0
 80052d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80052da:	2301      	movs	r3, #1
 80052dc:	e007      	b.n	80052ee <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	695b      	ldr	r3, [r3, #20]
 80052e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052e8:	2b40      	cmp	r3, #64	@ 0x40
 80052ea:	d1ae      	bne.n	800524a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80052ec:	2300      	movs	r3, #0
}
 80052ee:	4618      	mov	r0, r3
 80052f0:	3710      	adds	r7, #16
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd80      	pop	{r7, pc}

080052f6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80052f6:	b480      	push	{r7}
 80052f8:	b083      	sub	sp, #12
 80052fa:	af00      	add	r7, sp, #0
 80052fc:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	695b      	ldr	r3, [r3, #20]
 8005304:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005308:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800530c:	d11b      	bne.n	8005346 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005316:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2200      	movs	r2, #0
 800531c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2220      	movs	r2, #32
 8005322:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2200      	movs	r2, #0
 800532a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005332:	f043 0204 	orr.w	r2, r3, #4
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2200      	movs	r2, #0
 800533e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005342:	2301      	movs	r3, #1
 8005344:	e000      	b.n	8005348 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005346:	2300      	movs	r3, #0
}
 8005348:	4618      	mov	r0, r3
 800534a:	370c      	adds	r7, #12
 800534c:	46bd      	mov	sp, r7
 800534e:	bc80      	pop	{r7}
 8005350:	4770      	bx	lr

08005352 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005352:	b480      	push	{r7}
 8005354:	b083      	sub	sp, #12
 8005356:	af00      	add	r7, sp, #0
 8005358:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800535e:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8005362:	d103      	bne.n	800536c <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2201      	movs	r2, #1
 8005368:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800536a:	e007      	b.n	800537c <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005370:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8005374:	d102      	bne.n	800537c <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2208      	movs	r2, #8
 800537a:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800537c:	bf00      	nop
 800537e:	370c      	adds	r7, #12
 8005380:	46bd      	mov	sp, r7
 8005382:	bc80      	pop	{r7}
 8005384:	4770      	bx	lr
	...

08005388 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b086      	sub	sp, #24
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d101      	bne.n	800539a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005396:	2301      	movs	r3, #1
 8005398:	e272      	b.n	8005880 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f003 0301 	and.w	r3, r3, #1
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	f000 8087 	beq.w	80054b6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80053a8:	4b92      	ldr	r3, [pc, #584]	@ (80055f4 <HAL_RCC_OscConfig+0x26c>)
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	f003 030c 	and.w	r3, r3, #12
 80053b0:	2b04      	cmp	r3, #4
 80053b2:	d00c      	beq.n	80053ce <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80053b4:	4b8f      	ldr	r3, [pc, #572]	@ (80055f4 <HAL_RCC_OscConfig+0x26c>)
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	f003 030c 	and.w	r3, r3, #12
 80053bc:	2b08      	cmp	r3, #8
 80053be:	d112      	bne.n	80053e6 <HAL_RCC_OscConfig+0x5e>
 80053c0:	4b8c      	ldr	r3, [pc, #560]	@ (80055f4 <HAL_RCC_OscConfig+0x26c>)
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80053c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80053cc:	d10b      	bne.n	80053e6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053ce:	4b89      	ldr	r3, [pc, #548]	@ (80055f4 <HAL_RCC_OscConfig+0x26c>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d06c      	beq.n	80054b4 <HAL_RCC_OscConfig+0x12c>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d168      	bne.n	80054b4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80053e2:	2301      	movs	r3, #1
 80053e4:	e24c      	b.n	8005880 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80053ee:	d106      	bne.n	80053fe <HAL_RCC_OscConfig+0x76>
 80053f0:	4b80      	ldr	r3, [pc, #512]	@ (80055f4 <HAL_RCC_OscConfig+0x26c>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a7f      	ldr	r2, [pc, #508]	@ (80055f4 <HAL_RCC_OscConfig+0x26c>)
 80053f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80053fa:	6013      	str	r3, [r2, #0]
 80053fc:	e02e      	b.n	800545c <HAL_RCC_OscConfig+0xd4>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d10c      	bne.n	8005420 <HAL_RCC_OscConfig+0x98>
 8005406:	4b7b      	ldr	r3, [pc, #492]	@ (80055f4 <HAL_RCC_OscConfig+0x26c>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a7a      	ldr	r2, [pc, #488]	@ (80055f4 <HAL_RCC_OscConfig+0x26c>)
 800540c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005410:	6013      	str	r3, [r2, #0]
 8005412:	4b78      	ldr	r3, [pc, #480]	@ (80055f4 <HAL_RCC_OscConfig+0x26c>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a77      	ldr	r2, [pc, #476]	@ (80055f4 <HAL_RCC_OscConfig+0x26c>)
 8005418:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800541c:	6013      	str	r3, [r2, #0]
 800541e:	e01d      	b.n	800545c <HAL_RCC_OscConfig+0xd4>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005428:	d10c      	bne.n	8005444 <HAL_RCC_OscConfig+0xbc>
 800542a:	4b72      	ldr	r3, [pc, #456]	@ (80055f4 <HAL_RCC_OscConfig+0x26c>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a71      	ldr	r2, [pc, #452]	@ (80055f4 <HAL_RCC_OscConfig+0x26c>)
 8005430:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005434:	6013      	str	r3, [r2, #0]
 8005436:	4b6f      	ldr	r3, [pc, #444]	@ (80055f4 <HAL_RCC_OscConfig+0x26c>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a6e      	ldr	r2, [pc, #440]	@ (80055f4 <HAL_RCC_OscConfig+0x26c>)
 800543c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005440:	6013      	str	r3, [r2, #0]
 8005442:	e00b      	b.n	800545c <HAL_RCC_OscConfig+0xd4>
 8005444:	4b6b      	ldr	r3, [pc, #428]	@ (80055f4 <HAL_RCC_OscConfig+0x26c>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a6a      	ldr	r2, [pc, #424]	@ (80055f4 <HAL_RCC_OscConfig+0x26c>)
 800544a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800544e:	6013      	str	r3, [r2, #0]
 8005450:	4b68      	ldr	r3, [pc, #416]	@ (80055f4 <HAL_RCC_OscConfig+0x26c>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a67      	ldr	r2, [pc, #412]	@ (80055f4 <HAL_RCC_OscConfig+0x26c>)
 8005456:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800545a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d013      	beq.n	800548c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005464:	f7fc fe3c 	bl	80020e0 <HAL_GetTick>
 8005468:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800546a:	e008      	b.n	800547e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800546c:	f7fc fe38 	bl	80020e0 <HAL_GetTick>
 8005470:	4602      	mov	r2, r0
 8005472:	693b      	ldr	r3, [r7, #16]
 8005474:	1ad3      	subs	r3, r2, r3
 8005476:	2b64      	cmp	r3, #100	@ 0x64
 8005478:	d901      	bls.n	800547e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800547a:	2303      	movs	r3, #3
 800547c:	e200      	b.n	8005880 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800547e:	4b5d      	ldr	r3, [pc, #372]	@ (80055f4 <HAL_RCC_OscConfig+0x26c>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005486:	2b00      	cmp	r3, #0
 8005488:	d0f0      	beq.n	800546c <HAL_RCC_OscConfig+0xe4>
 800548a:	e014      	b.n	80054b6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800548c:	f7fc fe28 	bl	80020e0 <HAL_GetTick>
 8005490:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005492:	e008      	b.n	80054a6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005494:	f7fc fe24 	bl	80020e0 <HAL_GetTick>
 8005498:	4602      	mov	r2, r0
 800549a:	693b      	ldr	r3, [r7, #16]
 800549c:	1ad3      	subs	r3, r2, r3
 800549e:	2b64      	cmp	r3, #100	@ 0x64
 80054a0:	d901      	bls.n	80054a6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80054a2:	2303      	movs	r3, #3
 80054a4:	e1ec      	b.n	8005880 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80054a6:	4b53      	ldr	r3, [pc, #332]	@ (80055f4 <HAL_RCC_OscConfig+0x26c>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d1f0      	bne.n	8005494 <HAL_RCC_OscConfig+0x10c>
 80054b2:	e000      	b.n	80054b6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f003 0302 	and.w	r3, r3, #2
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d063      	beq.n	800558a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80054c2:	4b4c      	ldr	r3, [pc, #304]	@ (80055f4 <HAL_RCC_OscConfig+0x26c>)
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	f003 030c 	and.w	r3, r3, #12
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d00b      	beq.n	80054e6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80054ce:	4b49      	ldr	r3, [pc, #292]	@ (80055f4 <HAL_RCC_OscConfig+0x26c>)
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	f003 030c 	and.w	r3, r3, #12
 80054d6:	2b08      	cmp	r3, #8
 80054d8:	d11c      	bne.n	8005514 <HAL_RCC_OscConfig+0x18c>
 80054da:	4b46      	ldr	r3, [pc, #280]	@ (80055f4 <HAL_RCC_OscConfig+0x26c>)
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d116      	bne.n	8005514 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054e6:	4b43      	ldr	r3, [pc, #268]	@ (80055f4 <HAL_RCC_OscConfig+0x26c>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f003 0302 	and.w	r3, r3, #2
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d005      	beq.n	80054fe <HAL_RCC_OscConfig+0x176>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	691b      	ldr	r3, [r3, #16]
 80054f6:	2b01      	cmp	r3, #1
 80054f8:	d001      	beq.n	80054fe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80054fa:	2301      	movs	r3, #1
 80054fc:	e1c0      	b.n	8005880 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054fe:	4b3d      	ldr	r3, [pc, #244]	@ (80055f4 <HAL_RCC_OscConfig+0x26c>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	695b      	ldr	r3, [r3, #20]
 800550a:	00db      	lsls	r3, r3, #3
 800550c:	4939      	ldr	r1, [pc, #228]	@ (80055f4 <HAL_RCC_OscConfig+0x26c>)
 800550e:	4313      	orrs	r3, r2
 8005510:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005512:	e03a      	b.n	800558a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	691b      	ldr	r3, [r3, #16]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d020      	beq.n	800555e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800551c:	4b36      	ldr	r3, [pc, #216]	@ (80055f8 <HAL_RCC_OscConfig+0x270>)
 800551e:	2201      	movs	r2, #1
 8005520:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005522:	f7fc fddd 	bl	80020e0 <HAL_GetTick>
 8005526:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005528:	e008      	b.n	800553c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800552a:	f7fc fdd9 	bl	80020e0 <HAL_GetTick>
 800552e:	4602      	mov	r2, r0
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	1ad3      	subs	r3, r2, r3
 8005534:	2b02      	cmp	r3, #2
 8005536:	d901      	bls.n	800553c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005538:	2303      	movs	r3, #3
 800553a:	e1a1      	b.n	8005880 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800553c:	4b2d      	ldr	r3, [pc, #180]	@ (80055f4 <HAL_RCC_OscConfig+0x26c>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f003 0302 	and.w	r3, r3, #2
 8005544:	2b00      	cmp	r3, #0
 8005546:	d0f0      	beq.n	800552a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005548:	4b2a      	ldr	r3, [pc, #168]	@ (80055f4 <HAL_RCC_OscConfig+0x26c>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	695b      	ldr	r3, [r3, #20]
 8005554:	00db      	lsls	r3, r3, #3
 8005556:	4927      	ldr	r1, [pc, #156]	@ (80055f4 <HAL_RCC_OscConfig+0x26c>)
 8005558:	4313      	orrs	r3, r2
 800555a:	600b      	str	r3, [r1, #0]
 800555c:	e015      	b.n	800558a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800555e:	4b26      	ldr	r3, [pc, #152]	@ (80055f8 <HAL_RCC_OscConfig+0x270>)
 8005560:	2200      	movs	r2, #0
 8005562:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005564:	f7fc fdbc 	bl	80020e0 <HAL_GetTick>
 8005568:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800556a:	e008      	b.n	800557e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800556c:	f7fc fdb8 	bl	80020e0 <HAL_GetTick>
 8005570:	4602      	mov	r2, r0
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	1ad3      	subs	r3, r2, r3
 8005576:	2b02      	cmp	r3, #2
 8005578:	d901      	bls.n	800557e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800557a:	2303      	movs	r3, #3
 800557c:	e180      	b.n	8005880 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800557e:	4b1d      	ldr	r3, [pc, #116]	@ (80055f4 <HAL_RCC_OscConfig+0x26c>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f003 0302 	and.w	r3, r3, #2
 8005586:	2b00      	cmp	r3, #0
 8005588:	d1f0      	bne.n	800556c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f003 0308 	and.w	r3, r3, #8
 8005592:	2b00      	cmp	r3, #0
 8005594:	d03a      	beq.n	800560c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	699b      	ldr	r3, [r3, #24]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d019      	beq.n	80055d2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800559e:	4b17      	ldr	r3, [pc, #92]	@ (80055fc <HAL_RCC_OscConfig+0x274>)
 80055a0:	2201      	movs	r2, #1
 80055a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055a4:	f7fc fd9c 	bl	80020e0 <HAL_GetTick>
 80055a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055aa:	e008      	b.n	80055be <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80055ac:	f7fc fd98 	bl	80020e0 <HAL_GetTick>
 80055b0:	4602      	mov	r2, r0
 80055b2:	693b      	ldr	r3, [r7, #16]
 80055b4:	1ad3      	subs	r3, r2, r3
 80055b6:	2b02      	cmp	r3, #2
 80055b8:	d901      	bls.n	80055be <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80055ba:	2303      	movs	r3, #3
 80055bc:	e160      	b.n	8005880 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055be:	4b0d      	ldr	r3, [pc, #52]	@ (80055f4 <HAL_RCC_OscConfig+0x26c>)
 80055c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055c2:	f003 0302 	and.w	r3, r3, #2
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d0f0      	beq.n	80055ac <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80055ca:	2001      	movs	r0, #1
 80055cc:	f000 face 	bl	8005b6c <RCC_Delay>
 80055d0:	e01c      	b.n	800560c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80055d2:	4b0a      	ldr	r3, [pc, #40]	@ (80055fc <HAL_RCC_OscConfig+0x274>)
 80055d4:	2200      	movs	r2, #0
 80055d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055d8:	f7fc fd82 	bl	80020e0 <HAL_GetTick>
 80055dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055de:	e00f      	b.n	8005600 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80055e0:	f7fc fd7e 	bl	80020e0 <HAL_GetTick>
 80055e4:	4602      	mov	r2, r0
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	1ad3      	subs	r3, r2, r3
 80055ea:	2b02      	cmp	r3, #2
 80055ec:	d908      	bls.n	8005600 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80055ee:	2303      	movs	r3, #3
 80055f0:	e146      	b.n	8005880 <HAL_RCC_OscConfig+0x4f8>
 80055f2:	bf00      	nop
 80055f4:	40021000 	.word	0x40021000
 80055f8:	42420000 	.word	0x42420000
 80055fc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005600:	4b92      	ldr	r3, [pc, #584]	@ (800584c <HAL_RCC_OscConfig+0x4c4>)
 8005602:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005604:	f003 0302 	and.w	r3, r3, #2
 8005608:	2b00      	cmp	r3, #0
 800560a:	d1e9      	bne.n	80055e0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f003 0304 	and.w	r3, r3, #4
 8005614:	2b00      	cmp	r3, #0
 8005616:	f000 80a6 	beq.w	8005766 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800561a:	2300      	movs	r3, #0
 800561c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800561e:	4b8b      	ldr	r3, [pc, #556]	@ (800584c <HAL_RCC_OscConfig+0x4c4>)
 8005620:	69db      	ldr	r3, [r3, #28]
 8005622:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005626:	2b00      	cmp	r3, #0
 8005628:	d10d      	bne.n	8005646 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800562a:	4b88      	ldr	r3, [pc, #544]	@ (800584c <HAL_RCC_OscConfig+0x4c4>)
 800562c:	69db      	ldr	r3, [r3, #28]
 800562e:	4a87      	ldr	r2, [pc, #540]	@ (800584c <HAL_RCC_OscConfig+0x4c4>)
 8005630:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005634:	61d3      	str	r3, [r2, #28]
 8005636:	4b85      	ldr	r3, [pc, #532]	@ (800584c <HAL_RCC_OscConfig+0x4c4>)
 8005638:	69db      	ldr	r3, [r3, #28]
 800563a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800563e:	60bb      	str	r3, [r7, #8]
 8005640:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005642:	2301      	movs	r3, #1
 8005644:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005646:	4b82      	ldr	r3, [pc, #520]	@ (8005850 <HAL_RCC_OscConfig+0x4c8>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800564e:	2b00      	cmp	r3, #0
 8005650:	d118      	bne.n	8005684 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005652:	4b7f      	ldr	r3, [pc, #508]	@ (8005850 <HAL_RCC_OscConfig+0x4c8>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4a7e      	ldr	r2, [pc, #504]	@ (8005850 <HAL_RCC_OscConfig+0x4c8>)
 8005658:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800565c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800565e:	f7fc fd3f 	bl	80020e0 <HAL_GetTick>
 8005662:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005664:	e008      	b.n	8005678 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005666:	f7fc fd3b 	bl	80020e0 <HAL_GetTick>
 800566a:	4602      	mov	r2, r0
 800566c:	693b      	ldr	r3, [r7, #16]
 800566e:	1ad3      	subs	r3, r2, r3
 8005670:	2b64      	cmp	r3, #100	@ 0x64
 8005672:	d901      	bls.n	8005678 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005674:	2303      	movs	r3, #3
 8005676:	e103      	b.n	8005880 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005678:	4b75      	ldr	r3, [pc, #468]	@ (8005850 <HAL_RCC_OscConfig+0x4c8>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005680:	2b00      	cmp	r3, #0
 8005682:	d0f0      	beq.n	8005666 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	68db      	ldr	r3, [r3, #12]
 8005688:	2b01      	cmp	r3, #1
 800568a:	d106      	bne.n	800569a <HAL_RCC_OscConfig+0x312>
 800568c:	4b6f      	ldr	r3, [pc, #444]	@ (800584c <HAL_RCC_OscConfig+0x4c4>)
 800568e:	6a1b      	ldr	r3, [r3, #32]
 8005690:	4a6e      	ldr	r2, [pc, #440]	@ (800584c <HAL_RCC_OscConfig+0x4c4>)
 8005692:	f043 0301 	orr.w	r3, r3, #1
 8005696:	6213      	str	r3, [r2, #32]
 8005698:	e02d      	b.n	80056f6 <HAL_RCC_OscConfig+0x36e>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	68db      	ldr	r3, [r3, #12]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d10c      	bne.n	80056bc <HAL_RCC_OscConfig+0x334>
 80056a2:	4b6a      	ldr	r3, [pc, #424]	@ (800584c <HAL_RCC_OscConfig+0x4c4>)
 80056a4:	6a1b      	ldr	r3, [r3, #32]
 80056a6:	4a69      	ldr	r2, [pc, #420]	@ (800584c <HAL_RCC_OscConfig+0x4c4>)
 80056a8:	f023 0301 	bic.w	r3, r3, #1
 80056ac:	6213      	str	r3, [r2, #32]
 80056ae:	4b67      	ldr	r3, [pc, #412]	@ (800584c <HAL_RCC_OscConfig+0x4c4>)
 80056b0:	6a1b      	ldr	r3, [r3, #32]
 80056b2:	4a66      	ldr	r2, [pc, #408]	@ (800584c <HAL_RCC_OscConfig+0x4c4>)
 80056b4:	f023 0304 	bic.w	r3, r3, #4
 80056b8:	6213      	str	r3, [r2, #32]
 80056ba:	e01c      	b.n	80056f6 <HAL_RCC_OscConfig+0x36e>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	68db      	ldr	r3, [r3, #12]
 80056c0:	2b05      	cmp	r3, #5
 80056c2:	d10c      	bne.n	80056de <HAL_RCC_OscConfig+0x356>
 80056c4:	4b61      	ldr	r3, [pc, #388]	@ (800584c <HAL_RCC_OscConfig+0x4c4>)
 80056c6:	6a1b      	ldr	r3, [r3, #32]
 80056c8:	4a60      	ldr	r2, [pc, #384]	@ (800584c <HAL_RCC_OscConfig+0x4c4>)
 80056ca:	f043 0304 	orr.w	r3, r3, #4
 80056ce:	6213      	str	r3, [r2, #32]
 80056d0:	4b5e      	ldr	r3, [pc, #376]	@ (800584c <HAL_RCC_OscConfig+0x4c4>)
 80056d2:	6a1b      	ldr	r3, [r3, #32]
 80056d4:	4a5d      	ldr	r2, [pc, #372]	@ (800584c <HAL_RCC_OscConfig+0x4c4>)
 80056d6:	f043 0301 	orr.w	r3, r3, #1
 80056da:	6213      	str	r3, [r2, #32]
 80056dc:	e00b      	b.n	80056f6 <HAL_RCC_OscConfig+0x36e>
 80056de:	4b5b      	ldr	r3, [pc, #364]	@ (800584c <HAL_RCC_OscConfig+0x4c4>)
 80056e0:	6a1b      	ldr	r3, [r3, #32]
 80056e2:	4a5a      	ldr	r2, [pc, #360]	@ (800584c <HAL_RCC_OscConfig+0x4c4>)
 80056e4:	f023 0301 	bic.w	r3, r3, #1
 80056e8:	6213      	str	r3, [r2, #32]
 80056ea:	4b58      	ldr	r3, [pc, #352]	@ (800584c <HAL_RCC_OscConfig+0x4c4>)
 80056ec:	6a1b      	ldr	r3, [r3, #32]
 80056ee:	4a57      	ldr	r2, [pc, #348]	@ (800584c <HAL_RCC_OscConfig+0x4c4>)
 80056f0:	f023 0304 	bic.w	r3, r3, #4
 80056f4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	68db      	ldr	r3, [r3, #12]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d015      	beq.n	800572a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056fe:	f7fc fcef 	bl	80020e0 <HAL_GetTick>
 8005702:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005704:	e00a      	b.n	800571c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005706:	f7fc fceb 	bl	80020e0 <HAL_GetTick>
 800570a:	4602      	mov	r2, r0
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	1ad3      	subs	r3, r2, r3
 8005710:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005714:	4293      	cmp	r3, r2
 8005716:	d901      	bls.n	800571c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005718:	2303      	movs	r3, #3
 800571a:	e0b1      	b.n	8005880 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800571c:	4b4b      	ldr	r3, [pc, #300]	@ (800584c <HAL_RCC_OscConfig+0x4c4>)
 800571e:	6a1b      	ldr	r3, [r3, #32]
 8005720:	f003 0302 	and.w	r3, r3, #2
 8005724:	2b00      	cmp	r3, #0
 8005726:	d0ee      	beq.n	8005706 <HAL_RCC_OscConfig+0x37e>
 8005728:	e014      	b.n	8005754 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800572a:	f7fc fcd9 	bl	80020e0 <HAL_GetTick>
 800572e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005730:	e00a      	b.n	8005748 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005732:	f7fc fcd5 	bl	80020e0 <HAL_GetTick>
 8005736:	4602      	mov	r2, r0
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	1ad3      	subs	r3, r2, r3
 800573c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005740:	4293      	cmp	r3, r2
 8005742:	d901      	bls.n	8005748 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005744:	2303      	movs	r3, #3
 8005746:	e09b      	b.n	8005880 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005748:	4b40      	ldr	r3, [pc, #256]	@ (800584c <HAL_RCC_OscConfig+0x4c4>)
 800574a:	6a1b      	ldr	r3, [r3, #32]
 800574c:	f003 0302 	and.w	r3, r3, #2
 8005750:	2b00      	cmp	r3, #0
 8005752:	d1ee      	bne.n	8005732 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005754:	7dfb      	ldrb	r3, [r7, #23]
 8005756:	2b01      	cmp	r3, #1
 8005758:	d105      	bne.n	8005766 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800575a:	4b3c      	ldr	r3, [pc, #240]	@ (800584c <HAL_RCC_OscConfig+0x4c4>)
 800575c:	69db      	ldr	r3, [r3, #28]
 800575e:	4a3b      	ldr	r2, [pc, #236]	@ (800584c <HAL_RCC_OscConfig+0x4c4>)
 8005760:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005764:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	69db      	ldr	r3, [r3, #28]
 800576a:	2b00      	cmp	r3, #0
 800576c:	f000 8087 	beq.w	800587e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005770:	4b36      	ldr	r3, [pc, #216]	@ (800584c <HAL_RCC_OscConfig+0x4c4>)
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	f003 030c 	and.w	r3, r3, #12
 8005778:	2b08      	cmp	r3, #8
 800577a:	d061      	beq.n	8005840 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	69db      	ldr	r3, [r3, #28]
 8005780:	2b02      	cmp	r3, #2
 8005782:	d146      	bne.n	8005812 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005784:	4b33      	ldr	r3, [pc, #204]	@ (8005854 <HAL_RCC_OscConfig+0x4cc>)
 8005786:	2200      	movs	r2, #0
 8005788:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800578a:	f7fc fca9 	bl	80020e0 <HAL_GetTick>
 800578e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005790:	e008      	b.n	80057a4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005792:	f7fc fca5 	bl	80020e0 <HAL_GetTick>
 8005796:	4602      	mov	r2, r0
 8005798:	693b      	ldr	r3, [r7, #16]
 800579a:	1ad3      	subs	r3, r2, r3
 800579c:	2b02      	cmp	r3, #2
 800579e:	d901      	bls.n	80057a4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80057a0:	2303      	movs	r3, #3
 80057a2:	e06d      	b.n	8005880 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80057a4:	4b29      	ldr	r3, [pc, #164]	@ (800584c <HAL_RCC_OscConfig+0x4c4>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d1f0      	bne.n	8005792 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6a1b      	ldr	r3, [r3, #32]
 80057b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80057b8:	d108      	bne.n	80057cc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80057ba:	4b24      	ldr	r3, [pc, #144]	@ (800584c <HAL_RCC_OscConfig+0x4c4>)
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	689b      	ldr	r3, [r3, #8]
 80057c6:	4921      	ldr	r1, [pc, #132]	@ (800584c <HAL_RCC_OscConfig+0x4c4>)
 80057c8:	4313      	orrs	r3, r2
 80057ca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80057cc:	4b1f      	ldr	r3, [pc, #124]	@ (800584c <HAL_RCC_OscConfig+0x4c4>)
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6a19      	ldr	r1, [r3, #32]
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057dc:	430b      	orrs	r3, r1
 80057de:	491b      	ldr	r1, [pc, #108]	@ (800584c <HAL_RCC_OscConfig+0x4c4>)
 80057e0:	4313      	orrs	r3, r2
 80057e2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80057e4:	4b1b      	ldr	r3, [pc, #108]	@ (8005854 <HAL_RCC_OscConfig+0x4cc>)
 80057e6:	2201      	movs	r2, #1
 80057e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057ea:	f7fc fc79 	bl	80020e0 <HAL_GetTick>
 80057ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80057f0:	e008      	b.n	8005804 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057f2:	f7fc fc75 	bl	80020e0 <HAL_GetTick>
 80057f6:	4602      	mov	r2, r0
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	1ad3      	subs	r3, r2, r3
 80057fc:	2b02      	cmp	r3, #2
 80057fe:	d901      	bls.n	8005804 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005800:	2303      	movs	r3, #3
 8005802:	e03d      	b.n	8005880 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005804:	4b11      	ldr	r3, [pc, #68]	@ (800584c <HAL_RCC_OscConfig+0x4c4>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800580c:	2b00      	cmp	r3, #0
 800580e:	d0f0      	beq.n	80057f2 <HAL_RCC_OscConfig+0x46a>
 8005810:	e035      	b.n	800587e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005812:	4b10      	ldr	r3, [pc, #64]	@ (8005854 <HAL_RCC_OscConfig+0x4cc>)
 8005814:	2200      	movs	r2, #0
 8005816:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005818:	f7fc fc62 	bl	80020e0 <HAL_GetTick>
 800581c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800581e:	e008      	b.n	8005832 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005820:	f7fc fc5e 	bl	80020e0 <HAL_GetTick>
 8005824:	4602      	mov	r2, r0
 8005826:	693b      	ldr	r3, [r7, #16]
 8005828:	1ad3      	subs	r3, r2, r3
 800582a:	2b02      	cmp	r3, #2
 800582c:	d901      	bls.n	8005832 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800582e:	2303      	movs	r3, #3
 8005830:	e026      	b.n	8005880 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005832:	4b06      	ldr	r3, [pc, #24]	@ (800584c <HAL_RCC_OscConfig+0x4c4>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800583a:	2b00      	cmp	r3, #0
 800583c:	d1f0      	bne.n	8005820 <HAL_RCC_OscConfig+0x498>
 800583e:	e01e      	b.n	800587e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	69db      	ldr	r3, [r3, #28]
 8005844:	2b01      	cmp	r3, #1
 8005846:	d107      	bne.n	8005858 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005848:	2301      	movs	r3, #1
 800584a:	e019      	b.n	8005880 <HAL_RCC_OscConfig+0x4f8>
 800584c:	40021000 	.word	0x40021000
 8005850:	40007000 	.word	0x40007000
 8005854:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005858:	4b0b      	ldr	r3, [pc, #44]	@ (8005888 <HAL_RCC_OscConfig+0x500>)
 800585a:	685b      	ldr	r3, [r3, #4]
 800585c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6a1b      	ldr	r3, [r3, #32]
 8005868:	429a      	cmp	r2, r3
 800586a:	d106      	bne.n	800587a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005876:	429a      	cmp	r2, r3
 8005878:	d001      	beq.n	800587e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800587a:	2301      	movs	r3, #1
 800587c:	e000      	b.n	8005880 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800587e:	2300      	movs	r3, #0
}
 8005880:	4618      	mov	r0, r3
 8005882:	3718      	adds	r7, #24
 8005884:	46bd      	mov	sp, r7
 8005886:	bd80      	pop	{r7, pc}
 8005888:	40021000 	.word	0x40021000

0800588c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b084      	sub	sp, #16
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
 8005894:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d101      	bne.n	80058a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800589c:	2301      	movs	r3, #1
 800589e:	e0d0      	b.n	8005a42 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80058a0:	4b6a      	ldr	r3, [pc, #424]	@ (8005a4c <HAL_RCC_ClockConfig+0x1c0>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f003 0307 	and.w	r3, r3, #7
 80058a8:	683a      	ldr	r2, [r7, #0]
 80058aa:	429a      	cmp	r2, r3
 80058ac:	d910      	bls.n	80058d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058ae:	4b67      	ldr	r3, [pc, #412]	@ (8005a4c <HAL_RCC_ClockConfig+0x1c0>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f023 0207 	bic.w	r2, r3, #7
 80058b6:	4965      	ldr	r1, [pc, #404]	@ (8005a4c <HAL_RCC_ClockConfig+0x1c0>)
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	4313      	orrs	r3, r2
 80058bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80058be:	4b63      	ldr	r3, [pc, #396]	@ (8005a4c <HAL_RCC_ClockConfig+0x1c0>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f003 0307 	and.w	r3, r3, #7
 80058c6:	683a      	ldr	r2, [r7, #0]
 80058c8:	429a      	cmp	r2, r3
 80058ca:	d001      	beq.n	80058d0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80058cc:	2301      	movs	r3, #1
 80058ce:	e0b8      	b.n	8005a42 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f003 0302 	and.w	r3, r3, #2
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d020      	beq.n	800591e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f003 0304 	and.w	r3, r3, #4
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d005      	beq.n	80058f4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80058e8:	4b59      	ldr	r3, [pc, #356]	@ (8005a50 <HAL_RCC_ClockConfig+0x1c4>)
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	4a58      	ldr	r2, [pc, #352]	@ (8005a50 <HAL_RCC_ClockConfig+0x1c4>)
 80058ee:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80058f2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f003 0308 	and.w	r3, r3, #8
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d005      	beq.n	800590c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005900:	4b53      	ldr	r3, [pc, #332]	@ (8005a50 <HAL_RCC_ClockConfig+0x1c4>)
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	4a52      	ldr	r2, [pc, #328]	@ (8005a50 <HAL_RCC_ClockConfig+0x1c4>)
 8005906:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800590a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800590c:	4b50      	ldr	r3, [pc, #320]	@ (8005a50 <HAL_RCC_ClockConfig+0x1c4>)
 800590e:	685b      	ldr	r3, [r3, #4]
 8005910:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	689b      	ldr	r3, [r3, #8]
 8005918:	494d      	ldr	r1, [pc, #308]	@ (8005a50 <HAL_RCC_ClockConfig+0x1c4>)
 800591a:	4313      	orrs	r3, r2
 800591c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f003 0301 	and.w	r3, r3, #1
 8005926:	2b00      	cmp	r3, #0
 8005928:	d040      	beq.n	80059ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	2b01      	cmp	r3, #1
 8005930:	d107      	bne.n	8005942 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005932:	4b47      	ldr	r3, [pc, #284]	@ (8005a50 <HAL_RCC_ClockConfig+0x1c4>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800593a:	2b00      	cmp	r3, #0
 800593c:	d115      	bne.n	800596a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800593e:	2301      	movs	r3, #1
 8005940:	e07f      	b.n	8005a42 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	685b      	ldr	r3, [r3, #4]
 8005946:	2b02      	cmp	r3, #2
 8005948:	d107      	bne.n	800595a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800594a:	4b41      	ldr	r3, [pc, #260]	@ (8005a50 <HAL_RCC_ClockConfig+0x1c4>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005952:	2b00      	cmp	r3, #0
 8005954:	d109      	bne.n	800596a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005956:	2301      	movs	r3, #1
 8005958:	e073      	b.n	8005a42 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800595a:	4b3d      	ldr	r3, [pc, #244]	@ (8005a50 <HAL_RCC_ClockConfig+0x1c4>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f003 0302 	and.w	r3, r3, #2
 8005962:	2b00      	cmp	r3, #0
 8005964:	d101      	bne.n	800596a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005966:	2301      	movs	r3, #1
 8005968:	e06b      	b.n	8005a42 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800596a:	4b39      	ldr	r3, [pc, #228]	@ (8005a50 <HAL_RCC_ClockConfig+0x1c4>)
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	f023 0203 	bic.w	r2, r3, #3
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	4936      	ldr	r1, [pc, #216]	@ (8005a50 <HAL_RCC_ClockConfig+0x1c4>)
 8005978:	4313      	orrs	r3, r2
 800597a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800597c:	f7fc fbb0 	bl	80020e0 <HAL_GetTick>
 8005980:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005982:	e00a      	b.n	800599a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005984:	f7fc fbac 	bl	80020e0 <HAL_GetTick>
 8005988:	4602      	mov	r2, r0
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	1ad3      	subs	r3, r2, r3
 800598e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005992:	4293      	cmp	r3, r2
 8005994:	d901      	bls.n	800599a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005996:	2303      	movs	r3, #3
 8005998:	e053      	b.n	8005a42 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800599a:	4b2d      	ldr	r3, [pc, #180]	@ (8005a50 <HAL_RCC_ClockConfig+0x1c4>)
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	f003 020c 	and.w	r2, r3, #12
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	685b      	ldr	r3, [r3, #4]
 80059a6:	009b      	lsls	r3, r3, #2
 80059a8:	429a      	cmp	r2, r3
 80059aa:	d1eb      	bne.n	8005984 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80059ac:	4b27      	ldr	r3, [pc, #156]	@ (8005a4c <HAL_RCC_ClockConfig+0x1c0>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f003 0307 	and.w	r3, r3, #7
 80059b4:	683a      	ldr	r2, [r7, #0]
 80059b6:	429a      	cmp	r2, r3
 80059b8:	d210      	bcs.n	80059dc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059ba:	4b24      	ldr	r3, [pc, #144]	@ (8005a4c <HAL_RCC_ClockConfig+0x1c0>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f023 0207 	bic.w	r2, r3, #7
 80059c2:	4922      	ldr	r1, [pc, #136]	@ (8005a4c <HAL_RCC_ClockConfig+0x1c0>)
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	4313      	orrs	r3, r2
 80059c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80059ca:	4b20      	ldr	r3, [pc, #128]	@ (8005a4c <HAL_RCC_ClockConfig+0x1c0>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f003 0307 	and.w	r3, r3, #7
 80059d2:	683a      	ldr	r2, [r7, #0]
 80059d4:	429a      	cmp	r2, r3
 80059d6:	d001      	beq.n	80059dc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80059d8:	2301      	movs	r3, #1
 80059da:	e032      	b.n	8005a42 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f003 0304 	and.w	r3, r3, #4
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d008      	beq.n	80059fa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80059e8:	4b19      	ldr	r3, [pc, #100]	@ (8005a50 <HAL_RCC_ClockConfig+0x1c4>)
 80059ea:	685b      	ldr	r3, [r3, #4]
 80059ec:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	68db      	ldr	r3, [r3, #12]
 80059f4:	4916      	ldr	r1, [pc, #88]	@ (8005a50 <HAL_RCC_ClockConfig+0x1c4>)
 80059f6:	4313      	orrs	r3, r2
 80059f8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f003 0308 	and.w	r3, r3, #8
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d009      	beq.n	8005a1a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005a06:	4b12      	ldr	r3, [pc, #72]	@ (8005a50 <HAL_RCC_ClockConfig+0x1c4>)
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	691b      	ldr	r3, [r3, #16]
 8005a12:	00db      	lsls	r3, r3, #3
 8005a14:	490e      	ldr	r1, [pc, #56]	@ (8005a50 <HAL_RCC_ClockConfig+0x1c4>)
 8005a16:	4313      	orrs	r3, r2
 8005a18:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005a1a:	f000 f821 	bl	8005a60 <HAL_RCC_GetSysClockFreq>
 8005a1e:	4602      	mov	r2, r0
 8005a20:	4b0b      	ldr	r3, [pc, #44]	@ (8005a50 <HAL_RCC_ClockConfig+0x1c4>)
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	091b      	lsrs	r3, r3, #4
 8005a26:	f003 030f 	and.w	r3, r3, #15
 8005a2a:	490a      	ldr	r1, [pc, #40]	@ (8005a54 <HAL_RCC_ClockConfig+0x1c8>)
 8005a2c:	5ccb      	ldrb	r3, [r1, r3]
 8005a2e:	fa22 f303 	lsr.w	r3, r2, r3
 8005a32:	4a09      	ldr	r2, [pc, #36]	@ (8005a58 <HAL_RCC_ClockConfig+0x1cc>)
 8005a34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005a36:	4b09      	ldr	r3, [pc, #36]	@ (8005a5c <HAL_RCC_ClockConfig+0x1d0>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	f7fc fb0e 	bl	800205c <HAL_InitTick>

  return HAL_OK;
 8005a40:	2300      	movs	r3, #0
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	3710      	adds	r7, #16
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd80      	pop	{r7, pc}
 8005a4a:	bf00      	nop
 8005a4c:	40022000 	.word	0x40022000
 8005a50:	40021000 	.word	0x40021000
 8005a54:	08008998 	.word	0x08008998
 8005a58:	20000000 	.word	0x20000000
 8005a5c:	20000004 	.word	0x20000004

08005a60 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b087      	sub	sp, #28
 8005a64:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005a66:	2300      	movs	r3, #0
 8005a68:	60fb      	str	r3, [r7, #12]
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	60bb      	str	r3, [r7, #8]
 8005a6e:	2300      	movs	r3, #0
 8005a70:	617b      	str	r3, [r7, #20]
 8005a72:	2300      	movs	r3, #0
 8005a74:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005a76:	2300      	movs	r3, #0
 8005a78:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005a7a:	4b1e      	ldr	r3, [pc, #120]	@ (8005af4 <HAL_RCC_GetSysClockFreq+0x94>)
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	f003 030c 	and.w	r3, r3, #12
 8005a86:	2b04      	cmp	r3, #4
 8005a88:	d002      	beq.n	8005a90 <HAL_RCC_GetSysClockFreq+0x30>
 8005a8a:	2b08      	cmp	r3, #8
 8005a8c:	d003      	beq.n	8005a96 <HAL_RCC_GetSysClockFreq+0x36>
 8005a8e:	e027      	b.n	8005ae0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005a90:	4b19      	ldr	r3, [pc, #100]	@ (8005af8 <HAL_RCC_GetSysClockFreq+0x98>)
 8005a92:	613b      	str	r3, [r7, #16]
      break;
 8005a94:	e027      	b.n	8005ae6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	0c9b      	lsrs	r3, r3, #18
 8005a9a:	f003 030f 	and.w	r3, r3, #15
 8005a9e:	4a17      	ldr	r2, [pc, #92]	@ (8005afc <HAL_RCC_GetSysClockFreq+0x9c>)
 8005aa0:	5cd3      	ldrb	r3, [r2, r3]
 8005aa2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d010      	beq.n	8005ad0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005aae:	4b11      	ldr	r3, [pc, #68]	@ (8005af4 <HAL_RCC_GetSysClockFreq+0x94>)
 8005ab0:	685b      	ldr	r3, [r3, #4]
 8005ab2:	0c5b      	lsrs	r3, r3, #17
 8005ab4:	f003 0301 	and.w	r3, r3, #1
 8005ab8:	4a11      	ldr	r2, [pc, #68]	@ (8005b00 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005aba:	5cd3      	ldrb	r3, [r2, r3]
 8005abc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	4a0d      	ldr	r2, [pc, #52]	@ (8005af8 <HAL_RCC_GetSysClockFreq+0x98>)
 8005ac2:	fb03 f202 	mul.w	r2, r3, r2
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005acc:	617b      	str	r3, [r7, #20]
 8005ace:	e004      	b.n	8005ada <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	4a0c      	ldr	r2, [pc, #48]	@ (8005b04 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005ad4:	fb02 f303 	mul.w	r3, r2, r3
 8005ad8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	613b      	str	r3, [r7, #16]
      break;
 8005ade:	e002      	b.n	8005ae6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005ae0:	4b05      	ldr	r3, [pc, #20]	@ (8005af8 <HAL_RCC_GetSysClockFreq+0x98>)
 8005ae2:	613b      	str	r3, [r7, #16]
      break;
 8005ae4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005ae6:	693b      	ldr	r3, [r7, #16]
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	371c      	adds	r7, #28
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bc80      	pop	{r7}
 8005af0:	4770      	bx	lr
 8005af2:	bf00      	nop
 8005af4:	40021000 	.word	0x40021000
 8005af8:	007a1200 	.word	0x007a1200
 8005afc:	080089b0 	.word	0x080089b0
 8005b00:	080089c0 	.word	0x080089c0
 8005b04:	003d0900 	.word	0x003d0900

08005b08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005b0c:	4b02      	ldr	r3, [pc, #8]	@ (8005b18 <HAL_RCC_GetHCLKFreq+0x10>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
}
 8005b10:	4618      	mov	r0, r3
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bc80      	pop	{r7}
 8005b16:	4770      	bx	lr
 8005b18:	20000000 	.word	0x20000000

08005b1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005b20:	f7ff fff2 	bl	8005b08 <HAL_RCC_GetHCLKFreq>
 8005b24:	4602      	mov	r2, r0
 8005b26:	4b05      	ldr	r3, [pc, #20]	@ (8005b3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005b28:	685b      	ldr	r3, [r3, #4]
 8005b2a:	0a1b      	lsrs	r3, r3, #8
 8005b2c:	f003 0307 	and.w	r3, r3, #7
 8005b30:	4903      	ldr	r1, [pc, #12]	@ (8005b40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b32:	5ccb      	ldrb	r3, [r1, r3]
 8005b34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b38:	4618      	mov	r0, r3
 8005b3a:	bd80      	pop	{r7, pc}
 8005b3c:	40021000 	.word	0x40021000
 8005b40:	080089a8 	.word	0x080089a8

08005b44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005b48:	f7ff ffde 	bl	8005b08 <HAL_RCC_GetHCLKFreq>
 8005b4c:	4602      	mov	r2, r0
 8005b4e:	4b05      	ldr	r3, [pc, #20]	@ (8005b64 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	0adb      	lsrs	r3, r3, #11
 8005b54:	f003 0307 	and.w	r3, r3, #7
 8005b58:	4903      	ldr	r1, [pc, #12]	@ (8005b68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005b5a:	5ccb      	ldrb	r3, [r1, r3]
 8005b5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	bd80      	pop	{r7, pc}
 8005b64:	40021000 	.word	0x40021000
 8005b68:	080089a8 	.word	0x080089a8

08005b6c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b085      	sub	sp, #20
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005b74:	4b0a      	ldr	r3, [pc, #40]	@ (8005ba0 <RCC_Delay+0x34>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4a0a      	ldr	r2, [pc, #40]	@ (8005ba4 <RCC_Delay+0x38>)
 8005b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8005b7e:	0a5b      	lsrs	r3, r3, #9
 8005b80:	687a      	ldr	r2, [r7, #4]
 8005b82:	fb02 f303 	mul.w	r3, r2, r3
 8005b86:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005b88:	bf00      	nop
  }
  while (Delay --);
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	1e5a      	subs	r2, r3, #1
 8005b8e:	60fa      	str	r2, [r7, #12]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d1f9      	bne.n	8005b88 <RCC_Delay+0x1c>
}
 8005b94:	bf00      	nop
 8005b96:	bf00      	nop
 8005b98:	3714      	adds	r7, #20
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bc80      	pop	{r7}
 8005b9e:	4770      	bx	lr
 8005ba0:	20000000 	.word	0x20000000
 8005ba4:	10624dd3 	.word	0x10624dd3

08005ba8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b082      	sub	sp, #8
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d101      	bne.n	8005bba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	e076      	b.n	8005ca8 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d108      	bne.n	8005bd4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	685b      	ldr	r3, [r3, #4]
 8005bc6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005bca:	d009      	beq.n	8005be0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	61da      	str	r2, [r3, #28]
 8005bd2:	e005      	b.n	8005be0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2200      	movs	r2, #0
 8005be4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005bec:	b2db      	uxtb	r3, r3
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d106      	bne.n	8005c00 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005bfa:	6878      	ldr	r0, [r7, #4]
 8005bfc:	f7fb ffee 	bl	8001bdc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2202      	movs	r2, #2
 8005c04:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	681a      	ldr	r2, [r3, #0]
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005c16:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	689b      	ldr	r3, [r3, #8]
 8005c24:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005c28:	431a      	orrs	r2, r3
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	68db      	ldr	r3, [r3, #12]
 8005c2e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005c32:	431a      	orrs	r2, r3
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	691b      	ldr	r3, [r3, #16]
 8005c38:	f003 0302 	and.w	r3, r3, #2
 8005c3c:	431a      	orrs	r2, r3
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	695b      	ldr	r3, [r3, #20]
 8005c42:	f003 0301 	and.w	r3, r3, #1
 8005c46:	431a      	orrs	r2, r3
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	699b      	ldr	r3, [r3, #24]
 8005c4c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005c50:	431a      	orrs	r2, r3
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	69db      	ldr	r3, [r3, #28]
 8005c56:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005c5a:	431a      	orrs	r2, r3
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6a1b      	ldr	r3, [r3, #32]
 8005c60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c64:	ea42 0103 	orr.w	r1, r2, r3
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c6c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	430a      	orrs	r2, r1
 8005c76:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	699b      	ldr	r3, [r3, #24]
 8005c7c:	0c1a      	lsrs	r2, r3, #16
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f002 0204 	and.w	r2, r2, #4
 8005c86:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	69da      	ldr	r2, [r3, #28]
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005c96:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2201      	movs	r2, #1
 8005ca2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005ca6:	2300      	movs	r3, #0
}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	3708      	adds	r7, #8
 8005cac:	46bd      	mov	sp, r7
 8005cae:	bd80      	pop	{r7, pc}

08005cb0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b088      	sub	sp, #32
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	60f8      	str	r0, [r7, #12]
 8005cb8:	60b9      	str	r1, [r7, #8]
 8005cba:	603b      	str	r3, [r7, #0]
 8005cbc:	4613      	mov	r3, r2
 8005cbe:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005cc0:	f7fc fa0e 	bl	80020e0 <HAL_GetTick>
 8005cc4:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005cc6:	88fb      	ldrh	r3, [r7, #6]
 8005cc8:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005cd0:	b2db      	uxtb	r3, r3
 8005cd2:	2b01      	cmp	r3, #1
 8005cd4:	d001      	beq.n	8005cda <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005cd6:	2302      	movs	r3, #2
 8005cd8:	e12a      	b.n	8005f30 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d002      	beq.n	8005ce6 <HAL_SPI_Transmit+0x36>
 8005ce0:	88fb      	ldrh	r3, [r7, #6]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d101      	bne.n	8005cea <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	e122      	b.n	8005f30 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005cf0:	2b01      	cmp	r3, #1
 8005cf2:	d101      	bne.n	8005cf8 <HAL_SPI_Transmit+0x48>
 8005cf4:	2302      	movs	r3, #2
 8005cf6:	e11b      	b.n	8005f30 <HAL_SPI_Transmit+0x280>
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	2203      	movs	r2, #3
 8005d04:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	68ba      	ldr	r2, [r7, #8]
 8005d12:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	88fa      	ldrh	r2, [r7, #6]
 8005d18:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	88fa      	ldrh	r2, [r7, #6]
 8005d1e:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	2200      	movs	r2, #0
 8005d24:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	2200      	movs	r2, #0
 8005d30:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	2200      	movs	r2, #0
 8005d36:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	689b      	ldr	r3, [r3, #8]
 8005d42:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005d46:	d10f      	bne.n	8005d68 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	681a      	ldr	r2, [r3, #0]
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005d56:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	681a      	ldr	r2, [r3, #0]
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005d66:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d72:	2b40      	cmp	r3, #64	@ 0x40
 8005d74:	d007      	beq.n	8005d86 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	681a      	ldr	r2, [r3, #0]
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005d84:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	68db      	ldr	r3, [r3, #12]
 8005d8a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005d8e:	d152      	bne.n	8005e36 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	685b      	ldr	r3, [r3, #4]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d002      	beq.n	8005d9e <HAL_SPI_Transmit+0xee>
 8005d98:	8b7b      	ldrh	r3, [r7, #26]
 8005d9a:	2b01      	cmp	r3, #1
 8005d9c:	d145      	bne.n	8005e2a <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005da2:	881a      	ldrh	r2, [r3, #0]
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dae:	1c9a      	adds	r2, r3, #2
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005db8:	b29b      	uxth	r3, r3
 8005dba:	3b01      	subs	r3, #1
 8005dbc:	b29a      	uxth	r2, r3
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005dc2:	e032      	b.n	8005e2a <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	689b      	ldr	r3, [r3, #8]
 8005dca:	f003 0302 	and.w	r3, r3, #2
 8005dce:	2b02      	cmp	r3, #2
 8005dd0:	d112      	bne.n	8005df8 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dd6:	881a      	ldrh	r2, [r3, #0]
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005de2:	1c9a      	adds	r2, r3, #2
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005dec:	b29b      	uxth	r3, r3
 8005dee:	3b01      	subs	r3, #1
 8005df0:	b29a      	uxth	r2, r3
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005df6:	e018      	b.n	8005e2a <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005df8:	f7fc f972 	bl	80020e0 <HAL_GetTick>
 8005dfc:	4602      	mov	r2, r0
 8005dfe:	69fb      	ldr	r3, [r7, #28]
 8005e00:	1ad3      	subs	r3, r2, r3
 8005e02:	683a      	ldr	r2, [r7, #0]
 8005e04:	429a      	cmp	r2, r3
 8005e06:	d803      	bhi.n	8005e10 <HAL_SPI_Transmit+0x160>
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e0e:	d102      	bne.n	8005e16 <HAL_SPI_Transmit+0x166>
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d109      	bne.n	8005e2a <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	2201      	movs	r2, #1
 8005e1a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	2200      	movs	r2, #0
 8005e22:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005e26:	2303      	movs	r3, #3
 8005e28:	e082      	b.n	8005f30 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005e2e:	b29b      	uxth	r3, r3
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d1c7      	bne.n	8005dc4 <HAL_SPI_Transmit+0x114>
 8005e34:	e053      	b.n	8005ede <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	685b      	ldr	r3, [r3, #4]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d002      	beq.n	8005e44 <HAL_SPI_Transmit+0x194>
 8005e3e:	8b7b      	ldrh	r3, [r7, #26]
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	d147      	bne.n	8005ed4 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	330c      	adds	r3, #12
 8005e4e:	7812      	ldrb	r2, [r2, #0]
 8005e50:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e56:	1c5a      	adds	r2, r3, #1
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005e60:	b29b      	uxth	r3, r3
 8005e62:	3b01      	subs	r3, #1
 8005e64:	b29a      	uxth	r2, r3
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005e6a:	e033      	b.n	8005ed4 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	689b      	ldr	r3, [r3, #8]
 8005e72:	f003 0302 	and.w	r3, r3, #2
 8005e76:	2b02      	cmp	r3, #2
 8005e78:	d113      	bne.n	8005ea2 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	330c      	adds	r3, #12
 8005e84:	7812      	ldrb	r2, [r2, #0]
 8005e86:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e8c:	1c5a      	adds	r2, r3, #1
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005e96:	b29b      	uxth	r3, r3
 8005e98:	3b01      	subs	r3, #1
 8005e9a:	b29a      	uxth	r2, r3
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005ea0:	e018      	b.n	8005ed4 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ea2:	f7fc f91d 	bl	80020e0 <HAL_GetTick>
 8005ea6:	4602      	mov	r2, r0
 8005ea8:	69fb      	ldr	r3, [r7, #28]
 8005eaa:	1ad3      	subs	r3, r2, r3
 8005eac:	683a      	ldr	r2, [r7, #0]
 8005eae:	429a      	cmp	r2, r3
 8005eb0:	d803      	bhi.n	8005eba <HAL_SPI_Transmit+0x20a>
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eb8:	d102      	bne.n	8005ec0 <HAL_SPI_Transmit+0x210>
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d109      	bne.n	8005ed4 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	2201      	movs	r2, #1
 8005ec4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005ed0:	2303      	movs	r3, #3
 8005ed2:	e02d      	b.n	8005f30 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005ed8:	b29b      	uxth	r3, r3
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d1c6      	bne.n	8005e6c <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005ede:	69fa      	ldr	r2, [r7, #28]
 8005ee0:	6839      	ldr	r1, [r7, #0]
 8005ee2:	68f8      	ldr	r0, [r7, #12]
 8005ee4:	f000 fcc8 	bl	8006878 <SPI_EndRxTxTransaction>
 8005ee8:	4603      	mov	r3, r0
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d002      	beq.n	8005ef4 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	2220      	movs	r2, #32
 8005ef2:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	689b      	ldr	r3, [r3, #8]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d10a      	bne.n	8005f12 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005efc:	2300      	movs	r3, #0
 8005efe:	617b      	str	r3, [r7, #20]
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	68db      	ldr	r3, [r3, #12]
 8005f06:	617b      	str	r3, [r7, #20]
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	689b      	ldr	r3, [r3, #8]
 8005f0e:	617b      	str	r3, [r7, #20]
 8005f10:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	2201      	movs	r2, #1
 8005f16:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d001      	beq.n	8005f2e <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	e000      	b.n	8005f30 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8005f2e:	2300      	movs	r3, #0
  }
}
 8005f30:	4618      	mov	r0, r3
 8005f32:	3720      	adds	r7, #32
 8005f34:	46bd      	mov	sp, r7
 8005f36:	bd80      	pop	{r7, pc}

08005f38 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b088      	sub	sp, #32
 8005f3c:	af02      	add	r7, sp, #8
 8005f3e:	60f8      	str	r0, [r7, #12]
 8005f40:	60b9      	str	r1, [r7, #8]
 8005f42:	603b      	str	r3, [r7, #0]
 8005f44:	4613      	mov	r3, r2
 8005f46:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005f4e:	b2db      	uxtb	r3, r3
 8005f50:	2b01      	cmp	r3, #1
 8005f52:	d001      	beq.n	8005f58 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8005f54:	2302      	movs	r3, #2
 8005f56:	e104      	b.n	8006162 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	685b      	ldr	r3, [r3, #4]
 8005f5c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005f60:	d112      	bne.n	8005f88 <HAL_SPI_Receive+0x50>
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	689b      	ldr	r3, [r3, #8]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d10e      	bne.n	8005f88 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	2204      	movs	r2, #4
 8005f6e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005f72:	88fa      	ldrh	r2, [r7, #6]
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	9300      	str	r3, [sp, #0]
 8005f78:	4613      	mov	r3, r2
 8005f7a:	68ba      	ldr	r2, [r7, #8]
 8005f7c:	68b9      	ldr	r1, [r7, #8]
 8005f7e:	68f8      	ldr	r0, [r7, #12]
 8005f80:	f000 f8f3 	bl	800616a <HAL_SPI_TransmitReceive>
 8005f84:	4603      	mov	r3, r0
 8005f86:	e0ec      	b.n	8006162 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005f88:	f7fc f8aa 	bl	80020e0 <HAL_GetTick>
 8005f8c:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d002      	beq.n	8005f9a <HAL_SPI_Receive+0x62>
 8005f94:	88fb      	ldrh	r3, [r7, #6]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d101      	bne.n	8005f9e <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	e0e1      	b.n	8006162 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005fa4:	2b01      	cmp	r3, #1
 8005fa6:	d101      	bne.n	8005fac <HAL_SPI_Receive+0x74>
 8005fa8:	2302      	movs	r3, #2
 8005faa:	e0da      	b.n	8006162 <HAL_SPI_Receive+0x22a>
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	2201      	movs	r2, #1
 8005fb0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	2204      	movs	r2, #4
 8005fb8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	68ba      	ldr	r2, [r7, #8]
 8005fc6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	88fa      	ldrh	r2, [r7, #6]
 8005fcc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	88fa      	ldrh	r2, [r7, #6]
 8005fd2:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	689b      	ldr	r3, [r3, #8]
 8005ff6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005ffa:	d10f      	bne.n	800601c <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	681a      	ldr	r2, [r3, #0]
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800600a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	681a      	ldr	r2, [r3, #0]
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800601a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006026:	2b40      	cmp	r3, #64	@ 0x40
 8006028:	d007      	beq.n	800603a <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	681a      	ldr	r2, [r3, #0]
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006038:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	68db      	ldr	r3, [r3, #12]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d170      	bne.n	8006124 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006042:	e035      	b.n	80060b0 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	689b      	ldr	r3, [r3, #8]
 800604a:	f003 0301 	and.w	r3, r3, #1
 800604e:	2b01      	cmp	r3, #1
 8006050:	d115      	bne.n	800607e <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f103 020c 	add.w	r2, r3, #12
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800605e:	7812      	ldrb	r2, [r2, #0]
 8006060:	b2d2      	uxtb	r2, r2
 8006062:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006068:	1c5a      	adds	r2, r3, #1
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006072:	b29b      	uxth	r3, r3
 8006074:	3b01      	subs	r3, #1
 8006076:	b29a      	uxth	r2, r3
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800607c:	e018      	b.n	80060b0 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800607e:	f7fc f82f 	bl	80020e0 <HAL_GetTick>
 8006082:	4602      	mov	r2, r0
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	1ad3      	subs	r3, r2, r3
 8006088:	683a      	ldr	r2, [r7, #0]
 800608a:	429a      	cmp	r2, r3
 800608c:	d803      	bhi.n	8006096 <HAL_SPI_Receive+0x15e>
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006094:	d102      	bne.n	800609c <HAL_SPI_Receive+0x164>
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d109      	bne.n	80060b0 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	2201      	movs	r2, #1
 80060a0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	2200      	movs	r2, #0
 80060a8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80060ac:	2303      	movs	r3, #3
 80060ae:	e058      	b.n	8006162 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80060b4:	b29b      	uxth	r3, r3
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d1c4      	bne.n	8006044 <HAL_SPI_Receive+0x10c>
 80060ba:	e038      	b.n	800612e <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	689b      	ldr	r3, [r3, #8]
 80060c2:	f003 0301 	and.w	r3, r3, #1
 80060c6:	2b01      	cmp	r3, #1
 80060c8:	d113      	bne.n	80060f2 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	68da      	ldr	r2, [r3, #12]
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060d4:	b292      	uxth	r2, r2
 80060d6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060dc:	1c9a      	adds	r2, r3, #2
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80060e6:	b29b      	uxth	r3, r3
 80060e8:	3b01      	subs	r3, #1
 80060ea:	b29a      	uxth	r2, r3
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80060f0:	e018      	b.n	8006124 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80060f2:	f7fb fff5 	bl	80020e0 <HAL_GetTick>
 80060f6:	4602      	mov	r2, r0
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	1ad3      	subs	r3, r2, r3
 80060fc:	683a      	ldr	r2, [r7, #0]
 80060fe:	429a      	cmp	r2, r3
 8006100:	d803      	bhi.n	800610a <HAL_SPI_Receive+0x1d2>
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006108:	d102      	bne.n	8006110 <HAL_SPI_Receive+0x1d8>
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d109      	bne.n	8006124 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	2201      	movs	r2, #1
 8006114:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	2200      	movs	r2, #0
 800611c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006120:	2303      	movs	r3, #3
 8006122:	e01e      	b.n	8006162 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006128:	b29b      	uxth	r3, r3
 800612a:	2b00      	cmp	r3, #0
 800612c:	d1c6      	bne.n	80060bc <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800612e:	697a      	ldr	r2, [r7, #20]
 8006130:	6839      	ldr	r1, [r7, #0]
 8006132:	68f8      	ldr	r0, [r7, #12]
 8006134:	f000 fb4e 	bl	80067d4 <SPI_EndRxTransaction>
 8006138:	4603      	mov	r3, r0
 800613a:	2b00      	cmp	r3, #0
 800613c:	d002      	beq.n	8006144 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	2220      	movs	r2, #32
 8006142:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	2201      	movs	r2, #1
 8006148:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	2200      	movs	r2, #0
 8006150:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006158:	2b00      	cmp	r3, #0
 800615a:	d001      	beq.n	8006160 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 800615c:	2301      	movs	r3, #1
 800615e:	e000      	b.n	8006162 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8006160:	2300      	movs	r3, #0
  }
}
 8006162:	4618      	mov	r0, r3
 8006164:	3718      	adds	r7, #24
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}

0800616a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800616a:	b580      	push	{r7, lr}
 800616c:	b08a      	sub	sp, #40	@ 0x28
 800616e:	af00      	add	r7, sp, #0
 8006170:	60f8      	str	r0, [r7, #12]
 8006172:	60b9      	str	r1, [r7, #8]
 8006174:	607a      	str	r2, [r7, #4]
 8006176:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006178:	2301      	movs	r3, #1
 800617a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800617c:	f7fb ffb0 	bl	80020e0 <HAL_GetTick>
 8006180:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006188:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	685b      	ldr	r3, [r3, #4]
 800618e:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8006190:	887b      	ldrh	r3, [r7, #2]
 8006192:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006194:	7ffb      	ldrb	r3, [r7, #31]
 8006196:	2b01      	cmp	r3, #1
 8006198:	d00c      	beq.n	80061b4 <HAL_SPI_TransmitReceive+0x4a>
 800619a:	69bb      	ldr	r3, [r7, #24]
 800619c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80061a0:	d106      	bne.n	80061b0 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	689b      	ldr	r3, [r3, #8]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d102      	bne.n	80061b0 <HAL_SPI_TransmitReceive+0x46>
 80061aa:	7ffb      	ldrb	r3, [r7, #31]
 80061ac:	2b04      	cmp	r3, #4
 80061ae:	d001      	beq.n	80061b4 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80061b0:	2302      	movs	r3, #2
 80061b2:	e17f      	b.n	80064b4 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d005      	beq.n	80061c6 <HAL_SPI_TransmitReceive+0x5c>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d002      	beq.n	80061c6 <HAL_SPI_TransmitReceive+0x5c>
 80061c0:	887b      	ldrh	r3, [r7, #2]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d101      	bne.n	80061ca <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80061c6:	2301      	movs	r3, #1
 80061c8:	e174      	b.n	80064b4 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80061d0:	2b01      	cmp	r3, #1
 80061d2:	d101      	bne.n	80061d8 <HAL_SPI_TransmitReceive+0x6e>
 80061d4:	2302      	movs	r3, #2
 80061d6:	e16d      	b.n	80064b4 <HAL_SPI_TransmitReceive+0x34a>
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	2201      	movs	r2, #1
 80061dc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80061e6:	b2db      	uxtb	r3, r3
 80061e8:	2b04      	cmp	r3, #4
 80061ea:	d003      	beq.n	80061f4 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	2205      	movs	r2, #5
 80061f0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	2200      	movs	r2, #0
 80061f8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	687a      	ldr	r2, [r7, #4]
 80061fe:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	887a      	ldrh	r2, [r7, #2]
 8006204:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	887a      	ldrh	r2, [r7, #2]
 800620a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	68ba      	ldr	r2, [r7, #8]
 8006210:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	887a      	ldrh	r2, [r7, #2]
 8006216:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	887a      	ldrh	r2, [r7, #2]
 800621c:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	2200      	movs	r2, #0
 8006222:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	2200      	movs	r2, #0
 8006228:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006234:	2b40      	cmp	r3, #64	@ 0x40
 8006236:	d007      	beq.n	8006248 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	681a      	ldr	r2, [r3, #0]
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006246:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	68db      	ldr	r3, [r3, #12]
 800624c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006250:	d17e      	bne.n	8006350 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	685b      	ldr	r3, [r3, #4]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d002      	beq.n	8006260 <HAL_SPI_TransmitReceive+0xf6>
 800625a:	8afb      	ldrh	r3, [r7, #22]
 800625c:	2b01      	cmp	r3, #1
 800625e:	d16c      	bne.n	800633a <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006264:	881a      	ldrh	r2, [r3, #0]
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006270:	1c9a      	adds	r2, r3, #2
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800627a:	b29b      	uxth	r3, r3
 800627c:	3b01      	subs	r3, #1
 800627e:	b29a      	uxth	r2, r3
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006284:	e059      	b.n	800633a <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	689b      	ldr	r3, [r3, #8]
 800628c:	f003 0302 	and.w	r3, r3, #2
 8006290:	2b02      	cmp	r3, #2
 8006292:	d11b      	bne.n	80062cc <HAL_SPI_TransmitReceive+0x162>
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006298:	b29b      	uxth	r3, r3
 800629a:	2b00      	cmp	r3, #0
 800629c:	d016      	beq.n	80062cc <HAL_SPI_TransmitReceive+0x162>
 800629e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062a0:	2b01      	cmp	r3, #1
 80062a2:	d113      	bne.n	80062cc <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062a8:	881a      	ldrh	r2, [r3, #0]
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062b4:	1c9a      	adds	r2, r3, #2
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80062be:	b29b      	uxth	r3, r3
 80062c0:	3b01      	subs	r3, #1
 80062c2:	b29a      	uxth	r2, r3
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80062c8:	2300      	movs	r3, #0
 80062ca:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	689b      	ldr	r3, [r3, #8]
 80062d2:	f003 0301 	and.w	r3, r3, #1
 80062d6:	2b01      	cmp	r3, #1
 80062d8:	d119      	bne.n	800630e <HAL_SPI_TransmitReceive+0x1a4>
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80062de:	b29b      	uxth	r3, r3
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d014      	beq.n	800630e <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	68da      	ldr	r2, [r3, #12]
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062ee:	b292      	uxth	r2, r2
 80062f0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062f6:	1c9a      	adds	r2, r3, #2
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006300:	b29b      	uxth	r3, r3
 8006302:	3b01      	subs	r3, #1
 8006304:	b29a      	uxth	r2, r3
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800630a:	2301      	movs	r3, #1
 800630c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800630e:	f7fb fee7 	bl	80020e0 <HAL_GetTick>
 8006312:	4602      	mov	r2, r0
 8006314:	6a3b      	ldr	r3, [r7, #32]
 8006316:	1ad3      	subs	r3, r2, r3
 8006318:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800631a:	429a      	cmp	r2, r3
 800631c:	d80d      	bhi.n	800633a <HAL_SPI_TransmitReceive+0x1d0>
 800631e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006320:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006324:	d009      	beq.n	800633a <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	2201      	movs	r2, #1
 800632a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	2200      	movs	r2, #0
 8006332:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8006336:	2303      	movs	r3, #3
 8006338:	e0bc      	b.n	80064b4 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800633e:	b29b      	uxth	r3, r3
 8006340:	2b00      	cmp	r3, #0
 8006342:	d1a0      	bne.n	8006286 <HAL_SPI_TransmitReceive+0x11c>
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006348:	b29b      	uxth	r3, r3
 800634a:	2b00      	cmp	r3, #0
 800634c:	d19b      	bne.n	8006286 <HAL_SPI_TransmitReceive+0x11c>
 800634e:	e082      	b.n	8006456 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	685b      	ldr	r3, [r3, #4]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d002      	beq.n	800635e <HAL_SPI_TransmitReceive+0x1f4>
 8006358:	8afb      	ldrh	r3, [r7, #22]
 800635a:	2b01      	cmp	r3, #1
 800635c:	d171      	bne.n	8006442 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	330c      	adds	r3, #12
 8006368:	7812      	ldrb	r2, [r2, #0]
 800636a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006370:	1c5a      	adds	r2, r3, #1
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800637a:	b29b      	uxth	r3, r3
 800637c:	3b01      	subs	r3, #1
 800637e:	b29a      	uxth	r2, r3
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006384:	e05d      	b.n	8006442 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	689b      	ldr	r3, [r3, #8]
 800638c:	f003 0302 	and.w	r3, r3, #2
 8006390:	2b02      	cmp	r3, #2
 8006392:	d11c      	bne.n	80063ce <HAL_SPI_TransmitReceive+0x264>
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006398:	b29b      	uxth	r3, r3
 800639a:	2b00      	cmp	r3, #0
 800639c:	d017      	beq.n	80063ce <HAL_SPI_TransmitReceive+0x264>
 800639e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063a0:	2b01      	cmp	r3, #1
 80063a2:	d114      	bne.n	80063ce <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	330c      	adds	r3, #12
 80063ae:	7812      	ldrb	r2, [r2, #0]
 80063b0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063b6:	1c5a      	adds	r2, r3, #1
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80063c0:	b29b      	uxth	r3, r3
 80063c2:	3b01      	subs	r3, #1
 80063c4:	b29a      	uxth	r2, r3
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80063ca:	2300      	movs	r3, #0
 80063cc:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	689b      	ldr	r3, [r3, #8]
 80063d4:	f003 0301 	and.w	r3, r3, #1
 80063d8:	2b01      	cmp	r3, #1
 80063da:	d119      	bne.n	8006410 <HAL_SPI_TransmitReceive+0x2a6>
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80063e0:	b29b      	uxth	r3, r3
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d014      	beq.n	8006410 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	68da      	ldr	r2, [r3, #12]
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063f0:	b2d2      	uxtb	r2, r2
 80063f2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063f8:	1c5a      	adds	r2, r3, #1
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006402:	b29b      	uxth	r3, r3
 8006404:	3b01      	subs	r3, #1
 8006406:	b29a      	uxth	r2, r3
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800640c:	2301      	movs	r3, #1
 800640e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006410:	f7fb fe66 	bl	80020e0 <HAL_GetTick>
 8006414:	4602      	mov	r2, r0
 8006416:	6a3b      	ldr	r3, [r7, #32]
 8006418:	1ad3      	subs	r3, r2, r3
 800641a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800641c:	429a      	cmp	r2, r3
 800641e:	d803      	bhi.n	8006428 <HAL_SPI_TransmitReceive+0x2be>
 8006420:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006422:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006426:	d102      	bne.n	800642e <HAL_SPI_TransmitReceive+0x2c4>
 8006428:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800642a:	2b00      	cmp	r3, #0
 800642c:	d109      	bne.n	8006442 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	2201      	movs	r2, #1
 8006432:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	2200      	movs	r2, #0
 800643a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800643e:	2303      	movs	r3, #3
 8006440:	e038      	b.n	80064b4 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006446:	b29b      	uxth	r3, r3
 8006448:	2b00      	cmp	r3, #0
 800644a:	d19c      	bne.n	8006386 <HAL_SPI_TransmitReceive+0x21c>
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006450:	b29b      	uxth	r3, r3
 8006452:	2b00      	cmp	r3, #0
 8006454:	d197      	bne.n	8006386 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006456:	6a3a      	ldr	r2, [r7, #32]
 8006458:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800645a:	68f8      	ldr	r0, [r7, #12]
 800645c:	f000 fa0c 	bl	8006878 <SPI_EndRxTxTransaction>
 8006460:	4603      	mov	r3, r0
 8006462:	2b00      	cmp	r3, #0
 8006464:	d008      	beq.n	8006478 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	2220      	movs	r2, #32
 800646a:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	2200      	movs	r2, #0
 8006470:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8006474:	2301      	movs	r3, #1
 8006476:	e01d      	b.n	80064b4 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	689b      	ldr	r3, [r3, #8]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d10a      	bne.n	8006496 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006480:	2300      	movs	r3, #0
 8006482:	613b      	str	r3, [r7, #16]
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	68db      	ldr	r3, [r3, #12]
 800648a:	613b      	str	r3, [r7, #16]
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	689b      	ldr	r3, [r3, #8]
 8006492:	613b      	str	r3, [r7, #16]
 8006494:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	2201      	movs	r2, #1
 800649a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	2200      	movs	r2, #0
 80064a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d001      	beq.n	80064b2 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80064ae:	2301      	movs	r3, #1
 80064b0:	e000      	b.n	80064b4 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80064b2:	2300      	movs	r3, #0
  }
}
 80064b4:	4618      	mov	r0, r3
 80064b6:	3728      	adds	r7, #40	@ 0x28
 80064b8:	46bd      	mov	sp, r7
 80064ba:	bd80      	pop	{r7, pc}

080064bc <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b088      	sub	sp, #32
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	685b      	ldr	r3, [r3, #4]
 80064ca:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	689b      	ldr	r3, [r3, #8]
 80064d2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80064d4:	69bb      	ldr	r3, [r7, #24]
 80064d6:	099b      	lsrs	r3, r3, #6
 80064d8:	f003 0301 	and.w	r3, r3, #1
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d10f      	bne.n	8006500 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80064e0:	69bb      	ldr	r3, [r7, #24]
 80064e2:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d00a      	beq.n	8006500 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80064ea:	69fb      	ldr	r3, [r7, #28]
 80064ec:	099b      	lsrs	r3, r3, #6
 80064ee:	f003 0301 	and.w	r3, r3, #1
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d004      	beq.n	8006500 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	4798      	blx	r3
    return;
 80064fe:	e0be      	b.n	800667e <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006500:	69bb      	ldr	r3, [r7, #24]
 8006502:	085b      	lsrs	r3, r3, #1
 8006504:	f003 0301 	and.w	r3, r3, #1
 8006508:	2b00      	cmp	r3, #0
 800650a:	d00a      	beq.n	8006522 <HAL_SPI_IRQHandler+0x66>
 800650c:	69fb      	ldr	r3, [r7, #28]
 800650e:	09db      	lsrs	r3, r3, #7
 8006510:	f003 0301 	and.w	r3, r3, #1
 8006514:	2b00      	cmp	r3, #0
 8006516:	d004      	beq.n	8006522 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800651c:	6878      	ldr	r0, [r7, #4]
 800651e:	4798      	blx	r3
    return;
 8006520:	e0ad      	b.n	800667e <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8006522:	69bb      	ldr	r3, [r7, #24]
 8006524:	095b      	lsrs	r3, r3, #5
 8006526:	f003 0301 	and.w	r3, r3, #1
 800652a:	2b00      	cmp	r3, #0
 800652c:	d106      	bne.n	800653c <HAL_SPI_IRQHandler+0x80>
 800652e:	69bb      	ldr	r3, [r7, #24]
 8006530:	099b      	lsrs	r3, r3, #6
 8006532:	f003 0301 	and.w	r3, r3, #1
 8006536:	2b00      	cmp	r3, #0
 8006538:	f000 80a1 	beq.w	800667e <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800653c:	69fb      	ldr	r3, [r7, #28]
 800653e:	095b      	lsrs	r3, r3, #5
 8006540:	f003 0301 	and.w	r3, r3, #1
 8006544:	2b00      	cmp	r3, #0
 8006546:	f000 809a 	beq.w	800667e <HAL_SPI_IRQHandler+0x1c2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800654a:	69bb      	ldr	r3, [r7, #24]
 800654c:	099b      	lsrs	r3, r3, #6
 800654e:	f003 0301 	and.w	r3, r3, #1
 8006552:	2b00      	cmp	r3, #0
 8006554:	d023      	beq.n	800659e <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800655c:	b2db      	uxtb	r3, r3
 800655e:	2b03      	cmp	r3, #3
 8006560:	d011      	beq.n	8006586 <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006566:	f043 0204 	orr.w	r2, r3, #4
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800656e:	2300      	movs	r3, #0
 8006570:	617b      	str	r3, [r7, #20]
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	68db      	ldr	r3, [r3, #12]
 8006578:	617b      	str	r3, [r7, #20]
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	689b      	ldr	r3, [r3, #8]
 8006580:	617b      	str	r3, [r7, #20]
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	e00b      	b.n	800659e <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006586:	2300      	movs	r3, #0
 8006588:	613b      	str	r3, [r7, #16]
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	68db      	ldr	r3, [r3, #12]
 8006590:	613b      	str	r3, [r7, #16]
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	689b      	ldr	r3, [r3, #8]
 8006598:	613b      	str	r3, [r7, #16]
 800659a:	693b      	ldr	r3, [r7, #16]
        return;
 800659c:	e06f      	b.n	800667e <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800659e:	69bb      	ldr	r3, [r7, #24]
 80065a0:	095b      	lsrs	r3, r3, #5
 80065a2:	f003 0301 	and.w	r3, r3, #1
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d014      	beq.n	80065d4 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065ae:	f043 0201 	orr.w	r2, r3, #1
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80065b6:	2300      	movs	r3, #0
 80065b8:	60fb      	str	r3, [r7, #12]
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	689b      	ldr	r3, [r3, #8]
 80065c0:	60fb      	str	r3, [r7, #12]
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	681a      	ldr	r2, [r3, #0]
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80065d0:	601a      	str	r2, [r3, #0]
 80065d2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d04f      	beq.n	800667c <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	685a      	ldr	r2, [r3, #4]
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80065ea:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2201      	movs	r2, #1
 80065f0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80065f4:	69fb      	ldr	r3, [r7, #28]
 80065f6:	f003 0302 	and.w	r3, r3, #2
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d104      	bne.n	8006608 <HAL_SPI_IRQHandler+0x14c>
 80065fe:	69fb      	ldr	r3, [r7, #28]
 8006600:	f003 0301 	and.w	r3, r3, #1
 8006604:	2b00      	cmp	r3, #0
 8006606:	d034      	beq.n	8006672 <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	685a      	ldr	r2, [r3, #4]
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f022 0203 	bic.w	r2, r2, #3
 8006616:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800661c:	2b00      	cmp	r3, #0
 800661e:	d011      	beq.n	8006644 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006624:	4a17      	ldr	r2, [pc, #92]	@ (8006684 <HAL_SPI_IRQHandler+0x1c8>)
 8006626:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800662c:	4618      	mov	r0, r3
 800662e:	f7fb fecd 	bl	80023cc <HAL_DMA_Abort_IT>
 8006632:	4603      	mov	r3, r0
 8006634:	2b00      	cmp	r3, #0
 8006636:	d005      	beq.n	8006644 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800663c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006648:	2b00      	cmp	r3, #0
 800664a:	d016      	beq.n	800667a <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006650:	4a0c      	ldr	r2, [pc, #48]	@ (8006684 <HAL_SPI_IRQHandler+0x1c8>)
 8006652:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006658:	4618      	mov	r0, r3
 800665a:	f7fb feb7 	bl	80023cc <HAL_DMA_Abort_IT>
 800665e:	4603      	mov	r3, r0
 8006660:	2b00      	cmp	r3, #0
 8006662:	d00a      	beq.n	800667a <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006668:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8006670:	e003      	b.n	800667a <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	f000 f808 	bl	8006688 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006678:	e000      	b.n	800667c <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 800667a:	bf00      	nop
    return;
 800667c:	bf00      	nop
  }
}
 800667e:	3720      	adds	r7, #32
 8006680:	46bd      	mov	sp, r7
 8006682:	bd80      	pop	{r7, pc}
 8006684:	0800669b 	.word	0x0800669b

08006688 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006688:	b480      	push	{r7}
 800668a:	b083      	sub	sp, #12
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006690:	bf00      	nop
 8006692:	370c      	adds	r7, #12
 8006694:	46bd      	mov	sp, r7
 8006696:	bc80      	pop	{r7}
 8006698:	4770      	bx	lr

0800669a <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800669a:	b580      	push	{r7, lr}
 800669c:	b084      	sub	sp, #16
 800669e:	af00      	add	r7, sp, #0
 80066a0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066a6:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	2200      	movs	r2, #0
 80066ac:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	2200      	movs	r2, #0
 80066b2:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80066b4:	68f8      	ldr	r0, [r7, #12]
 80066b6:	f7ff ffe7 	bl	8006688 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80066ba:	bf00      	nop
 80066bc:	3710      	adds	r7, #16
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd80      	pop	{r7, pc}
	...

080066c4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b088      	sub	sp, #32
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	60f8      	str	r0, [r7, #12]
 80066cc:	60b9      	str	r1, [r7, #8]
 80066ce:	603b      	str	r3, [r7, #0]
 80066d0:	4613      	mov	r3, r2
 80066d2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80066d4:	f7fb fd04 	bl	80020e0 <HAL_GetTick>
 80066d8:	4602      	mov	r2, r0
 80066da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066dc:	1a9b      	subs	r3, r3, r2
 80066de:	683a      	ldr	r2, [r7, #0]
 80066e0:	4413      	add	r3, r2
 80066e2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80066e4:	f7fb fcfc 	bl	80020e0 <HAL_GetTick>
 80066e8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80066ea:	4b39      	ldr	r3, [pc, #228]	@ (80067d0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	015b      	lsls	r3, r3, #5
 80066f0:	0d1b      	lsrs	r3, r3, #20
 80066f2:	69fa      	ldr	r2, [r7, #28]
 80066f4:	fb02 f303 	mul.w	r3, r2, r3
 80066f8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80066fa:	e054      	b.n	80067a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006702:	d050      	beq.n	80067a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006704:	f7fb fcec 	bl	80020e0 <HAL_GetTick>
 8006708:	4602      	mov	r2, r0
 800670a:	69bb      	ldr	r3, [r7, #24]
 800670c:	1ad3      	subs	r3, r2, r3
 800670e:	69fa      	ldr	r2, [r7, #28]
 8006710:	429a      	cmp	r2, r3
 8006712:	d902      	bls.n	800671a <SPI_WaitFlagStateUntilTimeout+0x56>
 8006714:	69fb      	ldr	r3, [r7, #28]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d13d      	bne.n	8006796 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	685a      	ldr	r2, [r3, #4]
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006728:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	685b      	ldr	r3, [r3, #4]
 800672e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006732:	d111      	bne.n	8006758 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	689b      	ldr	r3, [r3, #8]
 8006738:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800673c:	d004      	beq.n	8006748 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	689b      	ldr	r3, [r3, #8]
 8006742:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006746:	d107      	bne.n	8006758 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	681a      	ldr	r2, [r3, #0]
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006756:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800675c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006760:	d10f      	bne.n	8006782 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	681a      	ldr	r2, [r3, #0]
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006770:	601a      	str	r2, [r3, #0]
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	681a      	ldr	r2, [r3, #0]
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006780:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	2201      	movs	r2, #1
 8006786:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	2200      	movs	r2, #0
 800678e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8006792:	2303      	movs	r3, #3
 8006794:	e017      	b.n	80067c6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006796:	697b      	ldr	r3, [r7, #20]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d101      	bne.n	80067a0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800679c:	2300      	movs	r3, #0
 800679e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80067a0:	697b      	ldr	r3, [r7, #20]
 80067a2:	3b01      	subs	r3, #1
 80067a4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	689a      	ldr	r2, [r3, #8]
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	4013      	ands	r3, r2
 80067b0:	68ba      	ldr	r2, [r7, #8]
 80067b2:	429a      	cmp	r2, r3
 80067b4:	bf0c      	ite	eq
 80067b6:	2301      	moveq	r3, #1
 80067b8:	2300      	movne	r3, #0
 80067ba:	b2db      	uxtb	r3, r3
 80067bc:	461a      	mov	r2, r3
 80067be:	79fb      	ldrb	r3, [r7, #7]
 80067c0:	429a      	cmp	r2, r3
 80067c2:	d19b      	bne.n	80066fc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80067c4:	2300      	movs	r3, #0
}
 80067c6:	4618      	mov	r0, r3
 80067c8:	3720      	adds	r7, #32
 80067ca:	46bd      	mov	sp, r7
 80067cc:	bd80      	pop	{r7, pc}
 80067ce:	bf00      	nop
 80067d0:	20000000 	.word	0x20000000

080067d4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b086      	sub	sp, #24
 80067d8:	af02      	add	r7, sp, #8
 80067da:	60f8      	str	r0, [r7, #12]
 80067dc:	60b9      	str	r1, [r7, #8]
 80067de:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	685b      	ldr	r3, [r3, #4]
 80067e4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80067e8:	d111      	bne.n	800680e <SPI_EndRxTransaction+0x3a>
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	689b      	ldr	r3, [r3, #8]
 80067ee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80067f2:	d004      	beq.n	80067fe <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	689b      	ldr	r3, [r3, #8]
 80067f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80067fc:	d107      	bne.n	800680e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	681a      	ldr	r2, [r3, #0]
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800680c:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	685b      	ldr	r3, [r3, #4]
 8006812:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006816:	d117      	bne.n	8006848 <SPI_EndRxTransaction+0x74>
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	689b      	ldr	r3, [r3, #8]
 800681c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006820:	d112      	bne.n	8006848 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	9300      	str	r3, [sp, #0]
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	2200      	movs	r2, #0
 800682a:	2101      	movs	r1, #1
 800682c:	68f8      	ldr	r0, [r7, #12]
 800682e:	f7ff ff49 	bl	80066c4 <SPI_WaitFlagStateUntilTimeout>
 8006832:	4603      	mov	r3, r0
 8006834:	2b00      	cmp	r3, #0
 8006836:	d01a      	beq.n	800686e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800683c:	f043 0220 	orr.w	r2, r3, #32
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006844:	2303      	movs	r3, #3
 8006846:	e013      	b.n	8006870 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	9300      	str	r3, [sp, #0]
 800684c:	68bb      	ldr	r3, [r7, #8]
 800684e:	2200      	movs	r2, #0
 8006850:	2180      	movs	r1, #128	@ 0x80
 8006852:	68f8      	ldr	r0, [r7, #12]
 8006854:	f7ff ff36 	bl	80066c4 <SPI_WaitFlagStateUntilTimeout>
 8006858:	4603      	mov	r3, r0
 800685a:	2b00      	cmp	r3, #0
 800685c:	d007      	beq.n	800686e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006862:	f043 0220 	orr.w	r2, r3, #32
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800686a:	2303      	movs	r3, #3
 800686c:	e000      	b.n	8006870 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 800686e:	2300      	movs	r3, #0
}
 8006870:	4618      	mov	r0, r3
 8006872:	3710      	adds	r7, #16
 8006874:	46bd      	mov	sp, r7
 8006876:	bd80      	pop	{r7, pc}

08006878 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b086      	sub	sp, #24
 800687c:	af02      	add	r7, sp, #8
 800687e:	60f8      	str	r0, [r7, #12]
 8006880:	60b9      	str	r1, [r7, #8]
 8006882:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	9300      	str	r3, [sp, #0]
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	2201      	movs	r2, #1
 800688c:	2102      	movs	r1, #2
 800688e:	68f8      	ldr	r0, [r7, #12]
 8006890:	f7ff ff18 	bl	80066c4 <SPI_WaitFlagStateUntilTimeout>
 8006894:	4603      	mov	r3, r0
 8006896:	2b00      	cmp	r3, #0
 8006898:	d007      	beq.n	80068aa <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800689e:	f043 0220 	orr.w	r2, r3, #32
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80068a6:	2303      	movs	r3, #3
 80068a8:	e013      	b.n	80068d2 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	9300      	str	r3, [sp, #0]
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	2200      	movs	r2, #0
 80068b2:	2180      	movs	r1, #128	@ 0x80
 80068b4:	68f8      	ldr	r0, [r7, #12]
 80068b6:	f7ff ff05 	bl	80066c4 <SPI_WaitFlagStateUntilTimeout>
 80068ba:	4603      	mov	r3, r0
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d007      	beq.n	80068d0 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068c4:	f043 0220 	orr.w	r2, r3, #32
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80068cc:	2303      	movs	r3, #3
 80068ce:	e000      	b.n	80068d2 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 80068d0:	2300      	movs	r3, #0
}
 80068d2:	4618      	mov	r0, r3
 80068d4:	3710      	adds	r7, #16
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bd80      	pop	{r7, pc}

080068da <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80068da:	b580      	push	{r7, lr}
 80068dc:	b082      	sub	sp, #8
 80068de:	af00      	add	r7, sp, #0
 80068e0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d101      	bne.n	80068ec <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80068e8:	2301      	movs	r3, #1
 80068ea:	e042      	b.n	8006972 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80068f2:	b2db      	uxtb	r3, r3
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d106      	bne.n	8006906 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2200      	movs	r2, #0
 80068fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006900:	6878      	ldr	r0, [r7, #4]
 8006902:	f7fb fb1b 	bl	8001f3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2224      	movs	r2, #36	@ 0x24
 800690a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	68da      	ldr	r2, [r3, #12]
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800691c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800691e:	6878      	ldr	r0, [r7, #4]
 8006920:	f000 fd62 	bl	80073e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	691a      	ldr	r2, [r3, #16]
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006932:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	695a      	ldr	r2, [r3, #20]
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006942:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	68da      	ldr	r2, [r3, #12]
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006952:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2200      	movs	r2, #0
 8006958:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2220      	movs	r2, #32
 800695e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2220      	movs	r2, #32
 8006966:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2200      	movs	r2, #0
 800696e:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006970:	2300      	movs	r3, #0
}
 8006972:	4618      	mov	r0, r3
 8006974:	3708      	adds	r7, #8
 8006976:	46bd      	mov	sp, r7
 8006978:	bd80      	pop	{r7, pc}

0800697a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800697a:	b580      	push	{r7, lr}
 800697c:	b08a      	sub	sp, #40	@ 0x28
 800697e:	af02      	add	r7, sp, #8
 8006980:	60f8      	str	r0, [r7, #12]
 8006982:	60b9      	str	r1, [r7, #8]
 8006984:	603b      	str	r3, [r7, #0]
 8006986:	4613      	mov	r3, r2
 8006988:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800698a:	2300      	movs	r3, #0
 800698c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006994:	b2db      	uxtb	r3, r3
 8006996:	2b20      	cmp	r3, #32
 8006998:	d175      	bne.n	8006a86 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d002      	beq.n	80069a6 <HAL_UART_Transmit+0x2c>
 80069a0:	88fb      	ldrh	r3, [r7, #6]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d101      	bne.n	80069aa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80069a6:	2301      	movs	r3, #1
 80069a8:	e06e      	b.n	8006a88 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	2200      	movs	r2, #0
 80069ae:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	2221      	movs	r2, #33	@ 0x21
 80069b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80069b8:	f7fb fb92 	bl	80020e0 <HAL_GetTick>
 80069bc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	88fa      	ldrh	r2, [r7, #6]
 80069c2:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	88fa      	ldrh	r2, [r7, #6]
 80069c8:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	689b      	ldr	r3, [r3, #8]
 80069ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80069d2:	d108      	bne.n	80069e6 <HAL_UART_Transmit+0x6c>
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	691b      	ldr	r3, [r3, #16]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d104      	bne.n	80069e6 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80069dc:	2300      	movs	r3, #0
 80069de:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	61bb      	str	r3, [r7, #24]
 80069e4:	e003      	b.n	80069ee <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80069ea:	2300      	movs	r3, #0
 80069ec:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80069ee:	e02e      	b.n	8006a4e <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	9300      	str	r3, [sp, #0]
 80069f4:	697b      	ldr	r3, [r7, #20]
 80069f6:	2200      	movs	r2, #0
 80069f8:	2180      	movs	r1, #128	@ 0x80
 80069fa:	68f8      	ldr	r0, [r7, #12]
 80069fc:	f000 fb00 	bl	8007000 <UART_WaitOnFlagUntilTimeout>
 8006a00:	4603      	mov	r3, r0
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d005      	beq.n	8006a12 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	2220      	movs	r2, #32
 8006a0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8006a0e:	2303      	movs	r3, #3
 8006a10:	e03a      	b.n	8006a88 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006a12:	69fb      	ldr	r3, [r7, #28]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d10b      	bne.n	8006a30 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006a18:	69bb      	ldr	r3, [r7, #24]
 8006a1a:	881b      	ldrh	r3, [r3, #0]
 8006a1c:	461a      	mov	r2, r3
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006a26:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006a28:	69bb      	ldr	r3, [r7, #24]
 8006a2a:	3302      	adds	r3, #2
 8006a2c:	61bb      	str	r3, [r7, #24]
 8006a2e:	e007      	b.n	8006a40 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006a30:	69fb      	ldr	r3, [r7, #28]
 8006a32:	781a      	ldrb	r2, [r3, #0]
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006a3a:	69fb      	ldr	r3, [r7, #28]
 8006a3c:	3301      	adds	r3, #1
 8006a3e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006a44:	b29b      	uxth	r3, r3
 8006a46:	3b01      	subs	r3, #1
 8006a48:	b29a      	uxth	r2, r3
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006a52:	b29b      	uxth	r3, r3
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d1cb      	bne.n	80069f0 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	9300      	str	r3, [sp, #0]
 8006a5c:	697b      	ldr	r3, [r7, #20]
 8006a5e:	2200      	movs	r2, #0
 8006a60:	2140      	movs	r1, #64	@ 0x40
 8006a62:	68f8      	ldr	r0, [r7, #12]
 8006a64:	f000 facc 	bl	8007000 <UART_WaitOnFlagUntilTimeout>
 8006a68:	4603      	mov	r3, r0
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d005      	beq.n	8006a7a <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	2220      	movs	r2, #32
 8006a72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006a76:	2303      	movs	r3, #3
 8006a78:	e006      	b.n	8006a88 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	2220      	movs	r2, #32
 8006a7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006a82:	2300      	movs	r3, #0
 8006a84:	e000      	b.n	8006a88 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006a86:	2302      	movs	r3, #2
  }
}
 8006a88:	4618      	mov	r0, r3
 8006a8a:	3720      	adds	r7, #32
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	bd80      	pop	{r7, pc}

08006a90 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b0ba      	sub	sp, #232	@ 0xe8
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	68db      	ldr	r3, [r3, #12]
 8006aa8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	695b      	ldr	r3, [r3, #20]
 8006ab2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006abc:	2300      	movs	r3, #0
 8006abe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006ac2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ac6:	f003 030f 	and.w	r3, r3, #15
 8006aca:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006ace:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d10f      	bne.n	8006af6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006ad6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ada:	f003 0320 	and.w	r3, r3, #32
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d009      	beq.n	8006af6 <HAL_UART_IRQHandler+0x66>
 8006ae2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ae6:	f003 0320 	and.w	r3, r3, #32
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d003      	beq.n	8006af6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f000 fbbc 	bl	800726c <UART_Receive_IT>
      return;
 8006af4:	e25b      	b.n	8006fae <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006af6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	f000 80de 	beq.w	8006cbc <HAL_UART_IRQHandler+0x22c>
 8006b00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006b04:	f003 0301 	and.w	r3, r3, #1
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d106      	bne.n	8006b1a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006b0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b10:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	f000 80d1 	beq.w	8006cbc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006b1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b1e:	f003 0301 	and.w	r3, r3, #1
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d00b      	beq.n	8006b3e <HAL_UART_IRQHandler+0xae>
 8006b26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d005      	beq.n	8006b3e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b36:	f043 0201 	orr.w	r2, r3, #1
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006b3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b42:	f003 0304 	and.w	r3, r3, #4
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d00b      	beq.n	8006b62 <HAL_UART_IRQHandler+0xd2>
 8006b4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006b4e:	f003 0301 	and.w	r3, r3, #1
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d005      	beq.n	8006b62 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b5a:	f043 0202 	orr.w	r2, r3, #2
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006b62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b66:	f003 0302 	and.w	r3, r3, #2
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d00b      	beq.n	8006b86 <HAL_UART_IRQHandler+0xf6>
 8006b6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006b72:	f003 0301 	and.w	r3, r3, #1
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d005      	beq.n	8006b86 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b7e:	f043 0204 	orr.w	r2, r3, #4
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006b86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b8a:	f003 0308 	and.w	r3, r3, #8
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d011      	beq.n	8006bb6 <HAL_UART_IRQHandler+0x126>
 8006b92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b96:	f003 0320 	and.w	r3, r3, #32
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d105      	bne.n	8006baa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006b9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006ba2:	f003 0301 	and.w	r3, r3, #1
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d005      	beq.n	8006bb6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006bae:	f043 0208 	orr.w	r2, r3, #8
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	f000 81f2 	beq.w	8006fa4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006bc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006bc4:	f003 0320 	and.w	r3, r3, #32
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d008      	beq.n	8006bde <HAL_UART_IRQHandler+0x14e>
 8006bcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006bd0:	f003 0320 	and.w	r3, r3, #32
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d002      	beq.n	8006bde <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006bd8:	6878      	ldr	r0, [r7, #4]
 8006bda:	f000 fb47 	bl	800726c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	695b      	ldr	r3, [r3, #20]
 8006be4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	bf14      	ite	ne
 8006bec:	2301      	movne	r3, #1
 8006bee:	2300      	moveq	r3, #0
 8006bf0:	b2db      	uxtb	r3, r3
 8006bf2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006bfa:	f003 0308 	and.w	r3, r3, #8
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d103      	bne.n	8006c0a <HAL_UART_IRQHandler+0x17a>
 8006c02:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d04f      	beq.n	8006caa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006c0a:	6878      	ldr	r0, [r7, #4]
 8006c0c:	f000 fa51 	bl	80070b2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	695b      	ldr	r3, [r3, #20]
 8006c16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d041      	beq.n	8006ca2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	3314      	adds	r3, #20
 8006c24:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c28:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006c2c:	e853 3f00 	ldrex	r3, [r3]
 8006c30:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006c34:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006c38:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c3c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	3314      	adds	r3, #20
 8006c46:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006c4a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006c4e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c52:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006c56:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006c5a:	e841 2300 	strex	r3, r2, [r1]
 8006c5e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006c62:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d1d9      	bne.n	8006c1e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d013      	beq.n	8006c9a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c76:	4a7e      	ldr	r2, [pc, #504]	@ (8006e70 <HAL_UART_IRQHandler+0x3e0>)
 8006c78:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c7e:	4618      	mov	r0, r3
 8006c80:	f7fb fba4 	bl	80023cc <HAL_DMA_Abort_IT>
 8006c84:	4603      	mov	r3, r0
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d016      	beq.n	8006cb8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c90:	687a      	ldr	r2, [r7, #4]
 8006c92:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006c94:	4610      	mov	r0, r2
 8006c96:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c98:	e00e      	b.n	8006cb8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f000 f99c 	bl	8006fd8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ca0:	e00a      	b.n	8006cb8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	f000 f998 	bl	8006fd8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ca8:	e006      	b.n	8006cb8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006caa:	6878      	ldr	r0, [r7, #4]
 8006cac:	f000 f994 	bl	8006fd8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8006cb6:	e175      	b.n	8006fa4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cb8:	bf00      	nop
    return;
 8006cba:	e173      	b.n	8006fa4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cc0:	2b01      	cmp	r3, #1
 8006cc2:	f040 814f 	bne.w	8006f64 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006cc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006cca:	f003 0310 	and.w	r3, r3, #16
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	f000 8148 	beq.w	8006f64 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006cd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006cd8:	f003 0310 	and.w	r3, r3, #16
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	f000 8141 	beq.w	8006f64 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	60bb      	str	r3, [r7, #8]
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	60bb      	str	r3, [r7, #8]
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	685b      	ldr	r3, [r3, #4]
 8006cf4:	60bb      	str	r3, [r7, #8]
 8006cf6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	695b      	ldr	r3, [r3, #20]
 8006cfe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	f000 80b6 	beq.w	8006e74 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	685b      	ldr	r3, [r3, #4]
 8006d10:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006d14:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	f000 8145 	beq.w	8006fa8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006d22:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006d26:	429a      	cmp	r2, r3
 8006d28:	f080 813e 	bcs.w	8006fa8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006d32:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d38:	699b      	ldr	r3, [r3, #24]
 8006d3a:	2b20      	cmp	r3, #32
 8006d3c:	f000 8088 	beq.w	8006e50 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	330c      	adds	r3, #12
 8006d46:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d4a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006d4e:	e853 3f00 	ldrex	r3, [r3]
 8006d52:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006d56:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006d5a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006d5e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	330c      	adds	r3, #12
 8006d68:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006d6c:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006d70:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d74:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006d78:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006d7c:	e841 2300 	strex	r3, r2, [r1]
 8006d80:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006d84:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d1d9      	bne.n	8006d40 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	3314      	adds	r3, #20
 8006d92:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d94:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006d96:	e853 3f00 	ldrex	r3, [r3]
 8006d9a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006d9c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006d9e:	f023 0301 	bic.w	r3, r3, #1
 8006da2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	3314      	adds	r3, #20
 8006dac:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006db0:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006db4:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006db6:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006db8:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006dbc:	e841 2300 	strex	r3, r2, [r1]
 8006dc0:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006dc2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d1e1      	bne.n	8006d8c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	3314      	adds	r3, #20
 8006dce:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dd0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006dd2:	e853 3f00 	ldrex	r3, [r3]
 8006dd6:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006dd8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006dda:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006dde:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	3314      	adds	r3, #20
 8006de8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006dec:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006dee:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006df0:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006df2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006df4:	e841 2300 	strex	r3, r2, [r1]
 8006df8:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006dfa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d1e3      	bne.n	8006dc8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2220      	movs	r2, #32
 8006e04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	330c      	adds	r3, #12
 8006e14:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e16:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006e18:	e853 3f00 	ldrex	r3, [r3]
 8006e1c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006e1e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006e20:	f023 0310 	bic.w	r3, r3, #16
 8006e24:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	330c      	adds	r3, #12
 8006e2e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006e32:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006e34:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e36:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006e38:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006e3a:	e841 2300 	strex	r3, r2, [r1]
 8006e3e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006e40:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d1e3      	bne.n	8006e0e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	f7fb fa83 	bl	8002356 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2202      	movs	r2, #2
 8006e54:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006e5e:	b29b      	uxth	r3, r3
 8006e60:	1ad3      	subs	r3, r2, r3
 8006e62:	b29b      	uxth	r3, r3
 8006e64:	4619      	mov	r1, r3
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	f000 f8bf 	bl	8006fea <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006e6c:	e09c      	b.n	8006fa8 <HAL_UART_IRQHandler+0x518>
 8006e6e:	bf00      	nop
 8006e70:	08007177 	.word	0x08007177
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006e7c:	b29b      	uxth	r3, r3
 8006e7e:	1ad3      	subs	r3, r2, r3
 8006e80:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006e88:	b29b      	uxth	r3, r3
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	f000 808e 	beq.w	8006fac <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006e90:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	f000 8089 	beq.w	8006fac <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	330c      	adds	r3, #12
 8006ea0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ea2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ea4:	e853 3f00 	ldrex	r3, [r3]
 8006ea8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006eaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006eac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006eb0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	330c      	adds	r3, #12
 8006eba:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006ebe:	647a      	str	r2, [r7, #68]	@ 0x44
 8006ec0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ec2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006ec4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006ec6:	e841 2300 	strex	r3, r2, [r1]
 8006eca:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006ecc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d1e3      	bne.n	8006e9a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	3314      	adds	r3, #20
 8006ed8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006edc:	e853 3f00 	ldrex	r3, [r3]
 8006ee0:	623b      	str	r3, [r7, #32]
   return(result);
 8006ee2:	6a3b      	ldr	r3, [r7, #32]
 8006ee4:	f023 0301 	bic.w	r3, r3, #1
 8006ee8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	3314      	adds	r3, #20
 8006ef2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006ef6:	633a      	str	r2, [r7, #48]	@ 0x30
 8006ef8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006efa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006efc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006efe:	e841 2300 	strex	r3, r2, [r1]
 8006f02:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006f04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d1e3      	bne.n	8006ed2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2220      	movs	r2, #32
 8006f0e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2200      	movs	r2, #0
 8006f16:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	330c      	adds	r3, #12
 8006f1e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f20:	693b      	ldr	r3, [r7, #16]
 8006f22:	e853 3f00 	ldrex	r3, [r3]
 8006f26:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	f023 0310 	bic.w	r3, r3, #16
 8006f2e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	330c      	adds	r3, #12
 8006f38:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006f3c:	61fa      	str	r2, [r7, #28]
 8006f3e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f40:	69b9      	ldr	r1, [r7, #24]
 8006f42:	69fa      	ldr	r2, [r7, #28]
 8006f44:	e841 2300 	strex	r3, r2, [r1]
 8006f48:	617b      	str	r3, [r7, #20]
   return(result);
 8006f4a:	697b      	ldr	r3, [r7, #20]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d1e3      	bne.n	8006f18 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2202      	movs	r2, #2
 8006f54:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006f56:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006f5a:	4619      	mov	r1, r3
 8006f5c:	6878      	ldr	r0, [r7, #4]
 8006f5e:	f000 f844 	bl	8006fea <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006f62:	e023      	b.n	8006fac <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006f64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d009      	beq.n	8006f84 <HAL_UART_IRQHandler+0x4f4>
 8006f70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d003      	beq.n	8006f84 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006f7c:	6878      	ldr	r0, [r7, #4]
 8006f7e:	f000 f90e 	bl	800719e <UART_Transmit_IT>
    return;
 8006f82:	e014      	b.n	8006fae <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006f84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d00e      	beq.n	8006fae <HAL_UART_IRQHandler+0x51e>
 8006f90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d008      	beq.n	8006fae <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006f9c:	6878      	ldr	r0, [r7, #4]
 8006f9e:	f000 f94d 	bl	800723c <UART_EndTransmit_IT>
    return;
 8006fa2:	e004      	b.n	8006fae <HAL_UART_IRQHandler+0x51e>
    return;
 8006fa4:	bf00      	nop
 8006fa6:	e002      	b.n	8006fae <HAL_UART_IRQHandler+0x51e>
      return;
 8006fa8:	bf00      	nop
 8006faa:	e000      	b.n	8006fae <HAL_UART_IRQHandler+0x51e>
      return;
 8006fac:	bf00      	nop
  }
}
 8006fae:	37e8      	adds	r7, #232	@ 0xe8
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	bd80      	pop	{r7, pc}

08006fb4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006fb4:	b480      	push	{r7}
 8006fb6:	b083      	sub	sp, #12
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006fbc:	bf00      	nop
 8006fbe:	370c      	adds	r7, #12
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	bc80      	pop	{r7}
 8006fc4:	4770      	bx	lr

08006fc6 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006fc6:	b480      	push	{r7}
 8006fc8:	b083      	sub	sp, #12
 8006fca:	af00      	add	r7, sp, #0
 8006fcc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006fce:	bf00      	nop
 8006fd0:	370c      	adds	r7, #12
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bc80      	pop	{r7}
 8006fd6:	4770      	bx	lr

08006fd8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006fd8:	b480      	push	{r7}
 8006fda:	b083      	sub	sp, #12
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006fe0:	bf00      	nop
 8006fe2:	370c      	adds	r7, #12
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bc80      	pop	{r7}
 8006fe8:	4770      	bx	lr

08006fea <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006fea:	b480      	push	{r7}
 8006fec:	b083      	sub	sp, #12
 8006fee:	af00      	add	r7, sp, #0
 8006ff0:	6078      	str	r0, [r7, #4]
 8006ff2:	460b      	mov	r3, r1
 8006ff4:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006ff6:	bf00      	nop
 8006ff8:	370c      	adds	r7, #12
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	bc80      	pop	{r7}
 8006ffe:	4770      	bx	lr

08007000 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b086      	sub	sp, #24
 8007004:	af00      	add	r7, sp, #0
 8007006:	60f8      	str	r0, [r7, #12]
 8007008:	60b9      	str	r1, [r7, #8]
 800700a:	603b      	str	r3, [r7, #0]
 800700c:	4613      	mov	r3, r2
 800700e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007010:	e03b      	b.n	800708a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007012:	6a3b      	ldr	r3, [r7, #32]
 8007014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007018:	d037      	beq.n	800708a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800701a:	f7fb f861 	bl	80020e0 <HAL_GetTick>
 800701e:	4602      	mov	r2, r0
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	1ad3      	subs	r3, r2, r3
 8007024:	6a3a      	ldr	r2, [r7, #32]
 8007026:	429a      	cmp	r2, r3
 8007028:	d302      	bcc.n	8007030 <UART_WaitOnFlagUntilTimeout+0x30>
 800702a:	6a3b      	ldr	r3, [r7, #32]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d101      	bne.n	8007034 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007030:	2303      	movs	r3, #3
 8007032:	e03a      	b.n	80070aa <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	68db      	ldr	r3, [r3, #12]
 800703a:	f003 0304 	and.w	r3, r3, #4
 800703e:	2b00      	cmp	r3, #0
 8007040:	d023      	beq.n	800708a <UART_WaitOnFlagUntilTimeout+0x8a>
 8007042:	68bb      	ldr	r3, [r7, #8]
 8007044:	2b80      	cmp	r3, #128	@ 0x80
 8007046:	d020      	beq.n	800708a <UART_WaitOnFlagUntilTimeout+0x8a>
 8007048:	68bb      	ldr	r3, [r7, #8]
 800704a:	2b40      	cmp	r3, #64	@ 0x40
 800704c:	d01d      	beq.n	800708a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f003 0308 	and.w	r3, r3, #8
 8007058:	2b08      	cmp	r3, #8
 800705a:	d116      	bne.n	800708a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800705c:	2300      	movs	r3, #0
 800705e:	617b      	str	r3, [r7, #20]
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	617b      	str	r3, [r7, #20]
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	685b      	ldr	r3, [r3, #4]
 800706e:	617b      	str	r3, [r7, #20]
 8007070:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007072:	68f8      	ldr	r0, [r7, #12]
 8007074:	f000 f81d 	bl	80070b2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	2208      	movs	r2, #8
 800707c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	2200      	movs	r2, #0
 8007082:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8007086:	2301      	movs	r3, #1
 8007088:	e00f      	b.n	80070aa <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	681a      	ldr	r2, [r3, #0]
 8007090:	68bb      	ldr	r3, [r7, #8]
 8007092:	4013      	ands	r3, r2
 8007094:	68ba      	ldr	r2, [r7, #8]
 8007096:	429a      	cmp	r2, r3
 8007098:	bf0c      	ite	eq
 800709a:	2301      	moveq	r3, #1
 800709c:	2300      	movne	r3, #0
 800709e:	b2db      	uxtb	r3, r3
 80070a0:	461a      	mov	r2, r3
 80070a2:	79fb      	ldrb	r3, [r7, #7]
 80070a4:	429a      	cmp	r2, r3
 80070a6:	d0b4      	beq.n	8007012 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80070a8:	2300      	movs	r3, #0
}
 80070aa:	4618      	mov	r0, r3
 80070ac:	3718      	adds	r7, #24
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bd80      	pop	{r7, pc}

080070b2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80070b2:	b480      	push	{r7}
 80070b4:	b095      	sub	sp, #84	@ 0x54
 80070b6:	af00      	add	r7, sp, #0
 80070b8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	330c      	adds	r3, #12
 80070c0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070c4:	e853 3f00 	ldrex	r3, [r3]
 80070c8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80070ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070cc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80070d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	330c      	adds	r3, #12
 80070d8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80070da:	643a      	str	r2, [r7, #64]	@ 0x40
 80070dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070de:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80070e0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80070e2:	e841 2300 	strex	r3, r2, [r1]
 80070e6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80070e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d1e5      	bne.n	80070ba <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	3314      	adds	r3, #20
 80070f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070f6:	6a3b      	ldr	r3, [r7, #32]
 80070f8:	e853 3f00 	ldrex	r3, [r3]
 80070fc:	61fb      	str	r3, [r7, #28]
   return(result);
 80070fe:	69fb      	ldr	r3, [r7, #28]
 8007100:	f023 0301 	bic.w	r3, r3, #1
 8007104:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	3314      	adds	r3, #20
 800710c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800710e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007110:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007112:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007114:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007116:	e841 2300 	strex	r3, r2, [r1]
 800711a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800711c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800711e:	2b00      	cmp	r3, #0
 8007120:	d1e5      	bne.n	80070ee <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007126:	2b01      	cmp	r3, #1
 8007128:	d119      	bne.n	800715e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	330c      	adds	r3, #12
 8007130:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	e853 3f00 	ldrex	r3, [r3]
 8007138:	60bb      	str	r3, [r7, #8]
   return(result);
 800713a:	68bb      	ldr	r3, [r7, #8]
 800713c:	f023 0310 	bic.w	r3, r3, #16
 8007140:	647b      	str	r3, [r7, #68]	@ 0x44
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	330c      	adds	r3, #12
 8007148:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800714a:	61ba      	str	r2, [r7, #24]
 800714c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800714e:	6979      	ldr	r1, [r7, #20]
 8007150:	69ba      	ldr	r2, [r7, #24]
 8007152:	e841 2300 	strex	r3, r2, [r1]
 8007156:	613b      	str	r3, [r7, #16]
   return(result);
 8007158:	693b      	ldr	r3, [r7, #16]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d1e5      	bne.n	800712a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2220      	movs	r2, #32
 8007162:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2200      	movs	r2, #0
 800716a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800716c:	bf00      	nop
 800716e:	3754      	adds	r7, #84	@ 0x54
 8007170:	46bd      	mov	sp, r7
 8007172:	bc80      	pop	{r7}
 8007174:	4770      	bx	lr

08007176 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007176:	b580      	push	{r7, lr}
 8007178:	b084      	sub	sp, #16
 800717a:	af00      	add	r7, sp, #0
 800717c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007182:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	2200      	movs	r2, #0
 8007188:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	2200      	movs	r2, #0
 800718e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007190:	68f8      	ldr	r0, [r7, #12]
 8007192:	f7ff ff21 	bl	8006fd8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007196:	bf00      	nop
 8007198:	3710      	adds	r7, #16
 800719a:	46bd      	mov	sp, r7
 800719c:	bd80      	pop	{r7, pc}

0800719e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800719e:	b480      	push	{r7}
 80071a0:	b085      	sub	sp, #20
 80071a2:	af00      	add	r7, sp, #0
 80071a4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80071ac:	b2db      	uxtb	r3, r3
 80071ae:	2b21      	cmp	r3, #33	@ 0x21
 80071b0:	d13e      	bne.n	8007230 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	689b      	ldr	r3, [r3, #8]
 80071b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80071ba:	d114      	bne.n	80071e6 <UART_Transmit_IT+0x48>
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	691b      	ldr	r3, [r3, #16]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d110      	bne.n	80071e6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6a1b      	ldr	r3, [r3, #32]
 80071c8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	881b      	ldrh	r3, [r3, #0]
 80071ce:	461a      	mov	r2, r3
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80071d8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6a1b      	ldr	r3, [r3, #32]
 80071de:	1c9a      	adds	r2, r3, #2
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	621a      	str	r2, [r3, #32]
 80071e4:	e008      	b.n	80071f8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6a1b      	ldr	r3, [r3, #32]
 80071ea:	1c59      	adds	r1, r3, #1
 80071ec:	687a      	ldr	r2, [r7, #4]
 80071ee:	6211      	str	r1, [r2, #32]
 80071f0:	781a      	ldrb	r2, [r3, #0]
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80071fc:	b29b      	uxth	r3, r3
 80071fe:	3b01      	subs	r3, #1
 8007200:	b29b      	uxth	r3, r3
 8007202:	687a      	ldr	r2, [r7, #4]
 8007204:	4619      	mov	r1, r3
 8007206:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8007208:	2b00      	cmp	r3, #0
 800720a:	d10f      	bne.n	800722c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	68da      	ldr	r2, [r3, #12]
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800721a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	68da      	ldr	r2, [r3, #12]
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800722a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800722c:	2300      	movs	r3, #0
 800722e:	e000      	b.n	8007232 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007230:	2302      	movs	r3, #2
  }
}
 8007232:	4618      	mov	r0, r3
 8007234:	3714      	adds	r7, #20
 8007236:	46bd      	mov	sp, r7
 8007238:	bc80      	pop	{r7}
 800723a:	4770      	bx	lr

0800723c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b082      	sub	sp, #8
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	68da      	ldr	r2, [r3, #12]
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007252:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2220      	movs	r2, #32
 8007258:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800725c:	6878      	ldr	r0, [r7, #4]
 800725e:	f7ff fea9 	bl	8006fb4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007262:	2300      	movs	r3, #0
}
 8007264:	4618      	mov	r0, r3
 8007266:	3708      	adds	r7, #8
 8007268:	46bd      	mov	sp, r7
 800726a:	bd80      	pop	{r7, pc}

0800726c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b08c      	sub	sp, #48	@ 0x30
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800727a:	b2db      	uxtb	r3, r3
 800727c:	2b22      	cmp	r3, #34	@ 0x22
 800727e:	f040 80ae 	bne.w	80073de <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	689b      	ldr	r3, [r3, #8]
 8007286:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800728a:	d117      	bne.n	80072bc <UART_Receive_IT+0x50>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	691b      	ldr	r3, [r3, #16]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d113      	bne.n	80072bc <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007294:	2300      	movs	r3, #0
 8007296:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800729c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	685b      	ldr	r3, [r3, #4]
 80072a4:	b29b      	uxth	r3, r3
 80072a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072aa:	b29a      	uxth	r2, r3
 80072ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072ae:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072b4:	1c9a      	adds	r2, r3, #2
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	629a      	str	r2, [r3, #40]	@ 0x28
 80072ba:	e026      	b.n	800730a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80072c2:	2300      	movs	r3, #0
 80072c4:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	689b      	ldr	r3, [r3, #8]
 80072ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80072ce:	d007      	beq.n	80072e0 <UART_Receive_IT+0x74>
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	689b      	ldr	r3, [r3, #8]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d10a      	bne.n	80072ee <UART_Receive_IT+0x82>
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	691b      	ldr	r3, [r3, #16]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d106      	bne.n	80072ee <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	685b      	ldr	r3, [r3, #4]
 80072e6:	b2da      	uxtb	r2, r3
 80072e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072ea:	701a      	strb	r2, [r3, #0]
 80072ec:	e008      	b.n	8007300 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	685b      	ldr	r3, [r3, #4]
 80072f4:	b2db      	uxtb	r3, r3
 80072f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80072fa:	b2da      	uxtb	r2, r3
 80072fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072fe:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007304:	1c5a      	adds	r2, r3, #1
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800730e:	b29b      	uxth	r3, r3
 8007310:	3b01      	subs	r3, #1
 8007312:	b29b      	uxth	r3, r3
 8007314:	687a      	ldr	r2, [r7, #4]
 8007316:	4619      	mov	r1, r3
 8007318:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800731a:	2b00      	cmp	r3, #0
 800731c:	d15d      	bne.n	80073da <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	68da      	ldr	r2, [r3, #12]
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f022 0220 	bic.w	r2, r2, #32
 800732c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	68da      	ldr	r2, [r3, #12]
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800733c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	695a      	ldr	r2, [r3, #20]
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f022 0201 	bic.w	r2, r2, #1
 800734c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2220      	movs	r2, #32
 8007352:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2200      	movs	r2, #0
 800735a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007360:	2b01      	cmp	r3, #1
 8007362:	d135      	bne.n	80073d0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2200      	movs	r2, #0
 8007368:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	330c      	adds	r3, #12
 8007370:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007372:	697b      	ldr	r3, [r7, #20]
 8007374:	e853 3f00 	ldrex	r3, [r3]
 8007378:	613b      	str	r3, [r7, #16]
   return(result);
 800737a:	693b      	ldr	r3, [r7, #16]
 800737c:	f023 0310 	bic.w	r3, r3, #16
 8007380:	627b      	str	r3, [r7, #36]	@ 0x24
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	330c      	adds	r3, #12
 8007388:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800738a:	623a      	str	r2, [r7, #32]
 800738c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800738e:	69f9      	ldr	r1, [r7, #28]
 8007390:	6a3a      	ldr	r2, [r7, #32]
 8007392:	e841 2300 	strex	r3, r2, [r1]
 8007396:	61bb      	str	r3, [r7, #24]
   return(result);
 8007398:	69bb      	ldr	r3, [r7, #24]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d1e5      	bne.n	800736a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f003 0310 	and.w	r3, r3, #16
 80073a8:	2b10      	cmp	r3, #16
 80073aa:	d10a      	bne.n	80073c2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80073ac:	2300      	movs	r3, #0
 80073ae:	60fb      	str	r3, [r7, #12]
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	60fb      	str	r3, [r7, #12]
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	685b      	ldr	r3, [r3, #4]
 80073be:	60fb      	str	r3, [r7, #12]
 80073c0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80073c6:	4619      	mov	r1, r3
 80073c8:	6878      	ldr	r0, [r7, #4]
 80073ca:	f7ff fe0e 	bl	8006fea <HAL_UARTEx_RxEventCallback>
 80073ce:	e002      	b.n	80073d6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80073d0:	6878      	ldr	r0, [r7, #4]
 80073d2:	f7ff fdf8 	bl	8006fc6 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80073d6:	2300      	movs	r3, #0
 80073d8:	e002      	b.n	80073e0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80073da:	2300      	movs	r3, #0
 80073dc:	e000      	b.n	80073e0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80073de:	2302      	movs	r3, #2
  }
}
 80073e0:	4618      	mov	r0, r3
 80073e2:	3730      	adds	r7, #48	@ 0x30
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bd80      	pop	{r7, pc}

080073e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b084      	sub	sp, #16
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	691b      	ldr	r3, [r3, #16]
 80073f6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	68da      	ldr	r2, [r3, #12]
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	430a      	orrs	r2, r1
 8007404:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	689a      	ldr	r2, [r3, #8]
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	691b      	ldr	r3, [r3, #16]
 800740e:	431a      	orrs	r2, r3
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	695b      	ldr	r3, [r3, #20]
 8007414:	4313      	orrs	r3, r2
 8007416:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	68db      	ldr	r3, [r3, #12]
 800741e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8007422:	f023 030c 	bic.w	r3, r3, #12
 8007426:	687a      	ldr	r2, [r7, #4]
 8007428:	6812      	ldr	r2, [r2, #0]
 800742a:	68b9      	ldr	r1, [r7, #8]
 800742c:	430b      	orrs	r3, r1
 800742e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	695b      	ldr	r3, [r3, #20]
 8007436:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	699a      	ldr	r2, [r3, #24]
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	430a      	orrs	r2, r1
 8007444:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	4a2c      	ldr	r2, [pc, #176]	@ (80074fc <UART_SetConfig+0x114>)
 800744c:	4293      	cmp	r3, r2
 800744e:	d103      	bne.n	8007458 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007450:	f7fe fb78 	bl	8005b44 <HAL_RCC_GetPCLK2Freq>
 8007454:	60f8      	str	r0, [r7, #12]
 8007456:	e002      	b.n	800745e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007458:	f7fe fb60 	bl	8005b1c <HAL_RCC_GetPCLK1Freq>
 800745c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800745e:	68fa      	ldr	r2, [r7, #12]
 8007460:	4613      	mov	r3, r2
 8007462:	009b      	lsls	r3, r3, #2
 8007464:	4413      	add	r3, r2
 8007466:	009a      	lsls	r2, r3, #2
 8007468:	441a      	add	r2, r3
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	685b      	ldr	r3, [r3, #4]
 800746e:	009b      	lsls	r3, r3, #2
 8007470:	fbb2 f3f3 	udiv	r3, r2, r3
 8007474:	4a22      	ldr	r2, [pc, #136]	@ (8007500 <UART_SetConfig+0x118>)
 8007476:	fba2 2303 	umull	r2, r3, r2, r3
 800747a:	095b      	lsrs	r3, r3, #5
 800747c:	0119      	lsls	r1, r3, #4
 800747e:	68fa      	ldr	r2, [r7, #12]
 8007480:	4613      	mov	r3, r2
 8007482:	009b      	lsls	r3, r3, #2
 8007484:	4413      	add	r3, r2
 8007486:	009a      	lsls	r2, r3, #2
 8007488:	441a      	add	r2, r3
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	685b      	ldr	r3, [r3, #4]
 800748e:	009b      	lsls	r3, r3, #2
 8007490:	fbb2 f2f3 	udiv	r2, r2, r3
 8007494:	4b1a      	ldr	r3, [pc, #104]	@ (8007500 <UART_SetConfig+0x118>)
 8007496:	fba3 0302 	umull	r0, r3, r3, r2
 800749a:	095b      	lsrs	r3, r3, #5
 800749c:	2064      	movs	r0, #100	@ 0x64
 800749e:	fb00 f303 	mul.w	r3, r0, r3
 80074a2:	1ad3      	subs	r3, r2, r3
 80074a4:	011b      	lsls	r3, r3, #4
 80074a6:	3332      	adds	r3, #50	@ 0x32
 80074a8:	4a15      	ldr	r2, [pc, #84]	@ (8007500 <UART_SetConfig+0x118>)
 80074aa:	fba2 2303 	umull	r2, r3, r2, r3
 80074ae:	095b      	lsrs	r3, r3, #5
 80074b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80074b4:	4419      	add	r1, r3
 80074b6:	68fa      	ldr	r2, [r7, #12]
 80074b8:	4613      	mov	r3, r2
 80074ba:	009b      	lsls	r3, r3, #2
 80074bc:	4413      	add	r3, r2
 80074be:	009a      	lsls	r2, r3, #2
 80074c0:	441a      	add	r2, r3
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	685b      	ldr	r3, [r3, #4]
 80074c6:	009b      	lsls	r3, r3, #2
 80074c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80074cc:	4b0c      	ldr	r3, [pc, #48]	@ (8007500 <UART_SetConfig+0x118>)
 80074ce:	fba3 0302 	umull	r0, r3, r3, r2
 80074d2:	095b      	lsrs	r3, r3, #5
 80074d4:	2064      	movs	r0, #100	@ 0x64
 80074d6:	fb00 f303 	mul.w	r3, r0, r3
 80074da:	1ad3      	subs	r3, r2, r3
 80074dc:	011b      	lsls	r3, r3, #4
 80074de:	3332      	adds	r3, #50	@ 0x32
 80074e0:	4a07      	ldr	r2, [pc, #28]	@ (8007500 <UART_SetConfig+0x118>)
 80074e2:	fba2 2303 	umull	r2, r3, r2, r3
 80074e6:	095b      	lsrs	r3, r3, #5
 80074e8:	f003 020f 	and.w	r2, r3, #15
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	440a      	add	r2, r1
 80074f2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80074f4:	bf00      	nop
 80074f6:	3710      	adds	r7, #16
 80074f8:	46bd      	mov	sp, r7
 80074fa:	bd80      	pop	{r7, pc}
 80074fc:	40013800 	.word	0x40013800
 8007500:	51eb851f 	.word	0x51eb851f

08007504 <std>:
 8007504:	2300      	movs	r3, #0
 8007506:	b510      	push	{r4, lr}
 8007508:	4604      	mov	r4, r0
 800750a:	e9c0 3300 	strd	r3, r3, [r0]
 800750e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007512:	6083      	str	r3, [r0, #8]
 8007514:	8181      	strh	r1, [r0, #12]
 8007516:	6643      	str	r3, [r0, #100]	@ 0x64
 8007518:	81c2      	strh	r2, [r0, #14]
 800751a:	6183      	str	r3, [r0, #24]
 800751c:	4619      	mov	r1, r3
 800751e:	2208      	movs	r2, #8
 8007520:	305c      	adds	r0, #92	@ 0x5c
 8007522:	f000 fa2f 	bl	8007984 <memset>
 8007526:	4b0d      	ldr	r3, [pc, #52]	@ (800755c <std+0x58>)
 8007528:	6224      	str	r4, [r4, #32]
 800752a:	6263      	str	r3, [r4, #36]	@ 0x24
 800752c:	4b0c      	ldr	r3, [pc, #48]	@ (8007560 <std+0x5c>)
 800752e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007530:	4b0c      	ldr	r3, [pc, #48]	@ (8007564 <std+0x60>)
 8007532:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007534:	4b0c      	ldr	r3, [pc, #48]	@ (8007568 <std+0x64>)
 8007536:	6323      	str	r3, [r4, #48]	@ 0x30
 8007538:	4b0c      	ldr	r3, [pc, #48]	@ (800756c <std+0x68>)
 800753a:	429c      	cmp	r4, r3
 800753c:	d006      	beq.n	800754c <std+0x48>
 800753e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007542:	4294      	cmp	r4, r2
 8007544:	d002      	beq.n	800754c <std+0x48>
 8007546:	33d0      	adds	r3, #208	@ 0xd0
 8007548:	429c      	cmp	r4, r3
 800754a:	d105      	bne.n	8007558 <std+0x54>
 800754c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007550:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007554:	f000 ba8e 	b.w	8007a74 <__retarget_lock_init_recursive>
 8007558:	bd10      	pop	{r4, pc}
 800755a:	bf00      	nop
 800755c:	080077d5 	.word	0x080077d5
 8007560:	080077f7 	.word	0x080077f7
 8007564:	0800782f 	.word	0x0800782f
 8007568:	08007853 	.word	0x08007853
 800756c:	200001bc 	.word	0x200001bc

08007570 <stdio_exit_handler>:
 8007570:	4a02      	ldr	r2, [pc, #8]	@ (800757c <stdio_exit_handler+0xc>)
 8007572:	4903      	ldr	r1, [pc, #12]	@ (8007580 <stdio_exit_handler+0x10>)
 8007574:	4803      	ldr	r0, [pc, #12]	@ (8007584 <stdio_exit_handler+0x14>)
 8007576:	f000 b869 	b.w	800764c <_fwalk_sglue>
 800757a:	bf00      	nop
 800757c:	2000000c 	.word	0x2000000c
 8007580:	080085b9 	.word	0x080085b9
 8007584:	2000001c 	.word	0x2000001c

08007588 <cleanup_stdio>:
 8007588:	6841      	ldr	r1, [r0, #4]
 800758a:	4b0c      	ldr	r3, [pc, #48]	@ (80075bc <cleanup_stdio+0x34>)
 800758c:	b510      	push	{r4, lr}
 800758e:	4299      	cmp	r1, r3
 8007590:	4604      	mov	r4, r0
 8007592:	d001      	beq.n	8007598 <cleanup_stdio+0x10>
 8007594:	f001 f810 	bl	80085b8 <_fflush_r>
 8007598:	68a1      	ldr	r1, [r4, #8]
 800759a:	4b09      	ldr	r3, [pc, #36]	@ (80075c0 <cleanup_stdio+0x38>)
 800759c:	4299      	cmp	r1, r3
 800759e:	d002      	beq.n	80075a6 <cleanup_stdio+0x1e>
 80075a0:	4620      	mov	r0, r4
 80075a2:	f001 f809 	bl	80085b8 <_fflush_r>
 80075a6:	68e1      	ldr	r1, [r4, #12]
 80075a8:	4b06      	ldr	r3, [pc, #24]	@ (80075c4 <cleanup_stdio+0x3c>)
 80075aa:	4299      	cmp	r1, r3
 80075ac:	d004      	beq.n	80075b8 <cleanup_stdio+0x30>
 80075ae:	4620      	mov	r0, r4
 80075b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80075b4:	f001 b800 	b.w	80085b8 <_fflush_r>
 80075b8:	bd10      	pop	{r4, pc}
 80075ba:	bf00      	nop
 80075bc:	200001bc 	.word	0x200001bc
 80075c0:	20000224 	.word	0x20000224
 80075c4:	2000028c 	.word	0x2000028c

080075c8 <global_stdio_init.part.0>:
 80075c8:	b510      	push	{r4, lr}
 80075ca:	4b0b      	ldr	r3, [pc, #44]	@ (80075f8 <global_stdio_init.part.0+0x30>)
 80075cc:	4c0b      	ldr	r4, [pc, #44]	@ (80075fc <global_stdio_init.part.0+0x34>)
 80075ce:	4a0c      	ldr	r2, [pc, #48]	@ (8007600 <global_stdio_init.part.0+0x38>)
 80075d0:	4620      	mov	r0, r4
 80075d2:	601a      	str	r2, [r3, #0]
 80075d4:	2104      	movs	r1, #4
 80075d6:	2200      	movs	r2, #0
 80075d8:	f7ff ff94 	bl	8007504 <std>
 80075dc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80075e0:	2201      	movs	r2, #1
 80075e2:	2109      	movs	r1, #9
 80075e4:	f7ff ff8e 	bl	8007504 <std>
 80075e8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80075ec:	2202      	movs	r2, #2
 80075ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80075f2:	2112      	movs	r1, #18
 80075f4:	f7ff bf86 	b.w	8007504 <std>
 80075f8:	200002f4 	.word	0x200002f4
 80075fc:	200001bc 	.word	0x200001bc
 8007600:	08007571 	.word	0x08007571

08007604 <__sfp_lock_acquire>:
 8007604:	4801      	ldr	r0, [pc, #4]	@ (800760c <__sfp_lock_acquire+0x8>)
 8007606:	f000 ba36 	b.w	8007a76 <__retarget_lock_acquire_recursive>
 800760a:	bf00      	nop
 800760c:	200002fd 	.word	0x200002fd

08007610 <__sfp_lock_release>:
 8007610:	4801      	ldr	r0, [pc, #4]	@ (8007618 <__sfp_lock_release+0x8>)
 8007612:	f000 ba31 	b.w	8007a78 <__retarget_lock_release_recursive>
 8007616:	bf00      	nop
 8007618:	200002fd 	.word	0x200002fd

0800761c <__sinit>:
 800761c:	b510      	push	{r4, lr}
 800761e:	4604      	mov	r4, r0
 8007620:	f7ff fff0 	bl	8007604 <__sfp_lock_acquire>
 8007624:	6a23      	ldr	r3, [r4, #32]
 8007626:	b11b      	cbz	r3, 8007630 <__sinit+0x14>
 8007628:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800762c:	f7ff bff0 	b.w	8007610 <__sfp_lock_release>
 8007630:	4b04      	ldr	r3, [pc, #16]	@ (8007644 <__sinit+0x28>)
 8007632:	6223      	str	r3, [r4, #32]
 8007634:	4b04      	ldr	r3, [pc, #16]	@ (8007648 <__sinit+0x2c>)
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d1f5      	bne.n	8007628 <__sinit+0xc>
 800763c:	f7ff ffc4 	bl	80075c8 <global_stdio_init.part.0>
 8007640:	e7f2      	b.n	8007628 <__sinit+0xc>
 8007642:	bf00      	nop
 8007644:	08007589 	.word	0x08007589
 8007648:	200002f4 	.word	0x200002f4

0800764c <_fwalk_sglue>:
 800764c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007650:	4607      	mov	r7, r0
 8007652:	4688      	mov	r8, r1
 8007654:	4614      	mov	r4, r2
 8007656:	2600      	movs	r6, #0
 8007658:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800765c:	f1b9 0901 	subs.w	r9, r9, #1
 8007660:	d505      	bpl.n	800766e <_fwalk_sglue+0x22>
 8007662:	6824      	ldr	r4, [r4, #0]
 8007664:	2c00      	cmp	r4, #0
 8007666:	d1f7      	bne.n	8007658 <_fwalk_sglue+0xc>
 8007668:	4630      	mov	r0, r6
 800766a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800766e:	89ab      	ldrh	r3, [r5, #12]
 8007670:	2b01      	cmp	r3, #1
 8007672:	d907      	bls.n	8007684 <_fwalk_sglue+0x38>
 8007674:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007678:	3301      	adds	r3, #1
 800767a:	d003      	beq.n	8007684 <_fwalk_sglue+0x38>
 800767c:	4629      	mov	r1, r5
 800767e:	4638      	mov	r0, r7
 8007680:	47c0      	blx	r8
 8007682:	4306      	orrs	r6, r0
 8007684:	3568      	adds	r5, #104	@ 0x68
 8007686:	e7e9      	b.n	800765c <_fwalk_sglue+0x10>

08007688 <iprintf>:
 8007688:	b40f      	push	{r0, r1, r2, r3}
 800768a:	b507      	push	{r0, r1, r2, lr}
 800768c:	4906      	ldr	r1, [pc, #24]	@ (80076a8 <iprintf+0x20>)
 800768e:	ab04      	add	r3, sp, #16
 8007690:	6808      	ldr	r0, [r1, #0]
 8007692:	f853 2b04 	ldr.w	r2, [r3], #4
 8007696:	6881      	ldr	r1, [r0, #8]
 8007698:	9301      	str	r3, [sp, #4]
 800769a:	f000 fc65 	bl	8007f68 <_vfiprintf_r>
 800769e:	b003      	add	sp, #12
 80076a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80076a4:	b004      	add	sp, #16
 80076a6:	4770      	bx	lr
 80076a8:	20000018 	.word	0x20000018

080076ac <_puts_r>:
 80076ac:	6a03      	ldr	r3, [r0, #32]
 80076ae:	b570      	push	{r4, r5, r6, lr}
 80076b0:	4605      	mov	r5, r0
 80076b2:	460e      	mov	r6, r1
 80076b4:	6884      	ldr	r4, [r0, #8]
 80076b6:	b90b      	cbnz	r3, 80076bc <_puts_r+0x10>
 80076b8:	f7ff ffb0 	bl	800761c <__sinit>
 80076bc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80076be:	07db      	lsls	r3, r3, #31
 80076c0:	d405      	bmi.n	80076ce <_puts_r+0x22>
 80076c2:	89a3      	ldrh	r3, [r4, #12]
 80076c4:	0598      	lsls	r0, r3, #22
 80076c6:	d402      	bmi.n	80076ce <_puts_r+0x22>
 80076c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80076ca:	f000 f9d4 	bl	8007a76 <__retarget_lock_acquire_recursive>
 80076ce:	89a3      	ldrh	r3, [r4, #12]
 80076d0:	0719      	lsls	r1, r3, #28
 80076d2:	d502      	bpl.n	80076da <_puts_r+0x2e>
 80076d4:	6923      	ldr	r3, [r4, #16]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d135      	bne.n	8007746 <_puts_r+0x9a>
 80076da:	4621      	mov	r1, r4
 80076dc:	4628      	mov	r0, r5
 80076de:	f000 f8fb 	bl	80078d8 <__swsetup_r>
 80076e2:	b380      	cbz	r0, 8007746 <_puts_r+0x9a>
 80076e4:	f04f 35ff 	mov.w	r5, #4294967295
 80076e8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80076ea:	07da      	lsls	r2, r3, #31
 80076ec:	d405      	bmi.n	80076fa <_puts_r+0x4e>
 80076ee:	89a3      	ldrh	r3, [r4, #12]
 80076f0:	059b      	lsls	r3, r3, #22
 80076f2:	d402      	bmi.n	80076fa <_puts_r+0x4e>
 80076f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80076f6:	f000 f9bf 	bl	8007a78 <__retarget_lock_release_recursive>
 80076fa:	4628      	mov	r0, r5
 80076fc:	bd70      	pop	{r4, r5, r6, pc}
 80076fe:	2b00      	cmp	r3, #0
 8007700:	da04      	bge.n	800770c <_puts_r+0x60>
 8007702:	69a2      	ldr	r2, [r4, #24]
 8007704:	429a      	cmp	r2, r3
 8007706:	dc17      	bgt.n	8007738 <_puts_r+0x8c>
 8007708:	290a      	cmp	r1, #10
 800770a:	d015      	beq.n	8007738 <_puts_r+0x8c>
 800770c:	6823      	ldr	r3, [r4, #0]
 800770e:	1c5a      	adds	r2, r3, #1
 8007710:	6022      	str	r2, [r4, #0]
 8007712:	7019      	strb	r1, [r3, #0]
 8007714:	68a3      	ldr	r3, [r4, #8]
 8007716:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800771a:	3b01      	subs	r3, #1
 800771c:	60a3      	str	r3, [r4, #8]
 800771e:	2900      	cmp	r1, #0
 8007720:	d1ed      	bne.n	80076fe <_puts_r+0x52>
 8007722:	2b00      	cmp	r3, #0
 8007724:	da11      	bge.n	800774a <_puts_r+0x9e>
 8007726:	4622      	mov	r2, r4
 8007728:	210a      	movs	r1, #10
 800772a:	4628      	mov	r0, r5
 800772c:	f000 f895 	bl	800785a <__swbuf_r>
 8007730:	3001      	adds	r0, #1
 8007732:	d0d7      	beq.n	80076e4 <_puts_r+0x38>
 8007734:	250a      	movs	r5, #10
 8007736:	e7d7      	b.n	80076e8 <_puts_r+0x3c>
 8007738:	4622      	mov	r2, r4
 800773a:	4628      	mov	r0, r5
 800773c:	f000 f88d 	bl	800785a <__swbuf_r>
 8007740:	3001      	adds	r0, #1
 8007742:	d1e7      	bne.n	8007714 <_puts_r+0x68>
 8007744:	e7ce      	b.n	80076e4 <_puts_r+0x38>
 8007746:	3e01      	subs	r6, #1
 8007748:	e7e4      	b.n	8007714 <_puts_r+0x68>
 800774a:	6823      	ldr	r3, [r4, #0]
 800774c:	1c5a      	adds	r2, r3, #1
 800774e:	6022      	str	r2, [r4, #0]
 8007750:	220a      	movs	r2, #10
 8007752:	701a      	strb	r2, [r3, #0]
 8007754:	e7ee      	b.n	8007734 <_puts_r+0x88>
	...

08007758 <puts>:
 8007758:	4b02      	ldr	r3, [pc, #8]	@ (8007764 <puts+0xc>)
 800775a:	4601      	mov	r1, r0
 800775c:	6818      	ldr	r0, [r3, #0]
 800775e:	f7ff bfa5 	b.w	80076ac <_puts_r>
 8007762:	bf00      	nop
 8007764:	20000018 	.word	0x20000018

08007768 <sniprintf>:
 8007768:	b40c      	push	{r2, r3}
 800776a:	b530      	push	{r4, r5, lr}
 800776c:	4b18      	ldr	r3, [pc, #96]	@ (80077d0 <sniprintf+0x68>)
 800776e:	1e0c      	subs	r4, r1, #0
 8007770:	681d      	ldr	r5, [r3, #0]
 8007772:	b09d      	sub	sp, #116	@ 0x74
 8007774:	da08      	bge.n	8007788 <sniprintf+0x20>
 8007776:	238b      	movs	r3, #139	@ 0x8b
 8007778:	f04f 30ff 	mov.w	r0, #4294967295
 800777c:	602b      	str	r3, [r5, #0]
 800777e:	b01d      	add	sp, #116	@ 0x74
 8007780:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007784:	b002      	add	sp, #8
 8007786:	4770      	bx	lr
 8007788:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800778c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007790:	f04f 0300 	mov.w	r3, #0
 8007794:	931b      	str	r3, [sp, #108]	@ 0x6c
 8007796:	bf0c      	ite	eq
 8007798:	4623      	moveq	r3, r4
 800779a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800779e:	9304      	str	r3, [sp, #16]
 80077a0:	9307      	str	r3, [sp, #28]
 80077a2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80077a6:	9002      	str	r0, [sp, #8]
 80077a8:	9006      	str	r0, [sp, #24]
 80077aa:	f8ad 3016 	strh.w	r3, [sp, #22]
 80077ae:	4628      	mov	r0, r5
 80077b0:	ab21      	add	r3, sp, #132	@ 0x84
 80077b2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80077b4:	a902      	add	r1, sp, #8
 80077b6:	9301      	str	r3, [sp, #4]
 80077b8:	f000 fab2 	bl	8007d20 <_svfiprintf_r>
 80077bc:	1c43      	adds	r3, r0, #1
 80077be:	bfbc      	itt	lt
 80077c0:	238b      	movlt	r3, #139	@ 0x8b
 80077c2:	602b      	strlt	r3, [r5, #0]
 80077c4:	2c00      	cmp	r4, #0
 80077c6:	d0da      	beq.n	800777e <sniprintf+0x16>
 80077c8:	2200      	movs	r2, #0
 80077ca:	9b02      	ldr	r3, [sp, #8]
 80077cc:	701a      	strb	r2, [r3, #0]
 80077ce:	e7d6      	b.n	800777e <sniprintf+0x16>
 80077d0:	20000018 	.word	0x20000018

080077d4 <__sread>:
 80077d4:	b510      	push	{r4, lr}
 80077d6:	460c      	mov	r4, r1
 80077d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077dc:	f000 f8fc 	bl	80079d8 <_read_r>
 80077e0:	2800      	cmp	r0, #0
 80077e2:	bfab      	itete	ge
 80077e4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80077e6:	89a3      	ldrhlt	r3, [r4, #12]
 80077e8:	181b      	addge	r3, r3, r0
 80077ea:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80077ee:	bfac      	ite	ge
 80077f0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80077f2:	81a3      	strhlt	r3, [r4, #12]
 80077f4:	bd10      	pop	{r4, pc}

080077f6 <__swrite>:
 80077f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077fa:	461f      	mov	r7, r3
 80077fc:	898b      	ldrh	r3, [r1, #12]
 80077fe:	4605      	mov	r5, r0
 8007800:	05db      	lsls	r3, r3, #23
 8007802:	460c      	mov	r4, r1
 8007804:	4616      	mov	r6, r2
 8007806:	d505      	bpl.n	8007814 <__swrite+0x1e>
 8007808:	2302      	movs	r3, #2
 800780a:	2200      	movs	r2, #0
 800780c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007810:	f000 f8d0 	bl	80079b4 <_lseek_r>
 8007814:	89a3      	ldrh	r3, [r4, #12]
 8007816:	4632      	mov	r2, r6
 8007818:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800781c:	81a3      	strh	r3, [r4, #12]
 800781e:	4628      	mov	r0, r5
 8007820:	463b      	mov	r3, r7
 8007822:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007826:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800782a:	f000 b8e7 	b.w	80079fc <_write_r>

0800782e <__sseek>:
 800782e:	b510      	push	{r4, lr}
 8007830:	460c      	mov	r4, r1
 8007832:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007836:	f000 f8bd 	bl	80079b4 <_lseek_r>
 800783a:	1c43      	adds	r3, r0, #1
 800783c:	89a3      	ldrh	r3, [r4, #12]
 800783e:	bf15      	itete	ne
 8007840:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007842:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007846:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800784a:	81a3      	strheq	r3, [r4, #12]
 800784c:	bf18      	it	ne
 800784e:	81a3      	strhne	r3, [r4, #12]
 8007850:	bd10      	pop	{r4, pc}

08007852 <__sclose>:
 8007852:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007856:	f000 b89d 	b.w	8007994 <_close_r>

0800785a <__swbuf_r>:
 800785a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800785c:	460e      	mov	r6, r1
 800785e:	4614      	mov	r4, r2
 8007860:	4605      	mov	r5, r0
 8007862:	b118      	cbz	r0, 800786c <__swbuf_r+0x12>
 8007864:	6a03      	ldr	r3, [r0, #32]
 8007866:	b90b      	cbnz	r3, 800786c <__swbuf_r+0x12>
 8007868:	f7ff fed8 	bl	800761c <__sinit>
 800786c:	69a3      	ldr	r3, [r4, #24]
 800786e:	60a3      	str	r3, [r4, #8]
 8007870:	89a3      	ldrh	r3, [r4, #12]
 8007872:	071a      	lsls	r2, r3, #28
 8007874:	d501      	bpl.n	800787a <__swbuf_r+0x20>
 8007876:	6923      	ldr	r3, [r4, #16]
 8007878:	b943      	cbnz	r3, 800788c <__swbuf_r+0x32>
 800787a:	4621      	mov	r1, r4
 800787c:	4628      	mov	r0, r5
 800787e:	f000 f82b 	bl	80078d8 <__swsetup_r>
 8007882:	b118      	cbz	r0, 800788c <__swbuf_r+0x32>
 8007884:	f04f 37ff 	mov.w	r7, #4294967295
 8007888:	4638      	mov	r0, r7
 800788a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800788c:	6823      	ldr	r3, [r4, #0]
 800788e:	6922      	ldr	r2, [r4, #16]
 8007890:	b2f6      	uxtb	r6, r6
 8007892:	1a98      	subs	r0, r3, r2
 8007894:	6963      	ldr	r3, [r4, #20]
 8007896:	4637      	mov	r7, r6
 8007898:	4283      	cmp	r3, r0
 800789a:	dc05      	bgt.n	80078a8 <__swbuf_r+0x4e>
 800789c:	4621      	mov	r1, r4
 800789e:	4628      	mov	r0, r5
 80078a0:	f000 fe8a 	bl	80085b8 <_fflush_r>
 80078a4:	2800      	cmp	r0, #0
 80078a6:	d1ed      	bne.n	8007884 <__swbuf_r+0x2a>
 80078a8:	68a3      	ldr	r3, [r4, #8]
 80078aa:	3b01      	subs	r3, #1
 80078ac:	60a3      	str	r3, [r4, #8]
 80078ae:	6823      	ldr	r3, [r4, #0]
 80078b0:	1c5a      	adds	r2, r3, #1
 80078b2:	6022      	str	r2, [r4, #0]
 80078b4:	701e      	strb	r6, [r3, #0]
 80078b6:	6962      	ldr	r2, [r4, #20]
 80078b8:	1c43      	adds	r3, r0, #1
 80078ba:	429a      	cmp	r2, r3
 80078bc:	d004      	beq.n	80078c8 <__swbuf_r+0x6e>
 80078be:	89a3      	ldrh	r3, [r4, #12]
 80078c0:	07db      	lsls	r3, r3, #31
 80078c2:	d5e1      	bpl.n	8007888 <__swbuf_r+0x2e>
 80078c4:	2e0a      	cmp	r6, #10
 80078c6:	d1df      	bne.n	8007888 <__swbuf_r+0x2e>
 80078c8:	4621      	mov	r1, r4
 80078ca:	4628      	mov	r0, r5
 80078cc:	f000 fe74 	bl	80085b8 <_fflush_r>
 80078d0:	2800      	cmp	r0, #0
 80078d2:	d0d9      	beq.n	8007888 <__swbuf_r+0x2e>
 80078d4:	e7d6      	b.n	8007884 <__swbuf_r+0x2a>
	...

080078d8 <__swsetup_r>:
 80078d8:	b538      	push	{r3, r4, r5, lr}
 80078da:	4b29      	ldr	r3, [pc, #164]	@ (8007980 <__swsetup_r+0xa8>)
 80078dc:	4605      	mov	r5, r0
 80078de:	6818      	ldr	r0, [r3, #0]
 80078e0:	460c      	mov	r4, r1
 80078e2:	b118      	cbz	r0, 80078ec <__swsetup_r+0x14>
 80078e4:	6a03      	ldr	r3, [r0, #32]
 80078e6:	b90b      	cbnz	r3, 80078ec <__swsetup_r+0x14>
 80078e8:	f7ff fe98 	bl	800761c <__sinit>
 80078ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80078f0:	0719      	lsls	r1, r3, #28
 80078f2:	d422      	bmi.n	800793a <__swsetup_r+0x62>
 80078f4:	06da      	lsls	r2, r3, #27
 80078f6:	d407      	bmi.n	8007908 <__swsetup_r+0x30>
 80078f8:	2209      	movs	r2, #9
 80078fa:	602a      	str	r2, [r5, #0]
 80078fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007900:	f04f 30ff 	mov.w	r0, #4294967295
 8007904:	81a3      	strh	r3, [r4, #12]
 8007906:	e033      	b.n	8007970 <__swsetup_r+0x98>
 8007908:	0758      	lsls	r0, r3, #29
 800790a:	d512      	bpl.n	8007932 <__swsetup_r+0x5a>
 800790c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800790e:	b141      	cbz	r1, 8007922 <__swsetup_r+0x4a>
 8007910:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007914:	4299      	cmp	r1, r3
 8007916:	d002      	beq.n	800791e <__swsetup_r+0x46>
 8007918:	4628      	mov	r0, r5
 800791a:	f000 f8af 	bl	8007a7c <_free_r>
 800791e:	2300      	movs	r3, #0
 8007920:	6363      	str	r3, [r4, #52]	@ 0x34
 8007922:	89a3      	ldrh	r3, [r4, #12]
 8007924:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007928:	81a3      	strh	r3, [r4, #12]
 800792a:	2300      	movs	r3, #0
 800792c:	6063      	str	r3, [r4, #4]
 800792e:	6923      	ldr	r3, [r4, #16]
 8007930:	6023      	str	r3, [r4, #0]
 8007932:	89a3      	ldrh	r3, [r4, #12]
 8007934:	f043 0308 	orr.w	r3, r3, #8
 8007938:	81a3      	strh	r3, [r4, #12]
 800793a:	6923      	ldr	r3, [r4, #16]
 800793c:	b94b      	cbnz	r3, 8007952 <__swsetup_r+0x7a>
 800793e:	89a3      	ldrh	r3, [r4, #12]
 8007940:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007944:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007948:	d003      	beq.n	8007952 <__swsetup_r+0x7a>
 800794a:	4621      	mov	r1, r4
 800794c:	4628      	mov	r0, r5
 800794e:	f000 fe80 	bl	8008652 <__smakebuf_r>
 8007952:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007956:	f013 0201 	ands.w	r2, r3, #1
 800795a:	d00a      	beq.n	8007972 <__swsetup_r+0x9a>
 800795c:	2200      	movs	r2, #0
 800795e:	60a2      	str	r2, [r4, #8]
 8007960:	6962      	ldr	r2, [r4, #20]
 8007962:	4252      	negs	r2, r2
 8007964:	61a2      	str	r2, [r4, #24]
 8007966:	6922      	ldr	r2, [r4, #16]
 8007968:	b942      	cbnz	r2, 800797c <__swsetup_r+0xa4>
 800796a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800796e:	d1c5      	bne.n	80078fc <__swsetup_r+0x24>
 8007970:	bd38      	pop	{r3, r4, r5, pc}
 8007972:	0799      	lsls	r1, r3, #30
 8007974:	bf58      	it	pl
 8007976:	6962      	ldrpl	r2, [r4, #20]
 8007978:	60a2      	str	r2, [r4, #8]
 800797a:	e7f4      	b.n	8007966 <__swsetup_r+0x8e>
 800797c:	2000      	movs	r0, #0
 800797e:	e7f7      	b.n	8007970 <__swsetup_r+0x98>
 8007980:	20000018 	.word	0x20000018

08007984 <memset>:
 8007984:	4603      	mov	r3, r0
 8007986:	4402      	add	r2, r0
 8007988:	4293      	cmp	r3, r2
 800798a:	d100      	bne.n	800798e <memset+0xa>
 800798c:	4770      	bx	lr
 800798e:	f803 1b01 	strb.w	r1, [r3], #1
 8007992:	e7f9      	b.n	8007988 <memset+0x4>

08007994 <_close_r>:
 8007994:	b538      	push	{r3, r4, r5, lr}
 8007996:	2300      	movs	r3, #0
 8007998:	4d05      	ldr	r5, [pc, #20]	@ (80079b0 <_close_r+0x1c>)
 800799a:	4604      	mov	r4, r0
 800799c:	4608      	mov	r0, r1
 800799e:	602b      	str	r3, [r5, #0]
 80079a0:	f7fa fa35 	bl	8001e0e <_close>
 80079a4:	1c43      	adds	r3, r0, #1
 80079a6:	d102      	bne.n	80079ae <_close_r+0x1a>
 80079a8:	682b      	ldr	r3, [r5, #0]
 80079aa:	b103      	cbz	r3, 80079ae <_close_r+0x1a>
 80079ac:	6023      	str	r3, [r4, #0]
 80079ae:	bd38      	pop	{r3, r4, r5, pc}
 80079b0:	200002f8 	.word	0x200002f8

080079b4 <_lseek_r>:
 80079b4:	b538      	push	{r3, r4, r5, lr}
 80079b6:	4604      	mov	r4, r0
 80079b8:	4608      	mov	r0, r1
 80079ba:	4611      	mov	r1, r2
 80079bc:	2200      	movs	r2, #0
 80079be:	4d05      	ldr	r5, [pc, #20]	@ (80079d4 <_lseek_r+0x20>)
 80079c0:	602a      	str	r2, [r5, #0]
 80079c2:	461a      	mov	r2, r3
 80079c4:	f7fa fa47 	bl	8001e56 <_lseek>
 80079c8:	1c43      	adds	r3, r0, #1
 80079ca:	d102      	bne.n	80079d2 <_lseek_r+0x1e>
 80079cc:	682b      	ldr	r3, [r5, #0]
 80079ce:	b103      	cbz	r3, 80079d2 <_lseek_r+0x1e>
 80079d0:	6023      	str	r3, [r4, #0]
 80079d2:	bd38      	pop	{r3, r4, r5, pc}
 80079d4:	200002f8 	.word	0x200002f8

080079d8 <_read_r>:
 80079d8:	b538      	push	{r3, r4, r5, lr}
 80079da:	4604      	mov	r4, r0
 80079dc:	4608      	mov	r0, r1
 80079de:	4611      	mov	r1, r2
 80079e0:	2200      	movs	r2, #0
 80079e2:	4d05      	ldr	r5, [pc, #20]	@ (80079f8 <_read_r+0x20>)
 80079e4:	602a      	str	r2, [r5, #0]
 80079e6:	461a      	mov	r2, r3
 80079e8:	f7fa f9d8 	bl	8001d9c <_read>
 80079ec:	1c43      	adds	r3, r0, #1
 80079ee:	d102      	bne.n	80079f6 <_read_r+0x1e>
 80079f0:	682b      	ldr	r3, [r5, #0]
 80079f2:	b103      	cbz	r3, 80079f6 <_read_r+0x1e>
 80079f4:	6023      	str	r3, [r4, #0]
 80079f6:	bd38      	pop	{r3, r4, r5, pc}
 80079f8:	200002f8 	.word	0x200002f8

080079fc <_write_r>:
 80079fc:	b538      	push	{r3, r4, r5, lr}
 80079fe:	4604      	mov	r4, r0
 8007a00:	4608      	mov	r0, r1
 8007a02:	4611      	mov	r1, r2
 8007a04:	2200      	movs	r2, #0
 8007a06:	4d05      	ldr	r5, [pc, #20]	@ (8007a1c <_write_r+0x20>)
 8007a08:	602a      	str	r2, [r5, #0]
 8007a0a:	461a      	mov	r2, r3
 8007a0c:	f7fa f9e3 	bl	8001dd6 <_write>
 8007a10:	1c43      	adds	r3, r0, #1
 8007a12:	d102      	bne.n	8007a1a <_write_r+0x1e>
 8007a14:	682b      	ldr	r3, [r5, #0]
 8007a16:	b103      	cbz	r3, 8007a1a <_write_r+0x1e>
 8007a18:	6023      	str	r3, [r4, #0]
 8007a1a:	bd38      	pop	{r3, r4, r5, pc}
 8007a1c:	200002f8 	.word	0x200002f8

08007a20 <__errno>:
 8007a20:	4b01      	ldr	r3, [pc, #4]	@ (8007a28 <__errno+0x8>)
 8007a22:	6818      	ldr	r0, [r3, #0]
 8007a24:	4770      	bx	lr
 8007a26:	bf00      	nop
 8007a28:	20000018 	.word	0x20000018

08007a2c <__libc_init_array>:
 8007a2c:	b570      	push	{r4, r5, r6, lr}
 8007a2e:	2600      	movs	r6, #0
 8007a30:	4d0c      	ldr	r5, [pc, #48]	@ (8007a64 <__libc_init_array+0x38>)
 8007a32:	4c0d      	ldr	r4, [pc, #52]	@ (8007a68 <__libc_init_array+0x3c>)
 8007a34:	1b64      	subs	r4, r4, r5
 8007a36:	10a4      	asrs	r4, r4, #2
 8007a38:	42a6      	cmp	r6, r4
 8007a3a:	d109      	bne.n	8007a50 <__libc_init_array+0x24>
 8007a3c:	f000 fee4 	bl	8008808 <_init>
 8007a40:	2600      	movs	r6, #0
 8007a42:	4d0a      	ldr	r5, [pc, #40]	@ (8007a6c <__libc_init_array+0x40>)
 8007a44:	4c0a      	ldr	r4, [pc, #40]	@ (8007a70 <__libc_init_array+0x44>)
 8007a46:	1b64      	subs	r4, r4, r5
 8007a48:	10a4      	asrs	r4, r4, #2
 8007a4a:	42a6      	cmp	r6, r4
 8007a4c:	d105      	bne.n	8007a5a <__libc_init_array+0x2e>
 8007a4e:	bd70      	pop	{r4, r5, r6, pc}
 8007a50:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a54:	4798      	blx	r3
 8007a56:	3601      	adds	r6, #1
 8007a58:	e7ee      	b.n	8007a38 <__libc_init_array+0xc>
 8007a5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a5e:	4798      	blx	r3
 8007a60:	3601      	adds	r6, #1
 8007a62:	e7f2      	b.n	8007a4a <__libc_init_array+0x1e>
 8007a64:	08008a00 	.word	0x08008a00
 8007a68:	08008a00 	.word	0x08008a00
 8007a6c:	08008a00 	.word	0x08008a00
 8007a70:	08008a04 	.word	0x08008a04

08007a74 <__retarget_lock_init_recursive>:
 8007a74:	4770      	bx	lr

08007a76 <__retarget_lock_acquire_recursive>:
 8007a76:	4770      	bx	lr

08007a78 <__retarget_lock_release_recursive>:
 8007a78:	4770      	bx	lr
	...

08007a7c <_free_r>:
 8007a7c:	b538      	push	{r3, r4, r5, lr}
 8007a7e:	4605      	mov	r5, r0
 8007a80:	2900      	cmp	r1, #0
 8007a82:	d040      	beq.n	8007b06 <_free_r+0x8a>
 8007a84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a88:	1f0c      	subs	r4, r1, #4
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	bfb8      	it	lt
 8007a8e:	18e4      	addlt	r4, r4, r3
 8007a90:	f000 f8de 	bl	8007c50 <__malloc_lock>
 8007a94:	4a1c      	ldr	r2, [pc, #112]	@ (8007b08 <_free_r+0x8c>)
 8007a96:	6813      	ldr	r3, [r2, #0]
 8007a98:	b933      	cbnz	r3, 8007aa8 <_free_r+0x2c>
 8007a9a:	6063      	str	r3, [r4, #4]
 8007a9c:	6014      	str	r4, [r2, #0]
 8007a9e:	4628      	mov	r0, r5
 8007aa0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007aa4:	f000 b8da 	b.w	8007c5c <__malloc_unlock>
 8007aa8:	42a3      	cmp	r3, r4
 8007aaa:	d908      	bls.n	8007abe <_free_r+0x42>
 8007aac:	6820      	ldr	r0, [r4, #0]
 8007aae:	1821      	adds	r1, r4, r0
 8007ab0:	428b      	cmp	r3, r1
 8007ab2:	bf01      	itttt	eq
 8007ab4:	6819      	ldreq	r1, [r3, #0]
 8007ab6:	685b      	ldreq	r3, [r3, #4]
 8007ab8:	1809      	addeq	r1, r1, r0
 8007aba:	6021      	streq	r1, [r4, #0]
 8007abc:	e7ed      	b.n	8007a9a <_free_r+0x1e>
 8007abe:	461a      	mov	r2, r3
 8007ac0:	685b      	ldr	r3, [r3, #4]
 8007ac2:	b10b      	cbz	r3, 8007ac8 <_free_r+0x4c>
 8007ac4:	42a3      	cmp	r3, r4
 8007ac6:	d9fa      	bls.n	8007abe <_free_r+0x42>
 8007ac8:	6811      	ldr	r1, [r2, #0]
 8007aca:	1850      	adds	r0, r2, r1
 8007acc:	42a0      	cmp	r0, r4
 8007ace:	d10b      	bne.n	8007ae8 <_free_r+0x6c>
 8007ad0:	6820      	ldr	r0, [r4, #0]
 8007ad2:	4401      	add	r1, r0
 8007ad4:	1850      	adds	r0, r2, r1
 8007ad6:	4283      	cmp	r3, r0
 8007ad8:	6011      	str	r1, [r2, #0]
 8007ada:	d1e0      	bne.n	8007a9e <_free_r+0x22>
 8007adc:	6818      	ldr	r0, [r3, #0]
 8007ade:	685b      	ldr	r3, [r3, #4]
 8007ae0:	4408      	add	r0, r1
 8007ae2:	6010      	str	r0, [r2, #0]
 8007ae4:	6053      	str	r3, [r2, #4]
 8007ae6:	e7da      	b.n	8007a9e <_free_r+0x22>
 8007ae8:	d902      	bls.n	8007af0 <_free_r+0x74>
 8007aea:	230c      	movs	r3, #12
 8007aec:	602b      	str	r3, [r5, #0]
 8007aee:	e7d6      	b.n	8007a9e <_free_r+0x22>
 8007af0:	6820      	ldr	r0, [r4, #0]
 8007af2:	1821      	adds	r1, r4, r0
 8007af4:	428b      	cmp	r3, r1
 8007af6:	bf01      	itttt	eq
 8007af8:	6819      	ldreq	r1, [r3, #0]
 8007afa:	685b      	ldreq	r3, [r3, #4]
 8007afc:	1809      	addeq	r1, r1, r0
 8007afe:	6021      	streq	r1, [r4, #0]
 8007b00:	6063      	str	r3, [r4, #4]
 8007b02:	6054      	str	r4, [r2, #4]
 8007b04:	e7cb      	b.n	8007a9e <_free_r+0x22>
 8007b06:	bd38      	pop	{r3, r4, r5, pc}
 8007b08:	20000304 	.word	0x20000304

08007b0c <sbrk_aligned>:
 8007b0c:	b570      	push	{r4, r5, r6, lr}
 8007b0e:	4e0f      	ldr	r6, [pc, #60]	@ (8007b4c <sbrk_aligned+0x40>)
 8007b10:	460c      	mov	r4, r1
 8007b12:	6831      	ldr	r1, [r6, #0]
 8007b14:	4605      	mov	r5, r0
 8007b16:	b911      	cbnz	r1, 8007b1e <sbrk_aligned+0x12>
 8007b18:	f000 fe14 	bl	8008744 <_sbrk_r>
 8007b1c:	6030      	str	r0, [r6, #0]
 8007b1e:	4621      	mov	r1, r4
 8007b20:	4628      	mov	r0, r5
 8007b22:	f000 fe0f 	bl	8008744 <_sbrk_r>
 8007b26:	1c43      	adds	r3, r0, #1
 8007b28:	d103      	bne.n	8007b32 <sbrk_aligned+0x26>
 8007b2a:	f04f 34ff 	mov.w	r4, #4294967295
 8007b2e:	4620      	mov	r0, r4
 8007b30:	bd70      	pop	{r4, r5, r6, pc}
 8007b32:	1cc4      	adds	r4, r0, #3
 8007b34:	f024 0403 	bic.w	r4, r4, #3
 8007b38:	42a0      	cmp	r0, r4
 8007b3a:	d0f8      	beq.n	8007b2e <sbrk_aligned+0x22>
 8007b3c:	1a21      	subs	r1, r4, r0
 8007b3e:	4628      	mov	r0, r5
 8007b40:	f000 fe00 	bl	8008744 <_sbrk_r>
 8007b44:	3001      	adds	r0, #1
 8007b46:	d1f2      	bne.n	8007b2e <sbrk_aligned+0x22>
 8007b48:	e7ef      	b.n	8007b2a <sbrk_aligned+0x1e>
 8007b4a:	bf00      	nop
 8007b4c:	20000300 	.word	0x20000300

08007b50 <_malloc_r>:
 8007b50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b54:	1ccd      	adds	r5, r1, #3
 8007b56:	f025 0503 	bic.w	r5, r5, #3
 8007b5a:	3508      	adds	r5, #8
 8007b5c:	2d0c      	cmp	r5, #12
 8007b5e:	bf38      	it	cc
 8007b60:	250c      	movcc	r5, #12
 8007b62:	2d00      	cmp	r5, #0
 8007b64:	4606      	mov	r6, r0
 8007b66:	db01      	blt.n	8007b6c <_malloc_r+0x1c>
 8007b68:	42a9      	cmp	r1, r5
 8007b6a:	d904      	bls.n	8007b76 <_malloc_r+0x26>
 8007b6c:	230c      	movs	r3, #12
 8007b6e:	6033      	str	r3, [r6, #0]
 8007b70:	2000      	movs	r0, #0
 8007b72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b76:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007c4c <_malloc_r+0xfc>
 8007b7a:	f000 f869 	bl	8007c50 <__malloc_lock>
 8007b7e:	f8d8 3000 	ldr.w	r3, [r8]
 8007b82:	461c      	mov	r4, r3
 8007b84:	bb44      	cbnz	r4, 8007bd8 <_malloc_r+0x88>
 8007b86:	4629      	mov	r1, r5
 8007b88:	4630      	mov	r0, r6
 8007b8a:	f7ff ffbf 	bl	8007b0c <sbrk_aligned>
 8007b8e:	1c43      	adds	r3, r0, #1
 8007b90:	4604      	mov	r4, r0
 8007b92:	d158      	bne.n	8007c46 <_malloc_r+0xf6>
 8007b94:	f8d8 4000 	ldr.w	r4, [r8]
 8007b98:	4627      	mov	r7, r4
 8007b9a:	2f00      	cmp	r7, #0
 8007b9c:	d143      	bne.n	8007c26 <_malloc_r+0xd6>
 8007b9e:	2c00      	cmp	r4, #0
 8007ba0:	d04b      	beq.n	8007c3a <_malloc_r+0xea>
 8007ba2:	6823      	ldr	r3, [r4, #0]
 8007ba4:	4639      	mov	r1, r7
 8007ba6:	4630      	mov	r0, r6
 8007ba8:	eb04 0903 	add.w	r9, r4, r3
 8007bac:	f000 fdca 	bl	8008744 <_sbrk_r>
 8007bb0:	4581      	cmp	r9, r0
 8007bb2:	d142      	bne.n	8007c3a <_malloc_r+0xea>
 8007bb4:	6821      	ldr	r1, [r4, #0]
 8007bb6:	4630      	mov	r0, r6
 8007bb8:	1a6d      	subs	r5, r5, r1
 8007bba:	4629      	mov	r1, r5
 8007bbc:	f7ff ffa6 	bl	8007b0c <sbrk_aligned>
 8007bc0:	3001      	adds	r0, #1
 8007bc2:	d03a      	beq.n	8007c3a <_malloc_r+0xea>
 8007bc4:	6823      	ldr	r3, [r4, #0]
 8007bc6:	442b      	add	r3, r5
 8007bc8:	6023      	str	r3, [r4, #0]
 8007bca:	f8d8 3000 	ldr.w	r3, [r8]
 8007bce:	685a      	ldr	r2, [r3, #4]
 8007bd0:	bb62      	cbnz	r2, 8007c2c <_malloc_r+0xdc>
 8007bd2:	f8c8 7000 	str.w	r7, [r8]
 8007bd6:	e00f      	b.n	8007bf8 <_malloc_r+0xa8>
 8007bd8:	6822      	ldr	r2, [r4, #0]
 8007bda:	1b52      	subs	r2, r2, r5
 8007bdc:	d420      	bmi.n	8007c20 <_malloc_r+0xd0>
 8007bde:	2a0b      	cmp	r2, #11
 8007be0:	d917      	bls.n	8007c12 <_malloc_r+0xc2>
 8007be2:	1961      	adds	r1, r4, r5
 8007be4:	42a3      	cmp	r3, r4
 8007be6:	6025      	str	r5, [r4, #0]
 8007be8:	bf18      	it	ne
 8007bea:	6059      	strne	r1, [r3, #4]
 8007bec:	6863      	ldr	r3, [r4, #4]
 8007bee:	bf08      	it	eq
 8007bf0:	f8c8 1000 	streq.w	r1, [r8]
 8007bf4:	5162      	str	r2, [r4, r5]
 8007bf6:	604b      	str	r3, [r1, #4]
 8007bf8:	4630      	mov	r0, r6
 8007bfa:	f000 f82f 	bl	8007c5c <__malloc_unlock>
 8007bfe:	f104 000b 	add.w	r0, r4, #11
 8007c02:	1d23      	adds	r3, r4, #4
 8007c04:	f020 0007 	bic.w	r0, r0, #7
 8007c08:	1ac2      	subs	r2, r0, r3
 8007c0a:	bf1c      	itt	ne
 8007c0c:	1a1b      	subne	r3, r3, r0
 8007c0e:	50a3      	strne	r3, [r4, r2]
 8007c10:	e7af      	b.n	8007b72 <_malloc_r+0x22>
 8007c12:	6862      	ldr	r2, [r4, #4]
 8007c14:	42a3      	cmp	r3, r4
 8007c16:	bf0c      	ite	eq
 8007c18:	f8c8 2000 	streq.w	r2, [r8]
 8007c1c:	605a      	strne	r2, [r3, #4]
 8007c1e:	e7eb      	b.n	8007bf8 <_malloc_r+0xa8>
 8007c20:	4623      	mov	r3, r4
 8007c22:	6864      	ldr	r4, [r4, #4]
 8007c24:	e7ae      	b.n	8007b84 <_malloc_r+0x34>
 8007c26:	463c      	mov	r4, r7
 8007c28:	687f      	ldr	r7, [r7, #4]
 8007c2a:	e7b6      	b.n	8007b9a <_malloc_r+0x4a>
 8007c2c:	461a      	mov	r2, r3
 8007c2e:	685b      	ldr	r3, [r3, #4]
 8007c30:	42a3      	cmp	r3, r4
 8007c32:	d1fb      	bne.n	8007c2c <_malloc_r+0xdc>
 8007c34:	2300      	movs	r3, #0
 8007c36:	6053      	str	r3, [r2, #4]
 8007c38:	e7de      	b.n	8007bf8 <_malloc_r+0xa8>
 8007c3a:	230c      	movs	r3, #12
 8007c3c:	4630      	mov	r0, r6
 8007c3e:	6033      	str	r3, [r6, #0]
 8007c40:	f000 f80c 	bl	8007c5c <__malloc_unlock>
 8007c44:	e794      	b.n	8007b70 <_malloc_r+0x20>
 8007c46:	6005      	str	r5, [r0, #0]
 8007c48:	e7d6      	b.n	8007bf8 <_malloc_r+0xa8>
 8007c4a:	bf00      	nop
 8007c4c:	20000304 	.word	0x20000304

08007c50 <__malloc_lock>:
 8007c50:	4801      	ldr	r0, [pc, #4]	@ (8007c58 <__malloc_lock+0x8>)
 8007c52:	f7ff bf10 	b.w	8007a76 <__retarget_lock_acquire_recursive>
 8007c56:	bf00      	nop
 8007c58:	200002fc 	.word	0x200002fc

08007c5c <__malloc_unlock>:
 8007c5c:	4801      	ldr	r0, [pc, #4]	@ (8007c64 <__malloc_unlock+0x8>)
 8007c5e:	f7ff bf0b 	b.w	8007a78 <__retarget_lock_release_recursive>
 8007c62:	bf00      	nop
 8007c64:	200002fc 	.word	0x200002fc

08007c68 <__ssputs_r>:
 8007c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c6c:	461f      	mov	r7, r3
 8007c6e:	688e      	ldr	r6, [r1, #8]
 8007c70:	4682      	mov	sl, r0
 8007c72:	42be      	cmp	r6, r7
 8007c74:	460c      	mov	r4, r1
 8007c76:	4690      	mov	r8, r2
 8007c78:	680b      	ldr	r3, [r1, #0]
 8007c7a:	d82d      	bhi.n	8007cd8 <__ssputs_r+0x70>
 8007c7c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007c80:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007c84:	d026      	beq.n	8007cd4 <__ssputs_r+0x6c>
 8007c86:	6965      	ldr	r5, [r4, #20]
 8007c88:	6909      	ldr	r1, [r1, #16]
 8007c8a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007c8e:	eba3 0901 	sub.w	r9, r3, r1
 8007c92:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007c96:	1c7b      	adds	r3, r7, #1
 8007c98:	444b      	add	r3, r9
 8007c9a:	106d      	asrs	r5, r5, #1
 8007c9c:	429d      	cmp	r5, r3
 8007c9e:	bf38      	it	cc
 8007ca0:	461d      	movcc	r5, r3
 8007ca2:	0553      	lsls	r3, r2, #21
 8007ca4:	d527      	bpl.n	8007cf6 <__ssputs_r+0x8e>
 8007ca6:	4629      	mov	r1, r5
 8007ca8:	f7ff ff52 	bl	8007b50 <_malloc_r>
 8007cac:	4606      	mov	r6, r0
 8007cae:	b360      	cbz	r0, 8007d0a <__ssputs_r+0xa2>
 8007cb0:	464a      	mov	r2, r9
 8007cb2:	6921      	ldr	r1, [r4, #16]
 8007cb4:	f000 fd64 	bl	8008780 <memcpy>
 8007cb8:	89a3      	ldrh	r3, [r4, #12]
 8007cba:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007cbe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007cc2:	81a3      	strh	r3, [r4, #12]
 8007cc4:	6126      	str	r6, [r4, #16]
 8007cc6:	444e      	add	r6, r9
 8007cc8:	6026      	str	r6, [r4, #0]
 8007cca:	463e      	mov	r6, r7
 8007ccc:	6165      	str	r5, [r4, #20]
 8007cce:	eba5 0509 	sub.w	r5, r5, r9
 8007cd2:	60a5      	str	r5, [r4, #8]
 8007cd4:	42be      	cmp	r6, r7
 8007cd6:	d900      	bls.n	8007cda <__ssputs_r+0x72>
 8007cd8:	463e      	mov	r6, r7
 8007cda:	4632      	mov	r2, r6
 8007cdc:	4641      	mov	r1, r8
 8007cde:	6820      	ldr	r0, [r4, #0]
 8007ce0:	f000 fcf3 	bl	80086ca <memmove>
 8007ce4:	2000      	movs	r0, #0
 8007ce6:	68a3      	ldr	r3, [r4, #8]
 8007ce8:	1b9b      	subs	r3, r3, r6
 8007cea:	60a3      	str	r3, [r4, #8]
 8007cec:	6823      	ldr	r3, [r4, #0]
 8007cee:	4433      	add	r3, r6
 8007cf0:	6023      	str	r3, [r4, #0]
 8007cf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cf6:	462a      	mov	r2, r5
 8007cf8:	f000 fd50 	bl	800879c <_realloc_r>
 8007cfc:	4606      	mov	r6, r0
 8007cfe:	2800      	cmp	r0, #0
 8007d00:	d1e0      	bne.n	8007cc4 <__ssputs_r+0x5c>
 8007d02:	4650      	mov	r0, sl
 8007d04:	6921      	ldr	r1, [r4, #16]
 8007d06:	f7ff feb9 	bl	8007a7c <_free_r>
 8007d0a:	230c      	movs	r3, #12
 8007d0c:	f8ca 3000 	str.w	r3, [sl]
 8007d10:	89a3      	ldrh	r3, [r4, #12]
 8007d12:	f04f 30ff 	mov.w	r0, #4294967295
 8007d16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007d1a:	81a3      	strh	r3, [r4, #12]
 8007d1c:	e7e9      	b.n	8007cf2 <__ssputs_r+0x8a>
	...

08007d20 <_svfiprintf_r>:
 8007d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d24:	4698      	mov	r8, r3
 8007d26:	898b      	ldrh	r3, [r1, #12]
 8007d28:	4607      	mov	r7, r0
 8007d2a:	061b      	lsls	r3, r3, #24
 8007d2c:	460d      	mov	r5, r1
 8007d2e:	4614      	mov	r4, r2
 8007d30:	b09d      	sub	sp, #116	@ 0x74
 8007d32:	d510      	bpl.n	8007d56 <_svfiprintf_r+0x36>
 8007d34:	690b      	ldr	r3, [r1, #16]
 8007d36:	b973      	cbnz	r3, 8007d56 <_svfiprintf_r+0x36>
 8007d38:	2140      	movs	r1, #64	@ 0x40
 8007d3a:	f7ff ff09 	bl	8007b50 <_malloc_r>
 8007d3e:	6028      	str	r0, [r5, #0]
 8007d40:	6128      	str	r0, [r5, #16]
 8007d42:	b930      	cbnz	r0, 8007d52 <_svfiprintf_r+0x32>
 8007d44:	230c      	movs	r3, #12
 8007d46:	603b      	str	r3, [r7, #0]
 8007d48:	f04f 30ff 	mov.w	r0, #4294967295
 8007d4c:	b01d      	add	sp, #116	@ 0x74
 8007d4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d52:	2340      	movs	r3, #64	@ 0x40
 8007d54:	616b      	str	r3, [r5, #20]
 8007d56:	2300      	movs	r3, #0
 8007d58:	9309      	str	r3, [sp, #36]	@ 0x24
 8007d5a:	2320      	movs	r3, #32
 8007d5c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007d60:	2330      	movs	r3, #48	@ 0x30
 8007d62:	f04f 0901 	mov.w	r9, #1
 8007d66:	f8cd 800c 	str.w	r8, [sp, #12]
 8007d6a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8007f04 <_svfiprintf_r+0x1e4>
 8007d6e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007d72:	4623      	mov	r3, r4
 8007d74:	469a      	mov	sl, r3
 8007d76:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007d7a:	b10a      	cbz	r2, 8007d80 <_svfiprintf_r+0x60>
 8007d7c:	2a25      	cmp	r2, #37	@ 0x25
 8007d7e:	d1f9      	bne.n	8007d74 <_svfiprintf_r+0x54>
 8007d80:	ebba 0b04 	subs.w	fp, sl, r4
 8007d84:	d00b      	beq.n	8007d9e <_svfiprintf_r+0x7e>
 8007d86:	465b      	mov	r3, fp
 8007d88:	4622      	mov	r2, r4
 8007d8a:	4629      	mov	r1, r5
 8007d8c:	4638      	mov	r0, r7
 8007d8e:	f7ff ff6b 	bl	8007c68 <__ssputs_r>
 8007d92:	3001      	adds	r0, #1
 8007d94:	f000 80a7 	beq.w	8007ee6 <_svfiprintf_r+0x1c6>
 8007d98:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007d9a:	445a      	add	r2, fp
 8007d9c:	9209      	str	r2, [sp, #36]	@ 0x24
 8007d9e:	f89a 3000 	ldrb.w	r3, [sl]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	f000 809f 	beq.w	8007ee6 <_svfiprintf_r+0x1c6>
 8007da8:	2300      	movs	r3, #0
 8007daa:	f04f 32ff 	mov.w	r2, #4294967295
 8007dae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007db2:	f10a 0a01 	add.w	sl, sl, #1
 8007db6:	9304      	str	r3, [sp, #16]
 8007db8:	9307      	str	r3, [sp, #28]
 8007dba:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007dbe:	931a      	str	r3, [sp, #104]	@ 0x68
 8007dc0:	4654      	mov	r4, sl
 8007dc2:	2205      	movs	r2, #5
 8007dc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007dc8:	484e      	ldr	r0, [pc, #312]	@ (8007f04 <_svfiprintf_r+0x1e4>)
 8007dca:	f000 fccb 	bl	8008764 <memchr>
 8007dce:	9a04      	ldr	r2, [sp, #16]
 8007dd0:	b9d8      	cbnz	r0, 8007e0a <_svfiprintf_r+0xea>
 8007dd2:	06d0      	lsls	r0, r2, #27
 8007dd4:	bf44      	itt	mi
 8007dd6:	2320      	movmi	r3, #32
 8007dd8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007ddc:	0711      	lsls	r1, r2, #28
 8007dde:	bf44      	itt	mi
 8007de0:	232b      	movmi	r3, #43	@ 0x2b
 8007de2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007de6:	f89a 3000 	ldrb.w	r3, [sl]
 8007dea:	2b2a      	cmp	r3, #42	@ 0x2a
 8007dec:	d015      	beq.n	8007e1a <_svfiprintf_r+0xfa>
 8007dee:	4654      	mov	r4, sl
 8007df0:	2000      	movs	r0, #0
 8007df2:	f04f 0c0a 	mov.w	ip, #10
 8007df6:	9a07      	ldr	r2, [sp, #28]
 8007df8:	4621      	mov	r1, r4
 8007dfa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007dfe:	3b30      	subs	r3, #48	@ 0x30
 8007e00:	2b09      	cmp	r3, #9
 8007e02:	d94b      	bls.n	8007e9c <_svfiprintf_r+0x17c>
 8007e04:	b1b0      	cbz	r0, 8007e34 <_svfiprintf_r+0x114>
 8007e06:	9207      	str	r2, [sp, #28]
 8007e08:	e014      	b.n	8007e34 <_svfiprintf_r+0x114>
 8007e0a:	eba0 0308 	sub.w	r3, r0, r8
 8007e0e:	fa09 f303 	lsl.w	r3, r9, r3
 8007e12:	4313      	orrs	r3, r2
 8007e14:	46a2      	mov	sl, r4
 8007e16:	9304      	str	r3, [sp, #16]
 8007e18:	e7d2      	b.n	8007dc0 <_svfiprintf_r+0xa0>
 8007e1a:	9b03      	ldr	r3, [sp, #12]
 8007e1c:	1d19      	adds	r1, r3, #4
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	9103      	str	r1, [sp, #12]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	bfbb      	ittet	lt
 8007e26:	425b      	neglt	r3, r3
 8007e28:	f042 0202 	orrlt.w	r2, r2, #2
 8007e2c:	9307      	strge	r3, [sp, #28]
 8007e2e:	9307      	strlt	r3, [sp, #28]
 8007e30:	bfb8      	it	lt
 8007e32:	9204      	strlt	r2, [sp, #16]
 8007e34:	7823      	ldrb	r3, [r4, #0]
 8007e36:	2b2e      	cmp	r3, #46	@ 0x2e
 8007e38:	d10a      	bne.n	8007e50 <_svfiprintf_r+0x130>
 8007e3a:	7863      	ldrb	r3, [r4, #1]
 8007e3c:	2b2a      	cmp	r3, #42	@ 0x2a
 8007e3e:	d132      	bne.n	8007ea6 <_svfiprintf_r+0x186>
 8007e40:	9b03      	ldr	r3, [sp, #12]
 8007e42:	3402      	adds	r4, #2
 8007e44:	1d1a      	adds	r2, r3, #4
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	9203      	str	r2, [sp, #12]
 8007e4a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007e4e:	9305      	str	r3, [sp, #20]
 8007e50:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8007f08 <_svfiprintf_r+0x1e8>
 8007e54:	2203      	movs	r2, #3
 8007e56:	4650      	mov	r0, sl
 8007e58:	7821      	ldrb	r1, [r4, #0]
 8007e5a:	f000 fc83 	bl	8008764 <memchr>
 8007e5e:	b138      	cbz	r0, 8007e70 <_svfiprintf_r+0x150>
 8007e60:	2240      	movs	r2, #64	@ 0x40
 8007e62:	9b04      	ldr	r3, [sp, #16]
 8007e64:	eba0 000a 	sub.w	r0, r0, sl
 8007e68:	4082      	lsls	r2, r0
 8007e6a:	4313      	orrs	r3, r2
 8007e6c:	3401      	adds	r4, #1
 8007e6e:	9304      	str	r3, [sp, #16]
 8007e70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e74:	2206      	movs	r2, #6
 8007e76:	4825      	ldr	r0, [pc, #148]	@ (8007f0c <_svfiprintf_r+0x1ec>)
 8007e78:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007e7c:	f000 fc72 	bl	8008764 <memchr>
 8007e80:	2800      	cmp	r0, #0
 8007e82:	d036      	beq.n	8007ef2 <_svfiprintf_r+0x1d2>
 8007e84:	4b22      	ldr	r3, [pc, #136]	@ (8007f10 <_svfiprintf_r+0x1f0>)
 8007e86:	bb1b      	cbnz	r3, 8007ed0 <_svfiprintf_r+0x1b0>
 8007e88:	9b03      	ldr	r3, [sp, #12]
 8007e8a:	3307      	adds	r3, #7
 8007e8c:	f023 0307 	bic.w	r3, r3, #7
 8007e90:	3308      	adds	r3, #8
 8007e92:	9303      	str	r3, [sp, #12]
 8007e94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e96:	4433      	add	r3, r6
 8007e98:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e9a:	e76a      	b.n	8007d72 <_svfiprintf_r+0x52>
 8007e9c:	460c      	mov	r4, r1
 8007e9e:	2001      	movs	r0, #1
 8007ea0:	fb0c 3202 	mla	r2, ip, r2, r3
 8007ea4:	e7a8      	b.n	8007df8 <_svfiprintf_r+0xd8>
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	f04f 0c0a 	mov.w	ip, #10
 8007eac:	4619      	mov	r1, r3
 8007eae:	3401      	adds	r4, #1
 8007eb0:	9305      	str	r3, [sp, #20]
 8007eb2:	4620      	mov	r0, r4
 8007eb4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007eb8:	3a30      	subs	r2, #48	@ 0x30
 8007eba:	2a09      	cmp	r2, #9
 8007ebc:	d903      	bls.n	8007ec6 <_svfiprintf_r+0x1a6>
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d0c6      	beq.n	8007e50 <_svfiprintf_r+0x130>
 8007ec2:	9105      	str	r1, [sp, #20]
 8007ec4:	e7c4      	b.n	8007e50 <_svfiprintf_r+0x130>
 8007ec6:	4604      	mov	r4, r0
 8007ec8:	2301      	movs	r3, #1
 8007eca:	fb0c 2101 	mla	r1, ip, r1, r2
 8007ece:	e7f0      	b.n	8007eb2 <_svfiprintf_r+0x192>
 8007ed0:	ab03      	add	r3, sp, #12
 8007ed2:	9300      	str	r3, [sp, #0]
 8007ed4:	462a      	mov	r2, r5
 8007ed6:	4638      	mov	r0, r7
 8007ed8:	4b0e      	ldr	r3, [pc, #56]	@ (8007f14 <_svfiprintf_r+0x1f4>)
 8007eda:	a904      	add	r1, sp, #16
 8007edc:	f3af 8000 	nop.w
 8007ee0:	1c42      	adds	r2, r0, #1
 8007ee2:	4606      	mov	r6, r0
 8007ee4:	d1d6      	bne.n	8007e94 <_svfiprintf_r+0x174>
 8007ee6:	89ab      	ldrh	r3, [r5, #12]
 8007ee8:	065b      	lsls	r3, r3, #25
 8007eea:	f53f af2d 	bmi.w	8007d48 <_svfiprintf_r+0x28>
 8007eee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007ef0:	e72c      	b.n	8007d4c <_svfiprintf_r+0x2c>
 8007ef2:	ab03      	add	r3, sp, #12
 8007ef4:	9300      	str	r3, [sp, #0]
 8007ef6:	462a      	mov	r2, r5
 8007ef8:	4638      	mov	r0, r7
 8007efa:	4b06      	ldr	r3, [pc, #24]	@ (8007f14 <_svfiprintf_r+0x1f4>)
 8007efc:	a904      	add	r1, sp, #16
 8007efe:	f000 f9bd 	bl	800827c <_printf_i>
 8007f02:	e7ed      	b.n	8007ee0 <_svfiprintf_r+0x1c0>
 8007f04:	080089c2 	.word	0x080089c2
 8007f08:	080089c8 	.word	0x080089c8
 8007f0c:	080089cc 	.word	0x080089cc
 8007f10:	00000000 	.word	0x00000000
 8007f14:	08007c69 	.word	0x08007c69

08007f18 <__sfputc_r>:
 8007f18:	6893      	ldr	r3, [r2, #8]
 8007f1a:	b410      	push	{r4}
 8007f1c:	3b01      	subs	r3, #1
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	6093      	str	r3, [r2, #8]
 8007f22:	da07      	bge.n	8007f34 <__sfputc_r+0x1c>
 8007f24:	6994      	ldr	r4, [r2, #24]
 8007f26:	42a3      	cmp	r3, r4
 8007f28:	db01      	blt.n	8007f2e <__sfputc_r+0x16>
 8007f2a:	290a      	cmp	r1, #10
 8007f2c:	d102      	bne.n	8007f34 <__sfputc_r+0x1c>
 8007f2e:	bc10      	pop	{r4}
 8007f30:	f7ff bc93 	b.w	800785a <__swbuf_r>
 8007f34:	6813      	ldr	r3, [r2, #0]
 8007f36:	1c58      	adds	r0, r3, #1
 8007f38:	6010      	str	r0, [r2, #0]
 8007f3a:	7019      	strb	r1, [r3, #0]
 8007f3c:	4608      	mov	r0, r1
 8007f3e:	bc10      	pop	{r4}
 8007f40:	4770      	bx	lr

08007f42 <__sfputs_r>:
 8007f42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f44:	4606      	mov	r6, r0
 8007f46:	460f      	mov	r7, r1
 8007f48:	4614      	mov	r4, r2
 8007f4a:	18d5      	adds	r5, r2, r3
 8007f4c:	42ac      	cmp	r4, r5
 8007f4e:	d101      	bne.n	8007f54 <__sfputs_r+0x12>
 8007f50:	2000      	movs	r0, #0
 8007f52:	e007      	b.n	8007f64 <__sfputs_r+0x22>
 8007f54:	463a      	mov	r2, r7
 8007f56:	4630      	mov	r0, r6
 8007f58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f5c:	f7ff ffdc 	bl	8007f18 <__sfputc_r>
 8007f60:	1c43      	adds	r3, r0, #1
 8007f62:	d1f3      	bne.n	8007f4c <__sfputs_r+0xa>
 8007f64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007f68 <_vfiprintf_r>:
 8007f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f6c:	460d      	mov	r5, r1
 8007f6e:	4614      	mov	r4, r2
 8007f70:	4698      	mov	r8, r3
 8007f72:	4606      	mov	r6, r0
 8007f74:	b09d      	sub	sp, #116	@ 0x74
 8007f76:	b118      	cbz	r0, 8007f80 <_vfiprintf_r+0x18>
 8007f78:	6a03      	ldr	r3, [r0, #32]
 8007f7a:	b90b      	cbnz	r3, 8007f80 <_vfiprintf_r+0x18>
 8007f7c:	f7ff fb4e 	bl	800761c <__sinit>
 8007f80:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007f82:	07d9      	lsls	r1, r3, #31
 8007f84:	d405      	bmi.n	8007f92 <_vfiprintf_r+0x2a>
 8007f86:	89ab      	ldrh	r3, [r5, #12]
 8007f88:	059a      	lsls	r2, r3, #22
 8007f8a:	d402      	bmi.n	8007f92 <_vfiprintf_r+0x2a>
 8007f8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007f8e:	f7ff fd72 	bl	8007a76 <__retarget_lock_acquire_recursive>
 8007f92:	89ab      	ldrh	r3, [r5, #12]
 8007f94:	071b      	lsls	r3, r3, #28
 8007f96:	d501      	bpl.n	8007f9c <_vfiprintf_r+0x34>
 8007f98:	692b      	ldr	r3, [r5, #16]
 8007f9a:	b99b      	cbnz	r3, 8007fc4 <_vfiprintf_r+0x5c>
 8007f9c:	4629      	mov	r1, r5
 8007f9e:	4630      	mov	r0, r6
 8007fa0:	f7ff fc9a 	bl	80078d8 <__swsetup_r>
 8007fa4:	b170      	cbz	r0, 8007fc4 <_vfiprintf_r+0x5c>
 8007fa6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007fa8:	07dc      	lsls	r4, r3, #31
 8007faa:	d504      	bpl.n	8007fb6 <_vfiprintf_r+0x4e>
 8007fac:	f04f 30ff 	mov.w	r0, #4294967295
 8007fb0:	b01d      	add	sp, #116	@ 0x74
 8007fb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fb6:	89ab      	ldrh	r3, [r5, #12]
 8007fb8:	0598      	lsls	r0, r3, #22
 8007fba:	d4f7      	bmi.n	8007fac <_vfiprintf_r+0x44>
 8007fbc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007fbe:	f7ff fd5b 	bl	8007a78 <__retarget_lock_release_recursive>
 8007fc2:	e7f3      	b.n	8007fac <_vfiprintf_r+0x44>
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	9309      	str	r3, [sp, #36]	@ 0x24
 8007fc8:	2320      	movs	r3, #32
 8007fca:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007fce:	2330      	movs	r3, #48	@ 0x30
 8007fd0:	f04f 0901 	mov.w	r9, #1
 8007fd4:	f8cd 800c 	str.w	r8, [sp, #12]
 8007fd8:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8008184 <_vfiprintf_r+0x21c>
 8007fdc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007fe0:	4623      	mov	r3, r4
 8007fe2:	469a      	mov	sl, r3
 8007fe4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007fe8:	b10a      	cbz	r2, 8007fee <_vfiprintf_r+0x86>
 8007fea:	2a25      	cmp	r2, #37	@ 0x25
 8007fec:	d1f9      	bne.n	8007fe2 <_vfiprintf_r+0x7a>
 8007fee:	ebba 0b04 	subs.w	fp, sl, r4
 8007ff2:	d00b      	beq.n	800800c <_vfiprintf_r+0xa4>
 8007ff4:	465b      	mov	r3, fp
 8007ff6:	4622      	mov	r2, r4
 8007ff8:	4629      	mov	r1, r5
 8007ffa:	4630      	mov	r0, r6
 8007ffc:	f7ff ffa1 	bl	8007f42 <__sfputs_r>
 8008000:	3001      	adds	r0, #1
 8008002:	f000 80a7 	beq.w	8008154 <_vfiprintf_r+0x1ec>
 8008006:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008008:	445a      	add	r2, fp
 800800a:	9209      	str	r2, [sp, #36]	@ 0x24
 800800c:	f89a 3000 	ldrb.w	r3, [sl]
 8008010:	2b00      	cmp	r3, #0
 8008012:	f000 809f 	beq.w	8008154 <_vfiprintf_r+0x1ec>
 8008016:	2300      	movs	r3, #0
 8008018:	f04f 32ff 	mov.w	r2, #4294967295
 800801c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008020:	f10a 0a01 	add.w	sl, sl, #1
 8008024:	9304      	str	r3, [sp, #16]
 8008026:	9307      	str	r3, [sp, #28]
 8008028:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800802c:	931a      	str	r3, [sp, #104]	@ 0x68
 800802e:	4654      	mov	r4, sl
 8008030:	2205      	movs	r2, #5
 8008032:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008036:	4853      	ldr	r0, [pc, #332]	@ (8008184 <_vfiprintf_r+0x21c>)
 8008038:	f000 fb94 	bl	8008764 <memchr>
 800803c:	9a04      	ldr	r2, [sp, #16]
 800803e:	b9d8      	cbnz	r0, 8008078 <_vfiprintf_r+0x110>
 8008040:	06d1      	lsls	r1, r2, #27
 8008042:	bf44      	itt	mi
 8008044:	2320      	movmi	r3, #32
 8008046:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800804a:	0713      	lsls	r3, r2, #28
 800804c:	bf44      	itt	mi
 800804e:	232b      	movmi	r3, #43	@ 0x2b
 8008050:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008054:	f89a 3000 	ldrb.w	r3, [sl]
 8008058:	2b2a      	cmp	r3, #42	@ 0x2a
 800805a:	d015      	beq.n	8008088 <_vfiprintf_r+0x120>
 800805c:	4654      	mov	r4, sl
 800805e:	2000      	movs	r0, #0
 8008060:	f04f 0c0a 	mov.w	ip, #10
 8008064:	9a07      	ldr	r2, [sp, #28]
 8008066:	4621      	mov	r1, r4
 8008068:	f811 3b01 	ldrb.w	r3, [r1], #1
 800806c:	3b30      	subs	r3, #48	@ 0x30
 800806e:	2b09      	cmp	r3, #9
 8008070:	d94b      	bls.n	800810a <_vfiprintf_r+0x1a2>
 8008072:	b1b0      	cbz	r0, 80080a2 <_vfiprintf_r+0x13a>
 8008074:	9207      	str	r2, [sp, #28]
 8008076:	e014      	b.n	80080a2 <_vfiprintf_r+0x13a>
 8008078:	eba0 0308 	sub.w	r3, r0, r8
 800807c:	fa09 f303 	lsl.w	r3, r9, r3
 8008080:	4313      	orrs	r3, r2
 8008082:	46a2      	mov	sl, r4
 8008084:	9304      	str	r3, [sp, #16]
 8008086:	e7d2      	b.n	800802e <_vfiprintf_r+0xc6>
 8008088:	9b03      	ldr	r3, [sp, #12]
 800808a:	1d19      	adds	r1, r3, #4
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	9103      	str	r1, [sp, #12]
 8008090:	2b00      	cmp	r3, #0
 8008092:	bfbb      	ittet	lt
 8008094:	425b      	neglt	r3, r3
 8008096:	f042 0202 	orrlt.w	r2, r2, #2
 800809a:	9307      	strge	r3, [sp, #28]
 800809c:	9307      	strlt	r3, [sp, #28]
 800809e:	bfb8      	it	lt
 80080a0:	9204      	strlt	r2, [sp, #16]
 80080a2:	7823      	ldrb	r3, [r4, #0]
 80080a4:	2b2e      	cmp	r3, #46	@ 0x2e
 80080a6:	d10a      	bne.n	80080be <_vfiprintf_r+0x156>
 80080a8:	7863      	ldrb	r3, [r4, #1]
 80080aa:	2b2a      	cmp	r3, #42	@ 0x2a
 80080ac:	d132      	bne.n	8008114 <_vfiprintf_r+0x1ac>
 80080ae:	9b03      	ldr	r3, [sp, #12]
 80080b0:	3402      	adds	r4, #2
 80080b2:	1d1a      	adds	r2, r3, #4
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	9203      	str	r2, [sp, #12]
 80080b8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80080bc:	9305      	str	r3, [sp, #20]
 80080be:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8008188 <_vfiprintf_r+0x220>
 80080c2:	2203      	movs	r2, #3
 80080c4:	4650      	mov	r0, sl
 80080c6:	7821      	ldrb	r1, [r4, #0]
 80080c8:	f000 fb4c 	bl	8008764 <memchr>
 80080cc:	b138      	cbz	r0, 80080de <_vfiprintf_r+0x176>
 80080ce:	2240      	movs	r2, #64	@ 0x40
 80080d0:	9b04      	ldr	r3, [sp, #16]
 80080d2:	eba0 000a 	sub.w	r0, r0, sl
 80080d6:	4082      	lsls	r2, r0
 80080d8:	4313      	orrs	r3, r2
 80080da:	3401      	adds	r4, #1
 80080dc:	9304      	str	r3, [sp, #16]
 80080de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080e2:	2206      	movs	r2, #6
 80080e4:	4829      	ldr	r0, [pc, #164]	@ (800818c <_vfiprintf_r+0x224>)
 80080e6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80080ea:	f000 fb3b 	bl	8008764 <memchr>
 80080ee:	2800      	cmp	r0, #0
 80080f0:	d03f      	beq.n	8008172 <_vfiprintf_r+0x20a>
 80080f2:	4b27      	ldr	r3, [pc, #156]	@ (8008190 <_vfiprintf_r+0x228>)
 80080f4:	bb1b      	cbnz	r3, 800813e <_vfiprintf_r+0x1d6>
 80080f6:	9b03      	ldr	r3, [sp, #12]
 80080f8:	3307      	adds	r3, #7
 80080fa:	f023 0307 	bic.w	r3, r3, #7
 80080fe:	3308      	adds	r3, #8
 8008100:	9303      	str	r3, [sp, #12]
 8008102:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008104:	443b      	add	r3, r7
 8008106:	9309      	str	r3, [sp, #36]	@ 0x24
 8008108:	e76a      	b.n	8007fe0 <_vfiprintf_r+0x78>
 800810a:	460c      	mov	r4, r1
 800810c:	2001      	movs	r0, #1
 800810e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008112:	e7a8      	b.n	8008066 <_vfiprintf_r+0xfe>
 8008114:	2300      	movs	r3, #0
 8008116:	f04f 0c0a 	mov.w	ip, #10
 800811a:	4619      	mov	r1, r3
 800811c:	3401      	adds	r4, #1
 800811e:	9305      	str	r3, [sp, #20]
 8008120:	4620      	mov	r0, r4
 8008122:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008126:	3a30      	subs	r2, #48	@ 0x30
 8008128:	2a09      	cmp	r2, #9
 800812a:	d903      	bls.n	8008134 <_vfiprintf_r+0x1cc>
 800812c:	2b00      	cmp	r3, #0
 800812e:	d0c6      	beq.n	80080be <_vfiprintf_r+0x156>
 8008130:	9105      	str	r1, [sp, #20]
 8008132:	e7c4      	b.n	80080be <_vfiprintf_r+0x156>
 8008134:	4604      	mov	r4, r0
 8008136:	2301      	movs	r3, #1
 8008138:	fb0c 2101 	mla	r1, ip, r1, r2
 800813c:	e7f0      	b.n	8008120 <_vfiprintf_r+0x1b8>
 800813e:	ab03      	add	r3, sp, #12
 8008140:	9300      	str	r3, [sp, #0]
 8008142:	462a      	mov	r2, r5
 8008144:	4630      	mov	r0, r6
 8008146:	4b13      	ldr	r3, [pc, #76]	@ (8008194 <_vfiprintf_r+0x22c>)
 8008148:	a904      	add	r1, sp, #16
 800814a:	f3af 8000 	nop.w
 800814e:	4607      	mov	r7, r0
 8008150:	1c78      	adds	r0, r7, #1
 8008152:	d1d6      	bne.n	8008102 <_vfiprintf_r+0x19a>
 8008154:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008156:	07d9      	lsls	r1, r3, #31
 8008158:	d405      	bmi.n	8008166 <_vfiprintf_r+0x1fe>
 800815a:	89ab      	ldrh	r3, [r5, #12]
 800815c:	059a      	lsls	r2, r3, #22
 800815e:	d402      	bmi.n	8008166 <_vfiprintf_r+0x1fe>
 8008160:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008162:	f7ff fc89 	bl	8007a78 <__retarget_lock_release_recursive>
 8008166:	89ab      	ldrh	r3, [r5, #12]
 8008168:	065b      	lsls	r3, r3, #25
 800816a:	f53f af1f 	bmi.w	8007fac <_vfiprintf_r+0x44>
 800816e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008170:	e71e      	b.n	8007fb0 <_vfiprintf_r+0x48>
 8008172:	ab03      	add	r3, sp, #12
 8008174:	9300      	str	r3, [sp, #0]
 8008176:	462a      	mov	r2, r5
 8008178:	4630      	mov	r0, r6
 800817a:	4b06      	ldr	r3, [pc, #24]	@ (8008194 <_vfiprintf_r+0x22c>)
 800817c:	a904      	add	r1, sp, #16
 800817e:	f000 f87d 	bl	800827c <_printf_i>
 8008182:	e7e4      	b.n	800814e <_vfiprintf_r+0x1e6>
 8008184:	080089c2 	.word	0x080089c2
 8008188:	080089c8 	.word	0x080089c8
 800818c:	080089cc 	.word	0x080089cc
 8008190:	00000000 	.word	0x00000000
 8008194:	08007f43 	.word	0x08007f43

08008198 <_printf_common>:
 8008198:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800819c:	4616      	mov	r6, r2
 800819e:	4698      	mov	r8, r3
 80081a0:	688a      	ldr	r2, [r1, #8]
 80081a2:	690b      	ldr	r3, [r1, #16]
 80081a4:	4607      	mov	r7, r0
 80081a6:	4293      	cmp	r3, r2
 80081a8:	bfb8      	it	lt
 80081aa:	4613      	movlt	r3, r2
 80081ac:	6033      	str	r3, [r6, #0]
 80081ae:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80081b2:	460c      	mov	r4, r1
 80081b4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80081b8:	b10a      	cbz	r2, 80081be <_printf_common+0x26>
 80081ba:	3301      	adds	r3, #1
 80081bc:	6033      	str	r3, [r6, #0]
 80081be:	6823      	ldr	r3, [r4, #0]
 80081c0:	0699      	lsls	r1, r3, #26
 80081c2:	bf42      	ittt	mi
 80081c4:	6833      	ldrmi	r3, [r6, #0]
 80081c6:	3302      	addmi	r3, #2
 80081c8:	6033      	strmi	r3, [r6, #0]
 80081ca:	6825      	ldr	r5, [r4, #0]
 80081cc:	f015 0506 	ands.w	r5, r5, #6
 80081d0:	d106      	bne.n	80081e0 <_printf_common+0x48>
 80081d2:	f104 0a19 	add.w	sl, r4, #25
 80081d6:	68e3      	ldr	r3, [r4, #12]
 80081d8:	6832      	ldr	r2, [r6, #0]
 80081da:	1a9b      	subs	r3, r3, r2
 80081dc:	42ab      	cmp	r3, r5
 80081de:	dc2b      	bgt.n	8008238 <_printf_common+0xa0>
 80081e0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80081e4:	6822      	ldr	r2, [r4, #0]
 80081e6:	3b00      	subs	r3, #0
 80081e8:	bf18      	it	ne
 80081ea:	2301      	movne	r3, #1
 80081ec:	0692      	lsls	r2, r2, #26
 80081ee:	d430      	bmi.n	8008252 <_printf_common+0xba>
 80081f0:	4641      	mov	r1, r8
 80081f2:	4638      	mov	r0, r7
 80081f4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80081f8:	47c8      	blx	r9
 80081fa:	3001      	adds	r0, #1
 80081fc:	d023      	beq.n	8008246 <_printf_common+0xae>
 80081fe:	6823      	ldr	r3, [r4, #0]
 8008200:	6922      	ldr	r2, [r4, #16]
 8008202:	f003 0306 	and.w	r3, r3, #6
 8008206:	2b04      	cmp	r3, #4
 8008208:	bf14      	ite	ne
 800820a:	2500      	movne	r5, #0
 800820c:	6833      	ldreq	r3, [r6, #0]
 800820e:	f04f 0600 	mov.w	r6, #0
 8008212:	bf08      	it	eq
 8008214:	68e5      	ldreq	r5, [r4, #12]
 8008216:	f104 041a 	add.w	r4, r4, #26
 800821a:	bf08      	it	eq
 800821c:	1aed      	subeq	r5, r5, r3
 800821e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8008222:	bf08      	it	eq
 8008224:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008228:	4293      	cmp	r3, r2
 800822a:	bfc4      	itt	gt
 800822c:	1a9b      	subgt	r3, r3, r2
 800822e:	18ed      	addgt	r5, r5, r3
 8008230:	42b5      	cmp	r5, r6
 8008232:	d11a      	bne.n	800826a <_printf_common+0xd2>
 8008234:	2000      	movs	r0, #0
 8008236:	e008      	b.n	800824a <_printf_common+0xb2>
 8008238:	2301      	movs	r3, #1
 800823a:	4652      	mov	r2, sl
 800823c:	4641      	mov	r1, r8
 800823e:	4638      	mov	r0, r7
 8008240:	47c8      	blx	r9
 8008242:	3001      	adds	r0, #1
 8008244:	d103      	bne.n	800824e <_printf_common+0xb6>
 8008246:	f04f 30ff 	mov.w	r0, #4294967295
 800824a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800824e:	3501      	adds	r5, #1
 8008250:	e7c1      	b.n	80081d6 <_printf_common+0x3e>
 8008252:	2030      	movs	r0, #48	@ 0x30
 8008254:	18e1      	adds	r1, r4, r3
 8008256:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800825a:	1c5a      	adds	r2, r3, #1
 800825c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008260:	4422      	add	r2, r4
 8008262:	3302      	adds	r3, #2
 8008264:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008268:	e7c2      	b.n	80081f0 <_printf_common+0x58>
 800826a:	2301      	movs	r3, #1
 800826c:	4622      	mov	r2, r4
 800826e:	4641      	mov	r1, r8
 8008270:	4638      	mov	r0, r7
 8008272:	47c8      	blx	r9
 8008274:	3001      	adds	r0, #1
 8008276:	d0e6      	beq.n	8008246 <_printf_common+0xae>
 8008278:	3601      	adds	r6, #1
 800827a:	e7d9      	b.n	8008230 <_printf_common+0x98>

0800827c <_printf_i>:
 800827c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008280:	7e0f      	ldrb	r7, [r1, #24]
 8008282:	4691      	mov	r9, r2
 8008284:	2f78      	cmp	r7, #120	@ 0x78
 8008286:	4680      	mov	r8, r0
 8008288:	460c      	mov	r4, r1
 800828a:	469a      	mov	sl, r3
 800828c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800828e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008292:	d807      	bhi.n	80082a4 <_printf_i+0x28>
 8008294:	2f62      	cmp	r7, #98	@ 0x62
 8008296:	d80a      	bhi.n	80082ae <_printf_i+0x32>
 8008298:	2f00      	cmp	r7, #0
 800829a:	f000 80d1 	beq.w	8008440 <_printf_i+0x1c4>
 800829e:	2f58      	cmp	r7, #88	@ 0x58
 80082a0:	f000 80b8 	beq.w	8008414 <_printf_i+0x198>
 80082a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80082a8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80082ac:	e03a      	b.n	8008324 <_printf_i+0xa8>
 80082ae:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80082b2:	2b15      	cmp	r3, #21
 80082b4:	d8f6      	bhi.n	80082a4 <_printf_i+0x28>
 80082b6:	a101      	add	r1, pc, #4	@ (adr r1, 80082bc <_printf_i+0x40>)
 80082b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80082bc:	08008315 	.word	0x08008315
 80082c0:	08008329 	.word	0x08008329
 80082c4:	080082a5 	.word	0x080082a5
 80082c8:	080082a5 	.word	0x080082a5
 80082cc:	080082a5 	.word	0x080082a5
 80082d0:	080082a5 	.word	0x080082a5
 80082d4:	08008329 	.word	0x08008329
 80082d8:	080082a5 	.word	0x080082a5
 80082dc:	080082a5 	.word	0x080082a5
 80082e0:	080082a5 	.word	0x080082a5
 80082e4:	080082a5 	.word	0x080082a5
 80082e8:	08008427 	.word	0x08008427
 80082ec:	08008353 	.word	0x08008353
 80082f0:	080083e1 	.word	0x080083e1
 80082f4:	080082a5 	.word	0x080082a5
 80082f8:	080082a5 	.word	0x080082a5
 80082fc:	08008449 	.word	0x08008449
 8008300:	080082a5 	.word	0x080082a5
 8008304:	08008353 	.word	0x08008353
 8008308:	080082a5 	.word	0x080082a5
 800830c:	080082a5 	.word	0x080082a5
 8008310:	080083e9 	.word	0x080083e9
 8008314:	6833      	ldr	r3, [r6, #0]
 8008316:	1d1a      	adds	r2, r3, #4
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	6032      	str	r2, [r6, #0]
 800831c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008320:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008324:	2301      	movs	r3, #1
 8008326:	e09c      	b.n	8008462 <_printf_i+0x1e6>
 8008328:	6833      	ldr	r3, [r6, #0]
 800832a:	6820      	ldr	r0, [r4, #0]
 800832c:	1d19      	adds	r1, r3, #4
 800832e:	6031      	str	r1, [r6, #0]
 8008330:	0606      	lsls	r6, r0, #24
 8008332:	d501      	bpl.n	8008338 <_printf_i+0xbc>
 8008334:	681d      	ldr	r5, [r3, #0]
 8008336:	e003      	b.n	8008340 <_printf_i+0xc4>
 8008338:	0645      	lsls	r5, r0, #25
 800833a:	d5fb      	bpl.n	8008334 <_printf_i+0xb8>
 800833c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008340:	2d00      	cmp	r5, #0
 8008342:	da03      	bge.n	800834c <_printf_i+0xd0>
 8008344:	232d      	movs	r3, #45	@ 0x2d
 8008346:	426d      	negs	r5, r5
 8008348:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800834c:	230a      	movs	r3, #10
 800834e:	4858      	ldr	r0, [pc, #352]	@ (80084b0 <_printf_i+0x234>)
 8008350:	e011      	b.n	8008376 <_printf_i+0xfa>
 8008352:	6821      	ldr	r1, [r4, #0]
 8008354:	6833      	ldr	r3, [r6, #0]
 8008356:	0608      	lsls	r0, r1, #24
 8008358:	f853 5b04 	ldr.w	r5, [r3], #4
 800835c:	d402      	bmi.n	8008364 <_printf_i+0xe8>
 800835e:	0649      	lsls	r1, r1, #25
 8008360:	bf48      	it	mi
 8008362:	b2ad      	uxthmi	r5, r5
 8008364:	2f6f      	cmp	r7, #111	@ 0x6f
 8008366:	6033      	str	r3, [r6, #0]
 8008368:	bf14      	ite	ne
 800836a:	230a      	movne	r3, #10
 800836c:	2308      	moveq	r3, #8
 800836e:	4850      	ldr	r0, [pc, #320]	@ (80084b0 <_printf_i+0x234>)
 8008370:	2100      	movs	r1, #0
 8008372:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008376:	6866      	ldr	r6, [r4, #4]
 8008378:	2e00      	cmp	r6, #0
 800837a:	60a6      	str	r6, [r4, #8]
 800837c:	db05      	blt.n	800838a <_printf_i+0x10e>
 800837e:	6821      	ldr	r1, [r4, #0]
 8008380:	432e      	orrs	r6, r5
 8008382:	f021 0104 	bic.w	r1, r1, #4
 8008386:	6021      	str	r1, [r4, #0]
 8008388:	d04b      	beq.n	8008422 <_printf_i+0x1a6>
 800838a:	4616      	mov	r6, r2
 800838c:	fbb5 f1f3 	udiv	r1, r5, r3
 8008390:	fb03 5711 	mls	r7, r3, r1, r5
 8008394:	5dc7      	ldrb	r7, [r0, r7]
 8008396:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800839a:	462f      	mov	r7, r5
 800839c:	42bb      	cmp	r3, r7
 800839e:	460d      	mov	r5, r1
 80083a0:	d9f4      	bls.n	800838c <_printf_i+0x110>
 80083a2:	2b08      	cmp	r3, #8
 80083a4:	d10b      	bne.n	80083be <_printf_i+0x142>
 80083a6:	6823      	ldr	r3, [r4, #0]
 80083a8:	07df      	lsls	r7, r3, #31
 80083aa:	d508      	bpl.n	80083be <_printf_i+0x142>
 80083ac:	6923      	ldr	r3, [r4, #16]
 80083ae:	6861      	ldr	r1, [r4, #4]
 80083b0:	4299      	cmp	r1, r3
 80083b2:	bfde      	ittt	le
 80083b4:	2330      	movle	r3, #48	@ 0x30
 80083b6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80083ba:	f106 36ff 	addle.w	r6, r6, #4294967295
 80083be:	1b92      	subs	r2, r2, r6
 80083c0:	6122      	str	r2, [r4, #16]
 80083c2:	464b      	mov	r3, r9
 80083c4:	4621      	mov	r1, r4
 80083c6:	4640      	mov	r0, r8
 80083c8:	f8cd a000 	str.w	sl, [sp]
 80083cc:	aa03      	add	r2, sp, #12
 80083ce:	f7ff fee3 	bl	8008198 <_printf_common>
 80083d2:	3001      	adds	r0, #1
 80083d4:	d14a      	bne.n	800846c <_printf_i+0x1f0>
 80083d6:	f04f 30ff 	mov.w	r0, #4294967295
 80083da:	b004      	add	sp, #16
 80083dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083e0:	6823      	ldr	r3, [r4, #0]
 80083e2:	f043 0320 	orr.w	r3, r3, #32
 80083e6:	6023      	str	r3, [r4, #0]
 80083e8:	2778      	movs	r7, #120	@ 0x78
 80083ea:	4832      	ldr	r0, [pc, #200]	@ (80084b4 <_printf_i+0x238>)
 80083ec:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80083f0:	6823      	ldr	r3, [r4, #0]
 80083f2:	6831      	ldr	r1, [r6, #0]
 80083f4:	061f      	lsls	r7, r3, #24
 80083f6:	f851 5b04 	ldr.w	r5, [r1], #4
 80083fa:	d402      	bmi.n	8008402 <_printf_i+0x186>
 80083fc:	065f      	lsls	r7, r3, #25
 80083fe:	bf48      	it	mi
 8008400:	b2ad      	uxthmi	r5, r5
 8008402:	6031      	str	r1, [r6, #0]
 8008404:	07d9      	lsls	r1, r3, #31
 8008406:	bf44      	itt	mi
 8008408:	f043 0320 	orrmi.w	r3, r3, #32
 800840c:	6023      	strmi	r3, [r4, #0]
 800840e:	b11d      	cbz	r5, 8008418 <_printf_i+0x19c>
 8008410:	2310      	movs	r3, #16
 8008412:	e7ad      	b.n	8008370 <_printf_i+0xf4>
 8008414:	4826      	ldr	r0, [pc, #152]	@ (80084b0 <_printf_i+0x234>)
 8008416:	e7e9      	b.n	80083ec <_printf_i+0x170>
 8008418:	6823      	ldr	r3, [r4, #0]
 800841a:	f023 0320 	bic.w	r3, r3, #32
 800841e:	6023      	str	r3, [r4, #0]
 8008420:	e7f6      	b.n	8008410 <_printf_i+0x194>
 8008422:	4616      	mov	r6, r2
 8008424:	e7bd      	b.n	80083a2 <_printf_i+0x126>
 8008426:	6833      	ldr	r3, [r6, #0]
 8008428:	6825      	ldr	r5, [r4, #0]
 800842a:	1d18      	adds	r0, r3, #4
 800842c:	6961      	ldr	r1, [r4, #20]
 800842e:	6030      	str	r0, [r6, #0]
 8008430:	062e      	lsls	r6, r5, #24
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	d501      	bpl.n	800843a <_printf_i+0x1be>
 8008436:	6019      	str	r1, [r3, #0]
 8008438:	e002      	b.n	8008440 <_printf_i+0x1c4>
 800843a:	0668      	lsls	r0, r5, #25
 800843c:	d5fb      	bpl.n	8008436 <_printf_i+0x1ba>
 800843e:	8019      	strh	r1, [r3, #0]
 8008440:	2300      	movs	r3, #0
 8008442:	4616      	mov	r6, r2
 8008444:	6123      	str	r3, [r4, #16]
 8008446:	e7bc      	b.n	80083c2 <_printf_i+0x146>
 8008448:	6833      	ldr	r3, [r6, #0]
 800844a:	2100      	movs	r1, #0
 800844c:	1d1a      	adds	r2, r3, #4
 800844e:	6032      	str	r2, [r6, #0]
 8008450:	681e      	ldr	r6, [r3, #0]
 8008452:	6862      	ldr	r2, [r4, #4]
 8008454:	4630      	mov	r0, r6
 8008456:	f000 f985 	bl	8008764 <memchr>
 800845a:	b108      	cbz	r0, 8008460 <_printf_i+0x1e4>
 800845c:	1b80      	subs	r0, r0, r6
 800845e:	6060      	str	r0, [r4, #4]
 8008460:	6863      	ldr	r3, [r4, #4]
 8008462:	6123      	str	r3, [r4, #16]
 8008464:	2300      	movs	r3, #0
 8008466:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800846a:	e7aa      	b.n	80083c2 <_printf_i+0x146>
 800846c:	4632      	mov	r2, r6
 800846e:	4649      	mov	r1, r9
 8008470:	4640      	mov	r0, r8
 8008472:	6923      	ldr	r3, [r4, #16]
 8008474:	47d0      	blx	sl
 8008476:	3001      	adds	r0, #1
 8008478:	d0ad      	beq.n	80083d6 <_printf_i+0x15a>
 800847a:	6823      	ldr	r3, [r4, #0]
 800847c:	079b      	lsls	r3, r3, #30
 800847e:	d413      	bmi.n	80084a8 <_printf_i+0x22c>
 8008480:	68e0      	ldr	r0, [r4, #12]
 8008482:	9b03      	ldr	r3, [sp, #12]
 8008484:	4298      	cmp	r0, r3
 8008486:	bfb8      	it	lt
 8008488:	4618      	movlt	r0, r3
 800848a:	e7a6      	b.n	80083da <_printf_i+0x15e>
 800848c:	2301      	movs	r3, #1
 800848e:	4632      	mov	r2, r6
 8008490:	4649      	mov	r1, r9
 8008492:	4640      	mov	r0, r8
 8008494:	47d0      	blx	sl
 8008496:	3001      	adds	r0, #1
 8008498:	d09d      	beq.n	80083d6 <_printf_i+0x15a>
 800849a:	3501      	adds	r5, #1
 800849c:	68e3      	ldr	r3, [r4, #12]
 800849e:	9903      	ldr	r1, [sp, #12]
 80084a0:	1a5b      	subs	r3, r3, r1
 80084a2:	42ab      	cmp	r3, r5
 80084a4:	dcf2      	bgt.n	800848c <_printf_i+0x210>
 80084a6:	e7eb      	b.n	8008480 <_printf_i+0x204>
 80084a8:	2500      	movs	r5, #0
 80084aa:	f104 0619 	add.w	r6, r4, #25
 80084ae:	e7f5      	b.n	800849c <_printf_i+0x220>
 80084b0:	080089d3 	.word	0x080089d3
 80084b4:	080089e4 	.word	0x080089e4

080084b8 <__sflush_r>:
 80084b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80084bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084be:	0716      	lsls	r6, r2, #28
 80084c0:	4605      	mov	r5, r0
 80084c2:	460c      	mov	r4, r1
 80084c4:	d454      	bmi.n	8008570 <__sflush_r+0xb8>
 80084c6:	684b      	ldr	r3, [r1, #4]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	dc02      	bgt.n	80084d2 <__sflush_r+0x1a>
 80084cc:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	dd48      	ble.n	8008564 <__sflush_r+0xac>
 80084d2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80084d4:	2e00      	cmp	r6, #0
 80084d6:	d045      	beq.n	8008564 <__sflush_r+0xac>
 80084d8:	2300      	movs	r3, #0
 80084da:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80084de:	682f      	ldr	r7, [r5, #0]
 80084e0:	6a21      	ldr	r1, [r4, #32]
 80084e2:	602b      	str	r3, [r5, #0]
 80084e4:	d030      	beq.n	8008548 <__sflush_r+0x90>
 80084e6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80084e8:	89a3      	ldrh	r3, [r4, #12]
 80084ea:	0759      	lsls	r1, r3, #29
 80084ec:	d505      	bpl.n	80084fa <__sflush_r+0x42>
 80084ee:	6863      	ldr	r3, [r4, #4]
 80084f0:	1ad2      	subs	r2, r2, r3
 80084f2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80084f4:	b10b      	cbz	r3, 80084fa <__sflush_r+0x42>
 80084f6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80084f8:	1ad2      	subs	r2, r2, r3
 80084fa:	2300      	movs	r3, #0
 80084fc:	4628      	mov	r0, r5
 80084fe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008500:	6a21      	ldr	r1, [r4, #32]
 8008502:	47b0      	blx	r6
 8008504:	1c43      	adds	r3, r0, #1
 8008506:	89a3      	ldrh	r3, [r4, #12]
 8008508:	d106      	bne.n	8008518 <__sflush_r+0x60>
 800850a:	6829      	ldr	r1, [r5, #0]
 800850c:	291d      	cmp	r1, #29
 800850e:	d82b      	bhi.n	8008568 <__sflush_r+0xb0>
 8008510:	4a28      	ldr	r2, [pc, #160]	@ (80085b4 <__sflush_r+0xfc>)
 8008512:	40ca      	lsrs	r2, r1
 8008514:	07d6      	lsls	r6, r2, #31
 8008516:	d527      	bpl.n	8008568 <__sflush_r+0xb0>
 8008518:	2200      	movs	r2, #0
 800851a:	6062      	str	r2, [r4, #4]
 800851c:	6922      	ldr	r2, [r4, #16]
 800851e:	04d9      	lsls	r1, r3, #19
 8008520:	6022      	str	r2, [r4, #0]
 8008522:	d504      	bpl.n	800852e <__sflush_r+0x76>
 8008524:	1c42      	adds	r2, r0, #1
 8008526:	d101      	bne.n	800852c <__sflush_r+0x74>
 8008528:	682b      	ldr	r3, [r5, #0]
 800852a:	b903      	cbnz	r3, 800852e <__sflush_r+0x76>
 800852c:	6560      	str	r0, [r4, #84]	@ 0x54
 800852e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008530:	602f      	str	r7, [r5, #0]
 8008532:	b1b9      	cbz	r1, 8008564 <__sflush_r+0xac>
 8008534:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008538:	4299      	cmp	r1, r3
 800853a:	d002      	beq.n	8008542 <__sflush_r+0x8a>
 800853c:	4628      	mov	r0, r5
 800853e:	f7ff fa9d 	bl	8007a7c <_free_r>
 8008542:	2300      	movs	r3, #0
 8008544:	6363      	str	r3, [r4, #52]	@ 0x34
 8008546:	e00d      	b.n	8008564 <__sflush_r+0xac>
 8008548:	2301      	movs	r3, #1
 800854a:	4628      	mov	r0, r5
 800854c:	47b0      	blx	r6
 800854e:	4602      	mov	r2, r0
 8008550:	1c50      	adds	r0, r2, #1
 8008552:	d1c9      	bne.n	80084e8 <__sflush_r+0x30>
 8008554:	682b      	ldr	r3, [r5, #0]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d0c6      	beq.n	80084e8 <__sflush_r+0x30>
 800855a:	2b1d      	cmp	r3, #29
 800855c:	d001      	beq.n	8008562 <__sflush_r+0xaa>
 800855e:	2b16      	cmp	r3, #22
 8008560:	d11d      	bne.n	800859e <__sflush_r+0xe6>
 8008562:	602f      	str	r7, [r5, #0]
 8008564:	2000      	movs	r0, #0
 8008566:	e021      	b.n	80085ac <__sflush_r+0xf4>
 8008568:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800856c:	b21b      	sxth	r3, r3
 800856e:	e01a      	b.n	80085a6 <__sflush_r+0xee>
 8008570:	690f      	ldr	r7, [r1, #16]
 8008572:	2f00      	cmp	r7, #0
 8008574:	d0f6      	beq.n	8008564 <__sflush_r+0xac>
 8008576:	0793      	lsls	r3, r2, #30
 8008578:	bf18      	it	ne
 800857a:	2300      	movne	r3, #0
 800857c:	680e      	ldr	r6, [r1, #0]
 800857e:	bf08      	it	eq
 8008580:	694b      	ldreq	r3, [r1, #20]
 8008582:	1bf6      	subs	r6, r6, r7
 8008584:	600f      	str	r7, [r1, #0]
 8008586:	608b      	str	r3, [r1, #8]
 8008588:	2e00      	cmp	r6, #0
 800858a:	ddeb      	ble.n	8008564 <__sflush_r+0xac>
 800858c:	4633      	mov	r3, r6
 800858e:	463a      	mov	r2, r7
 8008590:	4628      	mov	r0, r5
 8008592:	6a21      	ldr	r1, [r4, #32]
 8008594:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8008598:	47e0      	blx	ip
 800859a:	2800      	cmp	r0, #0
 800859c:	dc07      	bgt.n	80085ae <__sflush_r+0xf6>
 800859e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80085a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80085a6:	f04f 30ff 	mov.w	r0, #4294967295
 80085aa:	81a3      	strh	r3, [r4, #12]
 80085ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80085ae:	4407      	add	r7, r0
 80085b0:	1a36      	subs	r6, r6, r0
 80085b2:	e7e9      	b.n	8008588 <__sflush_r+0xd0>
 80085b4:	20400001 	.word	0x20400001

080085b8 <_fflush_r>:
 80085b8:	b538      	push	{r3, r4, r5, lr}
 80085ba:	690b      	ldr	r3, [r1, #16]
 80085bc:	4605      	mov	r5, r0
 80085be:	460c      	mov	r4, r1
 80085c0:	b913      	cbnz	r3, 80085c8 <_fflush_r+0x10>
 80085c2:	2500      	movs	r5, #0
 80085c4:	4628      	mov	r0, r5
 80085c6:	bd38      	pop	{r3, r4, r5, pc}
 80085c8:	b118      	cbz	r0, 80085d2 <_fflush_r+0x1a>
 80085ca:	6a03      	ldr	r3, [r0, #32]
 80085cc:	b90b      	cbnz	r3, 80085d2 <_fflush_r+0x1a>
 80085ce:	f7ff f825 	bl	800761c <__sinit>
 80085d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d0f3      	beq.n	80085c2 <_fflush_r+0xa>
 80085da:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80085dc:	07d0      	lsls	r0, r2, #31
 80085de:	d404      	bmi.n	80085ea <_fflush_r+0x32>
 80085e0:	0599      	lsls	r1, r3, #22
 80085e2:	d402      	bmi.n	80085ea <_fflush_r+0x32>
 80085e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80085e6:	f7ff fa46 	bl	8007a76 <__retarget_lock_acquire_recursive>
 80085ea:	4628      	mov	r0, r5
 80085ec:	4621      	mov	r1, r4
 80085ee:	f7ff ff63 	bl	80084b8 <__sflush_r>
 80085f2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80085f4:	4605      	mov	r5, r0
 80085f6:	07da      	lsls	r2, r3, #31
 80085f8:	d4e4      	bmi.n	80085c4 <_fflush_r+0xc>
 80085fa:	89a3      	ldrh	r3, [r4, #12]
 80085fc:	059b      	lsls	r3, r3, #22
 80085fe:	d4e1      	bmi.n	80085c4 <_fflush_r+0xc>
 8008600:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008602:	f7ff fa39 	bl	8007a78 <__retarget_lock_release_recursive>
 8008606:	e7dd      	b.n	80085c4 <_fflush_r+0xc>

08008608 <__swhatbuf_r>:
 8008608:	b570      	push	{r4, r5, r6, lr}
 800860a:	460c      	mov	r4, r1
 800860c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008610:	4615      	mov	r5, r2
 8008612:	2900      	cmp	r1, #0
 8008614:	461e      	mov	r6, r3
 8008616:	b096      	sub	sp, #88	@ 0x58
 8008618:	da0c      	bge.n	8008634 <__swhatbuf_r+0x2c>
 800861a:	89a3      	ldrh	r3, [r4, #12]
 800861c:	2100      	movs	r1, #0
 800861e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008622:	bf14      	ite	ne
 8008624:	2340      	movne	r3, #64	@ 0x40
 8008626:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800862a:	2000      	movs	r0, #0
 800862c:	6031      	str	r1, [r6, #0]
 800862e:	602b      	str	r3, [r5, #0]
 8008630:	b016      	add	sp, #88	@ 0x58
 8008632:	bd70      	pop	{r4, r5, r6, pc}
 8008634:	466a      	mov	r2, sp
 8008636:	f000 f863 	bl	8008700 <_fstat_r>
 800863a:	2800      	cmp	r0, #0
 800863c:	dbed      	blt.n	800861a <__swhatbuf_r+0x12>
 800863e:	9901      	ldr	r1, [sp, #4]
 8008640:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008644:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008648:	4259      	negs	r1, r3
 800864a:	4159      	adcs	r1, r3
 800864c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008650:	e7eb      	b.n	800862a <__swhatbuf_r+0x22>

08008652 <__smakebuf_r>:
 8008652:	898b      	ldrh	r3, [r1, #12]
 8008654:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008656:	079d      	lsls	r5, r3, #30
 8008658:	4606      	mov	r6, r0
 800865a:	460c      	mov	r4, r1
 800865c:	d507      	bpl.n	800866e <__smakebuf_r+0x1c>
 800865e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008662:	6023      	str	r3, [r4, #0]
 8008664:	6123      	str	r3, [r4, #16]
 8008666:	2301      	movs	r3, #1
 8008668:	6163      	str	r3, [r4, #20]
 800866a:	b003      	add	sp, #12
 800866c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800866e:	466a      	mov	r2, sp
 8008670:	ab01      	add	r3, sp, #4
 8008672:	f7ff ffc9 	bl	8008608 <__swhatbuf_r>
 8008676:	9f00      	ldr	r7, [sp, #0]
 8008678:	4605      	mov	r5, r0
 800867a:	4639      	mov	r1, r7
 800867c:	4630      	mov	r0, r6
 800867e:	f7ff fa67 	bl	8007b50 <_malloc_r>
 8008682:	b948      	cbnz	r0, 8008698 <__smakebuf_r+0x46>
 8008684:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008688:	059a      	lsls	r2, r3, #22
 800868a:	d4ee      	bmi.n	800866a <__smakebuf_r+0x18>
 800868c:	f023 0303 	bic.w	r3, r3, #3
 8008690:	f043 0302 	orr.w	r3, r3, #2
 8008694:	81a3      	strh	r3, [r4, #12]
 8008696:	e7e2      	b.n	800865e <__smakebuf_r+0xc>
 8008698:	89a3      	ldrh	r3, [r4, #12]
 800869a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800869e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80086a2:	81a3      	strh	r3, [r4, #12]
 80086a4:	9b01      	ldr	r3, [sp, #4]
 80086a6:	6020      	str	r0, [r4, #0]
 80086a8:	b15b      	cbz	r3, 80086c2 <__smakebuf_r+0x70>
 80086aa:	4630      	mov	r0, r6
 80086ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80086b0:	f000 f838 	bl	8008724 <_isatty_r>
 80086b4:	b128      	cbz	r0, 80086c2 <__smakebuf_r+0x70>
 80086b6:	89a3      	ldrh	r3, [r4, #12]
 80086b8:	f023 0303 	bic.w	r3, r3, #3
 80086bc:	f043 0301 	orr.w	r3, r3, #1
 80086c0:	81a3      	strh	r3, [r4, #12]
 80086c2:	89a3      	ldrh	r3, [r4, #12]
 80086c4:	431d      	orrs	r5, r3
 80086c6:	81a5      	strh	r5, [r4, #12]
 80086c8:	e7cf      	b.n	800866a <__smakebuf_r+0x18>

080086ca <memmove>:
 80086ca:	4288      	cmp	r0, r1
 80086cc:	b510      	push	{r4, lr}
 80086ce:	eb01 0402 	add.w	r4, r1, r2
 80086d2:	d902      	bls.n	80086da <memmove+0x10>
 80086d4:	4284      	cmp	r4, r0
 80086d6:	4623      	mov	r3, r4
 80086d8:	d807      	bhi.n	80086ea <memmove+0x20>
 80086da:	1e43      	subs	r3, r0, #1
 80086dc:	42a1      	cmp	r1, r4
 80086de:	d008      	beq.n	80086f2 <memmove+0x28>
 80086e0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80086e4:	f803 2f01 	strb.w	r2, [r3, #1]!
 80086e8:	e7f8      	b.n	80086dc <memmove+0x12>
 80086ea:	4601      	mov	r1, r0
 80086ec:	4402      	add	r2, r0
 80086ee:	428a      	cmp	r2, r1
 80086f0:	d100      	bne.n	80086f4 <memmove+0x2a>
 80086f2:	bd10      	pop	{r4, pc}
 80086f4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80086f8:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80086fc:	e7f7      	b.n	80086ee <memmove+0x24>
	...

08008700 <_fstat_r>:
 8008700:	b538      	push	{r3, r4, r5, lr}
 8008702:	2300      	movs	r3, #0
 8008704:	4d06      	ldr	r5, [pc, #24]	@ (8008720 <_fstat_r+0x20>)
 8008706:	4604      	mov	r4, r0
 8008708:	4608      	mov	r0, r1
 800870a:	4611      	mov	r1, r2
 800870c:	602b      	str	r3, [r5, #0]
 800870e:	f7f9 fb89 	bl	8001e24 <_fstat>
 8008712:	1c43      	adds	r3, r0, #1
 8008714:	d102      	bne.n	800871c <_fstat_r+0x1c>
 8008716:	682b      	ldr	r3, [r5, #0]
 8008718:	b103      	cbz	r3, 800871c <_fstat_r+0x1c>
 800871a:	6023      	str	r3, [r4, #0]
 800871c:	bd38      	pop	{r3, r4, r5, pc}
 800871e:	bf00      	nop
 8008720:	200002f8 	.word	0x200002f8

08008724 <_isatty_r>:
 8008724:	b538      	push	{r3, r4, r5, lr}
 8008726:	2300      	movs	r3, #0
 8008728:	4d05      	ldr	r5, [pc, #20]	@ (8008740 <_isatty_r+0x1c>)
 800872a:	4604      	mov	r4, r0
 800872c:	4608      	mov	r0, r1
 800872e:	602b      	str	r3, [r5, #0]
 8008730:	f7f9 fb87 	bl	8001e42 <_isatty>
 8008734:	1c43      	adds	r3, r0, #1
 8008736:	d102      	bne.n	800873e <_isatty_r+0x1a>
 8008738:	682b      	ldr	r3, [r5, #0]
 800873a:	b103      	cbz	r3, 800873e <_isatty_r+0x1a>
 800873c:	6023      	str	r3, [r4, #0]
 800873e:	bd38      	pop	{r3, r4, r5, pc}
 8008740:	200002f8 	.word	0x200002f8

08008744 <_sbrk_r>:
 8008744:	b538      	push	{r3, r4, r5, lr}
 8008746:	2300      	movs	r3, #0
 8008748:	4d05      	ldr	r5, [pc, #20]	@ (8008760 <_sbrk_r+0x1c>)
 800874a:	4604      	mov	r4, r0
 800874c:	4608      	mov	r0, r1
 800874e:	602b      	str	r3, [r5, #0]
 8008750:	f7f9 fb8e 	bl	8001e70 <_sbrk>
 8008754:	1c43      	adds	r3, r0, #1
 8008756:	d102      	bne.n	800875e <_sbrk_r+0x1a>
 8008758:	682b      	ldr	r3, [r5, #0]
 800875a:	b103      	cbz	r3, 800875e <_sbrk_r+0x1a>
 800875c:	6023      	str	r3, [r4, #0]
 800875e:	bd38      	pop	{r3, r4, r5, pc}
 8008760:	200002f8 	.word	0x200002f8

08008764 <memchr>:
 8008764:	4603      	mov	r3, r0
 8008766:	b510      	push	{r4, lr}
 8008768:	b2c9      	uxtb	r1, r1
 800876a:	4402      	add	r2, r0
 800876c:	4293      	cmp	r3, r2
 800876e:	4618      	mov	r0, r3
 8008770:	d101      	bne.n	8008776 <memchr+0x12>
 8008772:	2000      	movs	r0, #0
 8008774:	e003      	b.n	800877e <memchr+0x1a>
 8008776:	7804      	ldrb	r4, [r0, #0]
 8008778:	3301      	adds	r3, #1
 800877a:	428c      	cmp	r4, r1
 800877c:	d1f6      	bne.n	800876c <memchr+0x8>
 800877e:	bd10      	pop	{r4, pc}

08008780 <memcpy>:
 8008780:	440a      	add	r2, r1
 8008782:	4291      	cmp	r1, r2
 8008784:	f100 33ff 	add.w	r3, r0, #4294967295
 8008788:	d100      	bne.n	800878c <memcpy+0xc>
 800878a:	4770      	bx	lr
 800878c:	b510      	push	{r4, lr}
 800878e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008792:	4291      	cmp	r1, r2
 8008794:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008798:	d1f9      	bne.n	800878e <memcpy+0xe>
 800879a:	bd10      	pop	{r4, pc}

0800879c <_realloc_r>:
 800879c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087a0:	4607      	mov	r7, r0
 80087a2:	4614      	mov	r4, r2
 80087a4:	460d      	mov	r5, r1
 80087a6:	b921      	cbnz	r1, 80087b2 <_realloc_r+0x16>
 80087a8:	4611      	mov	r1, r2
 80087aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80087ae:	f7ff b9cf 	b.w	8007b50 <_malloc_r>
 80087b2:	b92a      	cbnz	r2, 80087c0 <_realloc_r+0x24>
 80087b4:	f7ff f962 	bl	8007a7c <_free_r>
 80087b8:	4625      	mov	r5, r4
 80087ba:	4628      	mov	r0, r5
 80087bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087c0:	f000 f81a 	bl	80087f8 <_malloc_usable_size_r>
 80087c4:	4284      	cmp	r4, r0
 80087c6:	4606      	mov	r6, r0
 80087c8:	d802      	bhi.n	80087d0 <_realloc_r+0x34>
 80087ca:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80087ce:	d8f4      	bhi.n	80087ba <_realloc_r+0x1e>
 80087d0:	4621      	mov	r1, r4
 80087d2:	4638      	mov	r0, r7
 80087d4:	f7ff f9bc 	bl	8007b50 <_malloc_r>
 80087d8:	4680      	mov	r8, r0
 80087da:	b908      	cbnz	r0, 80087e0 <_realloc_r+0x44>
 80087dc:	4645      	mov	r5, r8
 80087de:	e7ec      	b.n	80087ba <_realloc_r+0x1e>
 80087e0:	42b4      	cmp	r4, r6
 80087e2:	4622      	mov	r2, r4
 80087e4:	4629      	mov	r1, r5
 80087e6:	bf28      	it	cs
 80087e8:	4632      	movcs	r2, r6
 80087ea:	f7ff ffc9 	bl	8008780 <memcpy>
 80087ee:	4629      	mov	r1, r5
 80087f0:	4638      	mov	r0, r7
 80087f2:	f7ff f943 	bl	8007a7c <_free_r>
 80087f6:	e7f1      	b.n	80087dc <_realloc_r+0x40>

080087f8 <_malloc_usable_size_r>:
 80087f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80087fc:	1f18      	subs	r0, r3, #4
 80087fe:	2b00      	cmp	r3, #0
 8008800:	bfbc      	itt	lt
 8008802:	580b      	ldrlt	r3, [r1, r0]
 8008804:	18c0      	addlt	r0, r0, r3
 8008806:	4770      	bx	lr

08008808 <_init>:
 8008808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800880a:	bf00      	nop
 800880c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800880e:	bc08      	pop	{r3}
 8008810:	469e      	mov	lr, r3
 8008812:	4770      	bx	lr

08008814 <_fini>:
 8008814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008816:	bf00      	nop
 8008818:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800881a:	bc08      	pop	{r3}
 800881c:	469e      	mov	lr, r3
 800881e:	4770      	bx	lr
