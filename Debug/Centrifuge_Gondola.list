
Centrifuge_Gondola.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006220  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  08006330  08006330  00007330  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006440  08006440  00008068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08006440  08006440  00008068  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08006440  08006440  00008068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006440  08006440  00007440  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006444  08006444  00007444  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08006448  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000029c  20000068  080064b0  00008068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000304  080064b0  00008304  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00008068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000da48  00000000  00000000  00008091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002888  00000000  00000000  00015ad9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000de0  00000000  00000000  00018368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ab0  00000000  00000000  00019148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018fa5  00000000  00000000  00019bf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001183a  00000000  00000000  00032b9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088e99  00000000  00000000  000443d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cd270  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004104  00000000  00000000  000cd2b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  000d13b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000068 	.word	0x20000068
 800012c:	00000000 	.word	0x00000000
 8000130:	08006318 	.word	0x08006318

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000006c 	.word	0x2000006c
 800014c:	08006318 	.word	0x08006318

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	@ 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_d2f>:
 80004c8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80004cc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80004d0:	bf24      	itt	cs
 80004d2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80004d6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80004da:	d90d      	bls.n	80004f8 <__aeabi_d2f+0x30>
 80004dc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80004e0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80004e4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80004e8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80004ec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80004f0:	bf08      	it	eq
 80004f2:	f020 0001 	biceq.w	r0, r0, #1
 80004f6:	4770      	bx	lr
 80004f8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80004fc:	d121      	bne.n	8000542 <__aeabi_d2f+0x7a>
 80004fe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000502:	bfbc      	itt	lt
 8000504:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000508:	4770      	bxlt	lr
 800050a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800050e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000512:	f1c2 0218 	rsb	r2, r2, #24
 8000516:	f1c2 0c20 	rsb	ip, r2, #32
 800051a:	fa10 f30c 	lsls.w	r3, r0, ip
 800051e:	fa20 f002 	lsr.w	r0, r0, r2
 8000522:	bf18      	it	ne
 8000524:	f040 0001 	orrne.w	r0, r0, #1
 8000528:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800052c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000530:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000534:	ea40 000c 	orr.w	r0, r0, ip
 8000538:	fa23 f302 	lsr.w	r3, r3, r2
 800053c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000540:	e7cc      	b.n	80004dc <__aeabi_d2f+0x14>
 8000542:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000546:	d107      	bne.n	8000558 <__aeabi_d2f+0x90>
 8000548:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800054c:	bf1e      	ittt	ne
 800054e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000552:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000556:	4770      	bxne	lr
 8000558:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 800055c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000560:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <__aeabi_frsub>:
 8000568:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 800056c:	e002      	b.n	8000574 <__addsf3>
 800056e:	bf00      	nop

08000570 <__aeabi_fsub>:
 8000570:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000574 <__addsf3>:
 8000574:	0042      	lsls	r2, r0, #1
 8000576:	bf1f      	itttt	ne
 8000578:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800057c:	ea92 0f03 	teqne	r2, r3
 8000580:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000584:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000588:	d06a      	beq.n	8000660 <__addsf3+0xec>
 800058a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800058e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000592:	bfc1      	itttt	gt
 8000594:	18d2      	addgt	r2, r2, r3
 8000596:	4041      	eorgt	r1, r0
 8000598:	4048      	eorgt	r0, r1
 800059a:	4041      	eorgt	r1, r0
 800059c:	bfb8      	it	lt
 800059e:	425b      	neglt	r3, r3
 80005a0:	2b19      	cmp	r3, #25
 80005a2:	bf88      	it	hi
 80005a4:	4770      	bxhi	lr
 80005a6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80005aa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80005ae:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80005b2:	bf18      	it	ne
 80005b4:	4240      	negne	r0, r0
 80005b6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80005ba:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80005be:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80005c2:	bf18      	it	ne
 80005c4:	4249      	negne	r1, r1
 80005c6:	ea92 0f03 	teq	r2, r3
 80005ca:	d03f      	beq.n	800064c <__addsf3+0xd8>
 80005cc:	f1a2 0201 	sub.w	r2, r2, #1
 80005d0:	fa41 fc03 	asr.w	ip, r1, r3
 80005d4:	eb10 000c 	adds.w	r0, r0, ip
 80005d8:	f1c3 0320 	rsb	r3, r3, #32
 80005dc:	fa01 f103 	lsl.w	r1, r1, r3
 80005e0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80005e4:	d502      	bpl.n	80005ec <__addsf3+0x78>
 80005e6:	4249      	negs	r1, r1
 80005e8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80005ec:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80005f0:	d313      	bcc.n	800061a <__addsf3+0xa6>
 80005f2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80005f6:	d306      	bcc.n	8000606 <__addsf3+0x92>
 80005f8:	0840      	lsrs	r0, r0, #1
 80005fa:	ea4f 0131 	mov.w	r1, r1, rrx
 80005fe:	f102 0201 	add.w	r2, r2, #1
 8000602:	2afe      	cmp	r2, #254	@ 0xfe
 8000604:	d251      	bcs.n	80006aa <__addsf3+0x136>
 8000606:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 800060a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800060e:	bf08      	it	eq
 8000610:	f020 0001 	biceq.w	r0, r0, #1
 8000614:	ea40 0003 	orr.w	r0, r0, r3
 8000618:	4770      	bx	lr
 800061a:	0049      	lsls	r1, r1, #1
 800061c:	eb40 0000 	adc.w	r0, r0, r0
 8000620:	3a01      	subs	r2, #1
 8000622:	bf28      	it	cs
 8000624:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000628:	d2ed      	bcs.n	8000606 <__addsf3+0x92>
 800062a:	fab0 fc80 	clz	ip, r0
 800062e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000632:	ebb2 020c 	subs.w	r2, r2, ip
 8000636:	fa00 f00c 	lsl.w	r0, r0, ip
 800063a:	bfaa      	itet	ge
 800063c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000640:	4252      	neglt	r2, r2
 8000642:	4318      	orrge	r0, r3
 8000644:	bfbc      	itt	lt
 8000646:	40d0      	lsrlt	r0, r2
 8000648:	4318      	orrlt	r0, r3
 800064a:	4770      	bx	lr
 800064c:	f092 0f00 	teq	r2, #0
 8000650:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000654:	bf06      	itte	eq
 8000656:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 800065a:	3201      	addeq	r2, #1
 800065c:	3b01      	subne	r3, #1
 800065e:	e7b5      	b.n	80005cc <__addsf3+0x58>
 8000660:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000664:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000668:	bf18      	it	ne
 800066a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800066e:	d021      	beq.n	80006b4 <__addsf3+0x140>
 8000670:	ea92 0f03 	teq	r2, r3
 8000674:	d004      	beq.n	8000680 <__addsf3+0x10c>
 8000676:	f092 0f00 	teq	r2, #0
 800067a:	bf08      	it	eq
 800067c:	4608      	moveq	r0, r1
 800067e:	4770      	bx	lr
 8000680:	ea90 0f01 	teq	r0, r1
 8000684:	bf1c      	itt	ne
 8000686:	2000      	movne	r0, #0
 8000688:	4770      	bxne	lr
 800068a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 800068e:	d104      	bne.n	800069a <__addsf3+0x126>
 8000690:	0040      	lsls	r0, r0, #1
 8000692:	bf28      	it	cs
 8000694:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000698:	4770      	bx	lr
 800069a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 800069e:	bf3c      	itt	cc
 80006a0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 80006a4:	4770      	bxcc	lr
 80006a6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80006aa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 80006ae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80006b2:	4770      	bx	lr
 80006b4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80006b8:	bf16      	itet	ne
 80006ba:	4608      	movne	r0, r1
 80006bc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80006c0:	4601      	movne	r1, r0
 80006c2:	0242      	lsls	r2, r0, #9
 80006c4:	bf06      	itte	eq
 80006c6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80006ca:	ea90 0f01 	teqeq	r0, r1
 80006ce:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80006d2:	4770      	bx	lr

080006d4 <__aeabi_ui2f>:
 80006d4:	f04f 0300 	mov.w	r3, #0
 80006d8:	e004      	b.n	80006e4 <__aeabi_i2f+0x8>
 80006da:	bf00      	nop

080006dc <__aeabi_i2f>:
 80006dc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80006e0:	bf48      	it	mi
 80006e2:	4240      	negmi	r0, r0
 80006e4:	ea5f 0c00 	movs.w	ip, r0
 80006e8:	bf08      	it	eq
 80006ea:	4770      	bxeq	lr
 80006ec:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80006f0:	4601      	mov	r1, r0
 80006f2:	f04f 0000 	mov.w	r0, #0
 80006f6:	e01c      	b.n	8000732 <__aeabi_l2f+0x2a>

080006f8 <__aeabi_ul2f>:
 80006f8:	ea50 0201 	orrs.w	r2, r0, r1
 80006fc:	bf08      	it	eq
 80006fe:	4770      	bxeq	lr
 8000700:	f04f 0300 	mov.w	r3, #0
 8000704:	e00a      	b.n	800071c <__aeabi_l2f+0x14>
 8000706:	bf00      	nop

08000708 <__aeabi_l2f>:
 8000708:	ea50 0201 	orrs.w	r2, r0, r1
 800070c:	bf08      	it	eq
 800070e:	4770      	bxeq	lr
 8000710:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000714:	d502      	bpl.n	800071c <__aeabi_l2f+0x14>
 8000716:	4240      	negs	r0, r0
 8000718:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800071c:	ea5f 0c01 	movs.w	ip, r1
 8000720:	bf02      	ittt	eq
 8000722:	4684      	moveq	ip, r0
 8000724:	4601      	moveq	r1, r0
 8000726:	2000      	moveq	r0, #0
 8000728:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 800072c:	bf08      	it	eq
 800072e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000732:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000736:	fabc f28c 	clz	r2, ip
 800073a:	3a08      	subs	r2, #8
 800073c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000740:	db10      	blt.n	8000764 <__aeabi_l2f+0x5c>
 8000742:	fa01 fc02 	lsl.w	ip, r1, r2
 8000746:	4463      	add	r3, ip
 8000748:	fa00 fc02 	lsl.w	ip, r0, r2
 800074c:	f1c2 0220 	rsb	r2, r2, #32
 8000750:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000754:	fa20 f202 	lsr.w	r2, r0, r2
 8000758:	eb43 0002 	adc.w	r0, r3, r2
 800075c:	bf08      	it	eq
 800075e:	f020 0001 	biceq.w	r0, r0, #1
 8000762:	4770      	bx	lr
 8000764:	f102 0220 	add.w	r2, r2, #32
 8000768:	fa01 fc02 	lsl.w	ip, r1, r2
 800076c:	f1c2 0220 	rsb	r2, r2, #32
 8000770:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000774:	fa21 f202 	lsr.w	r2, r1, r2
 8000778:	eb43 0002 	adc.w	r0, r3, r2
 800077c:	bf08      	it	eq
 800077e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000782:	4770      	bx	lr

08000784 <__aeabi_fmul>:
 8000784:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000788:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 800078c:	bf1e      	ittt	ne
 800078e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000792:	ea92 0f0c 	teqne	r2, ip
 8000796:	ea93 0f0c 	teqne	r3, ip
 800079a:	d06f      	beq.n	800087c <__aeabi_fmul+0xf8>
 800079c:	441a      	add	r2, r3
 800079e:	ea80 0c01 	eor.w	ip, r0, r1
 80007a2:	0240      	lsls	r0, r0, #9
 80007a4:	bf18      	it	ne
 80007a6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80007aa:	d01e      	beq.n	80007ea <__aeabi_fmul+0x66>
 80007ac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80007b0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80007b4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80007b8:	fba0 3101 	umull	r3, r1, r0, r1
 80007bc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80007c0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80007c4:	bf3e      	ittt	cc
 80007c6:	0049      	lslcc	r1, r1, #1
 80007c8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80007cc:	005b      	lslcc	r3, r3, #1
 80007ce:	ea40 0001 	orr.w	r0, r0, r1
 80007d2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80007d6:	2afd      	cmp	r2, #253	@ 0xfd
 80007d8:	d81d      	bhi.n	8000816 <__aeabi_fmul+0x92>
 80007da:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80007de:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80007e2:	bf08      	it	eq
 80007e4:	f020 0001 	biceq.w	r0, r0, #1
 80007e8:	4770      	bx	lr
 80007ea:	f090 0f00 	teq	r0, #0
 80007ee:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80007f2:	bf08      	it	eq
 80007f4:	0249      	lsleq	r1, r1, #9
 80007f6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80007fa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80007fe:	3a7f      	subs	r2, #127	@ 0x7f
 8000800:	bfc2      	ittt	gt
 8000802:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000806:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800080a:	4770      	bxgt	lr
 800080c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000810:	f04f 0300 	mov.w	r3, #0
 8000814:	3a01      	subs	r2, #1
 8000816:	dc5d      	bgt.n	80008d4 <__aeabi_fmul+0x150>
 8000818:	f112 0f19 	cmn.w	r2, #25
 800081c:	bfdc      	itt	le
 800081e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000822:	4770      	bxle	lr
 8000824:	f1c2 0200 	rsb	r2, r2, #0
 8000828:	0041      	lsls	r1, r0, #1
 800082a:	fa21 f102 	lsr.w	r1, r1, r2
 800082e:	f1c2 0220 	rsb	r2, r2, #32
 8000832:	fa00 fc02 	lsl.w	ip, r0, r2
 8000836:	ea5f 0031 	movs.w	r0, r1, rrx
 800083a:	f140 0000 	adc.w	r0, r0, #0
 800083e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000842:	bf08      	it	eq
 8000844:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000848:	4770      	bx	lr
 800084a:	f092 0f00 	teq	r2, #0
 800084e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000852:	bf02      	ittt	eq
 8000854:	0040      	lsleq	r0, r0, #1
 8000856:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800085a:	3a01      	subeq	r2, #1
 800085c:	d0f9      	beq.n	8000852 <__aeabi_fmul+0xce>
 800085e:	ea40 000c 	orr.w	r0, r0, ip
 8000862:	f093 0f00 	teq	r3, #0
 8000866:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800086a:	bf02      	ittt	eq
 800086c:	0049      	lsleq	r1, r1, #1
 800086e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000872:	3b01      	subeq	r3, #1
 8000874:	d0f9      	beq.n	800086a <__aeabi_fmul+0xe6>
 8000876:	ea41 010c 	orr.w	r1, r1, ip
 800087a:	e78f      	b.n	800079c <__aeabi_fmul+0x18>
 800087c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000880:	ea92 0f0c 	teq	r2, ip
 8000884:	bf18      	it	ne
 8000886:	ea93 0f0c 	teqne	r3, ip
 800088a:	d00a      	beq.n	80008a2 <__aeabi_fmul+0x11e>
 800088c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000890:	bf18      	it	ne
 8000892:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000896:	d1d8      	bne.n	800084a <__aeabi_fmul+0xc6>
 8000898:	ea80 0001 	eor.w	r0, r0, r1
 800089c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80008a0:	4770      	bx	lr
 80008a2:	f090 0f00 	teq	r0, #0
 80008a6:	bf17      	itett	ne
 80008a8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 80008ac:	4608      	moveq	r0, r1
 80008ae:	f091 0f00 	teqne	r1, #0
 80008b2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 80008b6:	d014      	beq.n	80008e2 <__aeabi_fmul+0x15e>
 80008b8:	ea92 0f0c 	teq	r2, ip
 80008bc:	d101      	bne.n	80008c2 <__aeabi_fmul+0x13e>
 80008be:	0242      	lsls	r2, r0, #9
 80008c0:	d10f      	bne.n	80008e2 <__aeabi_fmul+0x15e>
 80008c2:	ea93 0f0c 	teq	r3, ip
 80008c6:	d103      	bne.n	80008d0 <__aeabi_fmul+0x14c>
 80008c8:	024b      	lsls	r3, r1, #9
 80008ca:	bf18      	it	ne
 80008cc:	4608      	movne	r0, r1
 80008ce:	d108      	bne.n	80008e2 <__aeabi_fmul+0x15e>
 80008d0:	ea80 0001 	eor.w	r0, r0, r1
 80008d4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80008d8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80008dc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80008e0:	4770      	bx	lr
 80008e2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80008e6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80008ea:	4770      	bx	lr

080008ec <__aeabi_fdiv>:
 80008ec:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008f0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80008f4:	bf1e      	ittt	ne
 80008f6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80008fa:	ea92 0f0c 	teqne	r2, ip
 80008fe:	ea93 0f0c 	teqne	r3, ip
 8000902:	d069      	beq.n	80009d8 <__aeabi_fdiv+0xec>
 8000904:	eba2 0203 	sub.w	r2, r2, r3
 8000908:	ea80 0c01 	eor.w	ip, r0, r1
 800090c:	0249      	lsls	r1, r1, #9
 800090e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000912:	d037      	beq.n	8000984 <__aeabi_fdiv+0x98>
 8000914:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000918:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 800091c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000920:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000924:	428b      	cmp	r3, r1
 8000926:	bf38      	it	cc
 8000928:	005b      	lslcc	r3, r3, #1
 800092a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 800092e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000932:	428b      	cmp	r3, r1
 8000934:	bf24      	itt	cs
 8000936:	1a5b      	subcs	r3, r3, r1
 8000938:	ea40 000c 	orrcs.w	r0, r0, ip
 800093c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000940:	bf24      	itt	cs
 8000942:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000946:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800094a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 800094e:	bf24      	itt	cs
 8000950:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000954:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000958:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 800095c:	bf24      	itt	cs
 800095e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000962:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000966:	011b      	lsls	r3, r3, #4
 8000968:	bf18      	it	ne
 800096a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 800096e:	d1e0      	bne.n	8000932 <__aeabi_fdiv+0x46>
 8000970:	2afd      	cmp	r2, #253	@ 0xfd
 8000972:	f63f af50 	bhi.w	8000816 <__aeabi_fmul+0x92>
 8000976:	428b      	cmp	r3, r1
 8000978:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800097c:	bf08      	it	eq
 800097e:	f020 0001 	biceq.w	r0, r0, #1
 8000982:	4770      	bx	lr
 8000984:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000988:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800098c:	327f      	adds	r2, #127	@ 0x7f
 800098e:	bfc2      	ittt	gt
 8000990:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000994:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000998:	4770      	bxgt	lr
 800099a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800099e:	f04f 0300 	mov.w	r3, #0
 80009a2:	3a01      	subs	r2, #1
 80009a4:	e737      	b.n	8000816 <__aeabi_fmul+0x92>
 80009a6:	f092 0f00 	teq	r2, #0
 80009aa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 80009ae:	bf02      	ittt	eq
 80009b0:	0040      	lsleq	r0, r0, #1
 80009b2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 80009b6:	3a01      	subeq	r2, #1
 80009b8:	d0f9      	beq.n	80009ae <__aeabi_fdiv+0xc2>
 80009ba:	ea40 000c 	orr.w	r0, r0, ip
 80009be:	f093 0f00 	teq	r3, #0
 80009c2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80009c6:	bf02      	ittt	eq
 80009c8:	0049      	lsleq	r1, r1, #1
 80009ca:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80009ce:	3b01      	subeq	r3, #1
 80009d0:	d0f9      	beq.n	80009c6 <__aeabi_fdiv+0xda>
 80009d2:	ea41 010c 	orr.w	r1, r1, ip
 80009d6:	e795      	b.n	8000904 <__aeabi_fdiv+0x18>
 80009d8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80009dc:	ea92 0f0c 	teq	r2, ip
 80009e0:	d108      	bne.n	80009f4 <__aeabi_fdiv+0x108>
 80009e2:	0242      	lsls	r2, r0, #9
 80009e4:	f47f af7d 	bne.w	80008e2 <__aeabi_fmul+0x15e>
 80009e8:	ea93 0f0c 	teq	r3, ip
 80009ec:	f47f af70 	bne.w	80008d0 <__aeabi_fmul+0x14c>
 80009f0:	4608      	mov	r0, r1
 80009f2:	e776      	b.n	80008e2 <__aeabi_fmul+0x15e>
 80009f4:	ea93 0f0c 	teq	r3, ip
 80009f8:	d104      	bne.n	8000a04 <__aeabi_fdiv+0x118>
 80009fa:	024b      	lsls	r3, r1, #9
 80009fc:	f43f af4c 	beq.w	8000898 <__aeabi_fmul+0x114>
 8000a00:	4608      	mov	r0, r1
 8000a02:	e76e      	b.n	80008e2 <__aeabi_fmul+0x15e>
 8000a04:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000a08:	bf18      	it	ne
 8000a0a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000a0e:	d1ca      	bne.n	80009a6 <__aeabi_fdiv+0xba>
 8000a10:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000a14:	f47f af5c 	bne.w	80008d0 <__aeabi_fmul+0x14c>
 8000a18:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000a1c:	f47f af3c 	bne.w	8000898 <__aeabi_fmul+0x114>
 8000a20:	e75f      	b.n	80008e2 <__aeabi_fmul+0x15e>
 8000a22:	bf00      	nop

08000a24 <MPU6050_Writebyte>:

static float LSB_Sensitivity_ACC;
static float LSB_Sensitivity_GYRO;

void MPU6050_Writebyte(uint8_t reg_addr, uint8_t val)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b086      	sub	sp, #24
 8000a28:	af04      	add	r7, sp, #16
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	460a      	mov	r2, r1
 8000a2e:	71fb      	strb	r3, [r7, #7]
 8000a30:	4613      	mov	r3, r2
 8000a32:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDR, reg_addr, I2C_MEMADD_SIZE_8BIT, &val, 1, 1);
 8000a34:	79fb      	ldrb	r3, [r7, #7]
 8000a36:	b29a      	uxth	r2, r3
 8000a38:	2301      	movs	r3, #1
 8000a3a:	9302      	str	r3, [sp, #8]
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	9301      	str	r3, [sp, #4]
 8000a40:	1dbb      	adds	r3, r7, #6
 8000a42:	9300      	str	r3, [sp, #0]
 8000a44:	2301      	movs	r3, #1
 8000a46:	21d0      	movs	r1, #208	@ 0xd0
 8000a48:	4803      	ldr	r0, [pc, #12]	@ (8000a58 <MPU6050_Writebyte+0x34>)
 8000a4a:	f001 fed5 	bl	80027f8 <HAL_I2C_Mem_Write>
}
 8000a4e:	bf00      	nop
 8000a50:	3708      	adds	r7, #8
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	200000b8 	.word	0x200000b8

08000a5c <MPU6050_Readbyte>:
{
	HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDR, reg_addr, I2C_MEMADD_SIZE_8BIT, data, len, 1);
}

void MPU6050_Readbyte(uint8_t reg_addr, uint8_t* data)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b086      	sub	sp, #24
 8000a60:	af04      	add	r7, sp, #16
 8000a62:	4603      	mov	r3, r0
 8000a64:	6039      	str	r1, [r7, #0]
 8000a66:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Read(&hi2c2, MPU6050_ADDR, reg_addr, I2C_MEMADD_SIZE_8BIT, data, 1, 1);
 8000a68:	79fb      	ldrb	r3, [r7, #7]
 8000a6a:	b29a      	uxth	r2, r3
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	9302      	str	r3, [sp, #8]
 8000a70:	2301      	movs	r3, #1
 8000a72:	9301      	str	r3, [sp, #4]
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	9300      	str	r3, [sp, #0]
 8000a78:	2301      	movs	r3, #1
 8000a7a:	21d0      	movs	r1, #208	@ 0xd0
 8000a7c:	4803      	ldr	r0, [pc, #12]	@ (8000a8c <MPU6050_Readbyte+0x30>)
 8000a7e:	f001 ffb5 	bl	80029ec <HAL_I2C_Mem_Read>
}
 8000a82:	bf00      	nop
 8000a84:	3708      	adds	r7, #8
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	200000b8 	.word	0x200000b8

08000a90 <MPU6050_Readbytes>:

void MPU6050_Readbytes(uint8_t reg_addr, uint8_t len, uint8_t* data)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b086      	sub	sp, #24
 8000a94:	af04      	add	r7, sp, #16
 8000a96:	4603      	mov	r3, r0
 8000a98:	603a      	str	r2, [r7, #0]
 8000a9a:	71fb      	strb	r3, [r7, #7]
 8000a9c:	460b      	mov	r3, r1
 8000a9e:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Read(&hi2c2, MPU6050_ADDR, reg_addr, I2C_MEMADD_SIZE_8BIT, data, len, 1);
 8000aa0:	79fb      	ldrb	r3, [r7, #7]
 8000aa2:	b29a      	uxth	r2, r3
 8000aa4:	79bb      	ldrb	r3, [r7, #6]
 8000aa6:	b29b      	uxth	r3, r3
 8000aa8:	2101      	movs	r1, #1
 8000aaa:	9102      	str	r1, [sp, #8]
 8000aac:	9301      	str	r3, [sp, #4]
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	9300      	str	r3, [sp, #0]
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	21d0      	movs	r1, #208	@ 0xd0
 8000ab6:	4803      	ldr	r0, [pc, #12]	@ (8000ac4 <MPU6050_Readbytes+0x34>)
 8000ab8:	f001 ff98 	bl	80029ec <HAL_I2C_Mem_Read>
}
 8000abc:	bf00      	nop
 8000abe:	3708      	adds	r7, #8
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	200000b8 	.word	0x200000b8

08000ac8 <MPU6050_Initialization>:

void MPU6050_Initialization(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
	HAL_Delay(50);
 8000ace:	2032      	movs	r0, #50	@ 0x32
 8000ad0:	f001 f986 	bl	8001de0 <HAL_Delay>
	uint8_t who_am_i = 0;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	707b      	strb	r3, [r7, #1]
	printf("Checking MPU6050...\n");
 8000ad8:	484b      	ldr	r0, [pc, #300]	@ (8000c08 <MPU6050_Initialization+0x140>)
 8000ada:	f004 fdb1 	bl	8005640 <puts>

	MPU6050_Readbyte(MPU6050_WHO_AM_I, &who_am_i);
 8000ade:	1c7b      	adds	r3, r7, #1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	2075      	movs	r0, #117	@ 0x75
 8000ae4:	f7ff ffba 	bl	8000a5c <MPU6050_Readbyte>
	if(who_am_i == 0x68)
 8000ae8:	787b      	ldrb	r3, [r7, #1]
 8000aea:	2b68      	cmp	r3, #104	@ 0x68
 8000aec:	d105      	bne.n	8000afa <MPU6050_Initialization+0x32>
	{
		printf("MPU6050 who_am_i = 0x%02x...OK\n", who_am_i);
 8000aee:	787b      	ldrb	r3, [r7, #1]
 8000af0:	4619      	mov	r1, r3
 8000af2:	4846      	ldr	r0, [pc, #280]	@ (8000c0c <MPU6050_Initialization+0x144>)
 8000af4:	f004 fd3c 	bl	8005570 <iprintf>
 8000af8:	e00f      	b.n	8000b1a <MPU6050_Initialization+0x52>
	}
	else
	{
		printf("ERROR!\n");
 8000afa:	4845      	ldr	r0, [pc, #276]	@ (8000c10 <MPU6050_Initialization+0x148>)
 8000afc:	f004 fda0 	bl	8005640 <puts>
		printf("MPU6050 who_am_i : 0x%02x should be 0x68\n", who_am_i);
 8000b00:	787b      	ldrb	r3, [r7, #1]
 8000b02:	4619      	mov	r1, r3
 8000b04:	4843      	ldr	r0, [pc, #268]	@ (8000c14 <MPU6050_Initialization+0x14c>)
 8000b06:	f004 fd33 	bl	8005570 <iprintf>
		while(1)
		{
			printf("who am i error. Can not recognize mpu6050\n");
 8000b0a:	4843      	ldr	r0, [pc, #268]	@ (8000c18 <MPU6050_Initialization+0x150>)
 8000b0c:	f004 fd98 	bl	8005640 <puts>
			HAL_Delay(100);
 8000b10:	2064      	movs	r0, #100	@ 0x64
 8000b12:	f001 f965 	bl	8001de0 <HAL_Delay>
			printf("who am i error. Can not recognize mpu6050\n");
 8000b16:	bf00      	nop
 8000b18:	e7f7      	b.n	8000b0a <MPU6050_Initialization+0x42>
		}
	}

	//Reset the whole module before initialization
	MPU6050_Writebyte(MPU6050_PWR_MGMT_1, 0x1<<7);
 8000b1a:	2180      	movs	r1, #128	@ 0x80
 8000b1c:	206b      	movs	r0, #107	@ 0x6b
 8000b1e:	f7ff ff81 	bl	8000a24 <MPU6050_Writebyte>
	HAL_Delay(100);
 8000b22:	2064      	movs	r0, #100	@ 0x64
 8000b24:	f001 f95c 	bl	8001de0 <HAL_Delay>

	//Power Management setting
	/* Default is sleep mode
	 * necessary to wake up MPU6050*/
	MPU6050_Writebyte(MPU6050_PWR_MGMT_1, 0x00);
 8000b28:	2100      	movs	r1, #0
 8000b2a:	206b      	movs	r0, #107	@ 0x6b
 8000b2c:	f7ff ff7a 	bl	8000a24 <MPU6050_Writebyte>
	HAL_Delay(50);
 8000b30:	2032      	movs	r0, #50	@ 0x32
 8000b32:	f001 f955 	bl	8001de0 <HAL_Delay>

	MPU6050_Writebyte(MPU6050_PWR_MGMT_2, 0xC0);
 8000b36:	21c0      	movs	r1, #192	@ 0xc0
 8000b38:	206c      	movs	r0, #108	@ 0x6c
 8000b3a:	f7ff ff73 	bl	8000a24 <MPU6050_Writebyte>
	HAL_Delay(50);
 8000b3e:	2032      	movs	r0, #50	@ 0x32
 8000b40:	f001 f94e 	bl	8001de0 <HAL_Delay>

	//Sample rate divider
	/*Sample Rate = Gyroscope Output Rate / (1 + SMPRT_DIV) */
//	MPU6050_Writebyte(MPU6050_SMPRT_DIV, 0x00); // ACC output rate is 1kHz, GYRO output rate is 8kHz
	MPU6050_Writebyte(MPU6050_SMPRT_DIV, 4); //<- n // Sample Rate = 200Hz, n=39 (DesiredHz = y. n = y*8 - 1)
 8000b44:	2104      	movs	r1, #4
 8000b46:	2019      	movs	r0, #25
 8000b48:	f7ff ff6c 	bl	8000a24 <MPU6050_Writebyte>
	HAL_Delay(50);
 8000b4c:	2032      	movs	r0, #50	@ 0x32
 8000b4e:	f001 f947 	bl	8001de0 <HAL_Delay>

	MPU6050_Writebyte(MPU6050_FIFO_EN, 0x08);// turns off gyro
 8000b52:	2108      	movs	r1, #8
 8000b54:	2023      	movs	r0, #35	@ 0x23
 8000b56:	f7ff ff65 	bl	8000a24 <MPU6050_Writebyte>
	HAL_Delay(50);
 8000b5a:	2032      	movs	r0, #50	@ 0x32
 8000b5c:	f001 f940 	bl	8001de0 <HAL_Delay>

	//FSYNC and DLPF setting
	/*DLPF is set to 0*/
	MPU6050_Writebyte(MPU6050_CONFIG, 0x00);
 8000b60:	2100      	movs	r1, #0
 8000b62:	201a      	movs	r0, #26
 8000b64:	f7ff ff5e 	bl	8000a24 <MPU6050_Writebyte>
	HAL_Delay(50);
 8000b68:	2032      	movs	r0, #50	@ 0x32
 8000b6a:	f001 f939 	bl	8001de0 <HAL_Delay>
	/*FS_SEL  Full Scale Range
	  0    	+-250 degree/s
	  1		+-500 degree/s
	  2		+-1000 degree/s
	  3		+-2000 degree/s	*/
	uint8_t FS_SCALE_GYRO = 0x1;
 8000b6e:	2301      	movs	r3, #1
 8000b70:	71fb      	strb	r3, [r7, #7]
	MPU6050_Writebyte(MPU6050_GYRO_CONFIG, FS_SCALE_GYRO<<3);
 8000b72:	79fb      	ldrb	r3, [r7, #7]
 8000b74:	00db      	lsls	r3, r3, #3
 8000b76:	b2db      	uxtb	r3, r3
 8000b78:	4619      	mov	r1, r3
 8000b7a:	201b      	movs	r0, #27
 8000b7c:	f7ff ff52 	bl	8000a24 <MPU6050_Writebyte>
	HAL_Delay(50);
 8000b80:	2032      	movs	r0, #50	@ 0x32
 8000b82:	f001 f92d 	bl	8001de0 <HAL_Delay>
	/*FS_SEL  Full Scale Range
	  0    	+-2g
	  1		+-4g
	  2		+-8g
	  3		+-16g	*/
	uint8_t FS_SCALE_ACC = 0x3;
 8000b86:	2303      	movs	r3, #3
 8000b88:	71bb      	strb	r3, [r7, #6]
	MPU6050_Writebyte(MPU6050_ACCEL_CONFIG, FS_SCALE_ACC<<3);
 8000b8a:	79bb      	ldrb	r3, [r7, #6]
 8000b8c:	00db      	lsls	r3, r3, #3
 8000b8e:	b2db      	uxtb	r3, r3
 8000b90:	4619      	mov	r1, r3
 8000b92:	201c      	movs	r0, #28
 8000b94:	f7ff ff46 	bl	8000a24 <MPU6050_Writebyte>
	HAL_Delay(50);
 8000b98:	2032      	movs	r0, #50	@ 0x32
 8000b9a:	f001 f921 	bl	8001de0 <HAL_Delay>

	MPU6050_Get_LSB_Sensitivity(FS_SCALE_GYRO, FS_SCALE_ACC);
 8000b9e:	79ba      	ldrb	r2, [r7, #6]
 8000ba0:	79fb      	ldrb	r3, [r7, #7]
 8000ba2:	4611      	mov	r1, r2
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f000 f891 	bl	8000ccc <MPU6050_Get_LSB_Sensitivity>
//	printf("LSB_Sensitivity_GYRO: %f, LSB_Sensitivity_ACC: %f\n",LSB_Sensitivity_GYRO, LSB_Sensitivity_ACC);

	//Interrupt PIN setting
	uint8_t INT_LEVEL = 0x0; //0 - active high, 1 - active low
 8000baa:	2300      	movs	r3, #0
 8000bac:	717b      	strb	r3, [r7, #5]
	uint8_t LATCH_INT_EN = 0x0; //0 - INT 50us pulse, 1 - interrupt clear required
 8000bae:	2300      	movs	r3, #0
 8000bb0:	713b      	strb	r3, [r7, #4]
	uint8_t INT_RD_CLEAR = 0x1; //0 - INT flag cleared by reading INT_STATUS, 1 - INT flag cleared by any read operation
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	70fb      	strb	r3, [r7, #3]
	MPU6050_Writebyte(MPU6050_INT_PIN_CFG, (INT_LEVEL<<7)|(LATCH_INT_EN<<5)|(INT_RD_CLEAR<<4)); //
 8000bb6:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000bba:	01db      	lsls	r3, r3, #7
 8000bbc:	b25a      	sxtb	r2, r3
 8000bbe:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8000bc2:	015b      	lsls	r3, r3, #5
 8000bc4:	b25b      	sxtb	r3, r3
 8000bc6:	4313      	orrs	r3, r2
 8000bc8:	b25a      	sxtb	r2, r3
 8000bca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000bce:	011b      	lsls	r3, r3, #4
 8000bd0:	b25b      	sxtb	r3, r3
 8000bd2:	4313      	orrs	r3, r2
 8000bd4:	b25b      	sxtb	r3, r3
 8000bd6:	b2db      	uxtb	r3, r3
 8000bd8:	4619      	mov	r1, r3
 8000bda:	2037      	movs	r0, #55	@ 0x37
 8000bdc:	f7ff ff22 	bl	8000a24 <MPU6050_Writebyte>
	HAL_Delay(50);
 8000be0:	2032      	movs	r0, #50	@ 0x32
 8000be2:	f001 f8fd 	bl	8001de0 <HAL_Delay>

	//Interrupt enable setting
	uint8_t DATA_RDY_EN = 0x1; // 1 - enable, 0 - disable
 8000be6:	2301      	movs	r3, #1
 8000be8:	70bb      	strb	r3, [r7, #2]
	MPU6050_Writebyte(MPU6050_INT_ENABLE, DATA_RDY_EN);
 8000bea:	78bb      	ldrb	r3, [r7, #2]
 8000bec:	4619      	mov	r1, r3
 8000bee:	2038      	movs	r0, #56	@ 0x38
 8000bf0:	f7ff ff18 	bl	8000a24 <MPU6050_Writebyte>
	HAL_Delay(50);
 8000bf4:	2032      	movs	r0, #50	@ 0x32
 8000bf6:	f001 f8f3 	bl	8001de0 <HAL_Delay>

	printf("MPU6050 setting is finished\n");
 8000bfa:	4808      	ldr	r0, [pc, #32]	@ (8000c1c <MPU6050_Initialization+0x154>)
 8000bfc:	f004 fd20 	bl	8005640 <puts>
}
 8000c00:	bf00      	nop
 8000c02:	3708      	adds	r7, #8
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	08006330 	.word	0x08006330
 8000c0c:	08006344 	.word	0x08006344
 8000c10:	08006364 	.word	0x08006364
 8000c14:	0800636c 	.word	0x0800636c
 8000c18:	08006398 	.word	0x08006398
 8000c1c:	080063c4 	.word	0x080063c4

08000c20 <MPU6050_Get6AxisRawData>:
/*Get Raw Data from sensor*/
void MPU6050_Get6AxisRawData(Struct_MPU6050* mpu6050)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b086      	sub	sp, #24
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
	uint8_t data[14];
	MPU6050_Readbytes(MPU6050_ACCEL_XOUT_H, 14, data);
 8000c28:	f107 0308 	add.w	r3, r7, #8
 8000c2c:	461a      	mov	r2, r3
 8000c2e:	210e      	movs	r1, #14
 8000c30:	203b      	movs	r0, #59	@ 0x3b
 8000c32:	f7ff ff2d 	bl	8000a90 <MPU6050_Readbytes>

	mpu6050->acc_x_raw = (data[0] << 8) | data[1];
 8000c36:	7a3b      	ldrb	r3, [r7, #8]
 8000c38:	b21b      	sxth	r3, r3
 8000c3a:	021b      	lsls	r3, r3, #8
 8000c3c:	b21a      	sxth	r2, r3
 8000c3e:	7a7b      	ldrb	r3, [r7, #9]
 8000c40:	b21b      	sxth	r3, r3
 8000c42:	4313      	orrs	r3, r2
 8000c44:	b21a      	sxth	r2, r3
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	801a      	strh	r2, [r3, #0]
	mpu6050->acc_y_raw = (data[2] << 8) | data[3];
 8000c4a:	7abb      	ldrb	r3, [r7, #10]
 8000c4c:	b21b      	sxth	r3, r3
 8000c4e:	021b      	lsls	r3, r3, #8
 8000c50:	b21a      	sxth	r2, r3
 8000c52:	7afb      	ldrb	r3, [r7, #11]
 8000c54:	b21b      	sxth	r3, r3
 8000c56:	4313      	orrs	r3, r2
 8000c58:	b21a      	sxth	r2, r3
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	805a      	strh	r2, [r3, #2]
	mpu6050->acc_z_raw = (data[4] << 8) | data[5];
 8000c5e:	7b3b      	ldrb	r3, [r7, #12]
 8000c60:	b21b      	sxth	r3, r3
 8000c62:	021b      	lsls	r3, r3, #8
 8000c64:	b21a      	sxth	r2, r3
 8000c66:	7b7b      	ldrb	r3, [r7, #13]
 8000c68:	b21b      	sxth	r3, r3
 8000c6a:	4313      	orrs	r3, r2
 8000c6c:	b21a      	sxth	r2, r3
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	809a      	strh	r2, [r3, #4]

	mpu6050->temperature_raw = (data[6] << 8) | data[7];
 8000c72:	7bbb      	ldrb	r3, [r7, #14]
 8000c74:	b21b      	sxth	r3, r3
 8000c76:	021b      	lsls	r3, r3, #8
 8000c78:	b21a      	sxth	r2, r3
 8000c7a:	7bfb      	ldrb	r3, [r7, #15]
 8000c7c:	b21b      	sxth	r3, r3
 8000c7e:	4313      	orrs	r3, r2
 8000c80:	b21a      	sxth	r2, r3
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	80da      	strh	r2, [r3, #6]

	mpu6050->gyro_x_raw = ((data[8] << 8) | data[9]);
 8000c86:	7c3b      	ldrb	r3, [r7, #16]
 8000c88:	b21b      	sxth	r3, r3
 8000c8a:	021b      	lsls	r3, r3, #8
 8000c8c:	b21a      	sxth	r2, r3
 8000c8e:	7c7b      	ldrb	r3, [r7, #17]
 8000c90:	b21b      	sxth	r3, r3
 8000c92:	4313      	orrs	r3, r2
 8000c94:	b21a      	sxth	r2, r3
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	811a      	strh	r2, [r3, #8]
	mpu6050->gyro_y_raw = ((data[10] << 8) | data[11]);
 8000c9a:	7cbb      	ldrb	r3, [r7, #18]
 8000c9c:	b21b      	sxth	r3, r3
 8000c9e:	021b      	lsls	r3, r3, #8
 8000ca0:	b21a      	sxth	r2, r3
 8000ca2:	7cfb      	ldrb	r3, [r7, #19]
 8000ca4:	b21b      	sxth	r3, r3
 8000ca6:	4313      	orrs	r3, r2
 8000ca8:	b21a      	sxth	r2, r3
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	815a      	strh	r2, [r3, #10]
	mpu6050->gyro_z_raw = ((data[12] << 8) | data[13]);
 8000cae:	7d3b      	ldrb	r3, [r7, #20]
 8000cb0:	b21b      	sxth	r3, r3
 8000cb2:	021b      	lsls	r3, r3, #8
 8000cb4:	b21a      	sxth	r2, r3
 8000cb6:	7d7b      	ldrb	r3, [r7, #21]
 8000cb8:	b21b      	sxth	r3, r3
 8000cba:	4313      	orrs	r3, r2
 8000cbc:	b21a      	sxth	r2, r3
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	819a      	strh	r2, [r3, #12]
}
 8000cc2:	bf00      	nop
 8000cc4:	3718      	adds	r7, #24
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
	...

08000ccc <MPU6050_Get_LSB_Sensitivity>:

void MPU6050_Get_LSB_Sensitivity(uint8_t FS_SCALE_GYRO, uint8_t FS_SCALE_ACC)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b083      	sub	sp, #12
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	460a      	mov	r2, r1
 8000cd6:	71fb      	strb	r3, [r7, #7]
 8000cd8:	4613      	mov	r3, r2
 8000cda:	71bb      	strb	r3, [r7, #6]
	switch(FS_SCALE_GYRO)
 8000cdc:	79fb      	ldrb	r3, [r7, #7]
 8000cde:	2b03      	cmp	r3, #3
 8000ce0:	d81a      	bhi.n	8000d18 <MPU6050_Get_LSB_Sensitivity+0x4c>
 8000ce2:	a201      	add	r2, pc, #4	@ (adr r2, 8000ce8 <MPU6050_Get_LSB_Sensitivity+0x1c>)
 8000ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ce8:	08000cf9 	.word	0x08000cf9
 8000cec:	08000d01 	.word	0x08000d01
 8000cf0:	08000d09 	.word	0x08000d09
 8000cf4:	08000d11 	.word	0x08000d11
	{
	case 0:
		LSB_Sensitivity_GYRO = 131.f;
 8000cf8:	4b1b      	ldr	r3, [pc, #108]	@ (8000d68 <MPU6050_Get_LSB_Sensitivity+0x9c>)
 8000cfa:	4a1c      	ldr	r2, [pc, #112]	@ (8000d6c <MPU6050_Get_LSB_Sensitivity+0xa0>)
 8000cfc:	601a      	str	r2, [r3, #0]
		break;
 8000cfe:	e00b      	b.n	8000d18 <MPU6050_Get_LSB_Sensitivity+0x4c>
	case 1:
		LSB_Sensitivity_GYRO = 65.5f;
 8000d00:	4b19      	ldr	r3, [pc, #100]	@ (8000d68 <MPU6050_Get_LSB_Sensitivity+0x9c>)
 8000d02:	4a1b      	ldr	r2, [pc, #108]	@ (8000d70 <MPU6050_Get_LSB_Sensitivity+0xa4>)
 8000d04:	601a      	str	r2, [r3, #0]
		break;
 8000d06:	e007      	b.n	8000d18 <MPU6050_Get_LSB_Sensitivity+0x4c>
	case 2:
		LSB_Sensitivity_GYRO = 32.8f;
 8000d08:	4b17      	ldr	r3, [pc, #92]	@ (8000d68 <MPU6050_Get_LSB_Sensitivity+0x9c>)
 8000d0a:	4a1a      	ldr	r2, [pc, #104]	@ (8000d74 <MPU6050_Get_LSB_Sensitivity+0xa8>)
 8000d0c:	601a      	str	r2, [r3, #0]
		break;
 8000d0e:	e003      	b.n	8000d18 <MPU6050_Get_LSB_Sensitivity+0x4c>
	case 3:
		LSB_Sensitivity_GYRO = 16.4f;
 8000d10:	4b15      	ldr	r3, [pc, #84]	@ (8000d68 <MPU6050_Get_LSB_Sensitivity+0x9c>)
 8000d12:	4a19      	ldr	r2, [pc, #100]	@ (8000d78 <MPU6050_Get_LSB_Sensitivity+0xac>)
 8000d14:	601a      	str	r2, [r3, #0]
		break;
 8000d16:	bf00      	nop
	}
	switch(FS_SCALE_ACC)
 8000d18:	79bb      	ldrb	r3, [r7, #6]
 8000d1a:	2b03      	cmp	r3, #3
 8000d1c:	d81e      	bhi.n	8000d5c <MPU6050_Get_LSB_Sensitivity+0x90>
 8000d1e:	a201      	add	r2, pc, #4	@ (adr r2, 8000d24 <MPU6050_Get_LSB_Sensitivity+0x58>)
 8000d20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d24:	08000d35 	.word	0x08000d35
 8000d28:	08000d3f 	.word	0x08000d3f
 8000d2c:	08000d49 	.word	0x08000d49
 8000d30:	08000d53 	.word	0x08000d53
	{
	case 0:
		LSB_Sensitivity_ACC = 16384.f;
 8000d34:	4b11      	ldr	r3, [pc, #68]	@ (8000d7c <MPU6050_Get_LSB_Sensitivity+0xb0>)
 8000d36:	f04f 428d 	mov.w	r2, #1182793728	@ 0x46800000
 8000d3a:	601a      	str	r2, [r3, #0]
		break;
 8000d3c:	e00e      	b.n	8000d5c <MPU6050_Get_LSB_Sensitivity+0x90>
	case 1:
		LSB_Sensitivity_ACC = 8192.f;
 8000d3e:	4b0f      	ldr	r3, [pc, #60]	@ (8000d7c <MPU6050_Get_LSB_Sensitivity+0xb0>)
 8000d40:	f04f 428c 	mov.w	r2, #1174405120	@ 0x46000000
 8000d44:	601a      	str	r2, [r3, #0]
		break;
 8000d46:	e009      	b.n	8000d5c <MPU6050_Get_LSB_Sensitivity+0x90>
	case 2:
		LSB_Sensitivity_ACC = 4096.f;
 8000d48:	4b0c      	ldr	r3, [pc, #48]	@ (8000d7c <MPU6050_Get_LSB_Sensitivity+0xb0>)
 8000d4a:	f04f 428b 	mov.w	r2, #1166016512	@ 0x45800000
 8000d4e:	601a      	str	r2, [r3, #0]
		break;
 8000d50:	e004      	b.n	8000d5c <MPU6050_Get_LSB_Sensitivity+0x90>
	case 3:
		LSB_Sensitivity_ACC = 2048.f;
 8000d52:	4b0a      	ldr	r3, [pc, #40]	@ (8000d7c <MPU6050_Get_LSB_Sensitivity+0xb0>)
 8000d54:	f04f 428a 	mov.w	r2, #1157627904	@ 0x45000000
 8000d58:	601a      	str	r2, [r3, #0]
		break;
 8000d5a:	bf00      	nop
	}
}
 8000d5c:	bf00      	nop
 8000d5e:	370c      	adds	r7, #12
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bc80      	pop	{r7}
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop
 8000d68:	200000b4 	.word	0x200000b4
 8000d6c:	43030000 	.word	0x43030000
 8000d70:	42830000 	.word	0x42830000
 8000d74:	42033333 	.word	0x42033333
 8000d78:	41833333 	.word	0x41833333
 8000d7c:	200000b0 	.word	0x200000b0

08000d80 <MPU6050_DataConvert>:

/*Convert Unit. acc_raw -> g, gyro_raw -> degree per second*/
void MPU6050_DataConvert(Struct_MPU6050* mpu6050)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
	//printf("LSB_Sensitivity_GYRO: %f, LSB_Sensitivity_ACC: %f\n",LSB_Sensitivity_GYRO,LSB_Sensitivity_ACC);
	mpu6050->acc_x = mpu6050->acc_x_raw / LSB_Sensitivity_ACC;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f7ff fca4 	bl	80006dc <__aeabi_i2f>
 8000d94:	4602      	mov	r2, r0
 8000d96:	4b42      	ldr	r3, [pc, #264]	@ (8000ea0 <MPU6050_DataConvert+0x120>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	4610      	mov	r0, r2
 8000d9e:	f7ff fda5 	bl	80008ec <__aeabi_fdiv>
 8000da2:	4603      	mov	r3, r0
 8000da4:	461a      	mov	r2, r3
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	611a      	str	r2, [r3, #16]
	mpu6050->acc_y = mpu6050->acc_y_raw / LSB_Sensitivity_ACC;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000db0:	4618      	mov	r0, r3
 8000db2:	f7ff fc93 	bl	80006dc <__aeabi_i2f>
 8000db6:	4602      	mov	r2, r0
 8000db8:	4b39      	ldr	r3, [pc, #228]	@ (8000ea0 <MPU6050_DataConvert+0x120>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	4610      	mov	r0, r2
 8000dc0:	f7ff fd94 	bl	80008ec <__aeabi_fdiv>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	461a      	mov	r2, r3
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	615a      	str	r2, [r3, #20]
	mpu6050->acc_z = mpu6050->acc_z_raw / LSB_Sensitivity_ACC;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f7ff fc82 	bl	80006dc <__aeabi_i2f>
 8000dd8:	4602      	mov	r2, r0
 8000dda:	4b31      	ldr	r3, [pc, #196]	@ (8000ea0 <MPU6050_DataConvert+0x120>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4619      	mov	r1, r3
 8000de0:	4610      	mov	r0, r2
 8000de2:	f7ff fd83 	bl	80008ec <__aeabi_fdiv>
 8000de6:	4603      	mov	r3, r0
 8000de8:	461a      	mov	r2, r3
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	619a      	str	r2, [r3, #24]

	mpu6050->temperature = (float)(mpu6050->temperature_raw)/340+36.53;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000df4:	4618      	mov	r0, r3
 8000df6:	f7ff fc71 	bl	80006dc <__aeabi_i2f>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	4929      	ldr	r1, [pc, #164]	@ (8000ea4 <MPU6050_DataConvert+0x124>)
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f7ff fd74 	bl	80008ec <__aeabi_fdiv>
 8000e04:	4603      	mov	r3, r0
 8000e06:	4618      	mov	r0, r3
 8000e08:	f7ff fb06 	bl	8000418 <__aeabi_f2d>
 8000e0c:	a322      	add	r3, pc, #136	@ (adr r3, 8000e98 <MPU6050_DataConvert+0x118>)
 8000e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e12:	f7ff f9a3 	bl	800015c <__adddf3>
 8000e16:	4602      	mov	r2, r0
 8000e18:	460b      	mov	r3, r1
 8000e1a:	4610      	mov	r0, r2
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	f7ff fb53 	bl	80004c8 <__aeabi_d2f>
 8000e22:	4602      	mov	r2, r0
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	61da      	str	r2, [r3, #28]

	mpu6050->gyro_x = mpu6050->gyro_x_raw / LSB_Sensitivity_GYRO;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f7ff fc54 	bl	80006dc <__aeabi_i2f>
 8000e34:	4602      	mov	r2, r0
 8000e36:	4b1c      	ldr	r3, [pc, #112]	@ (8000ea8 <MPU6050_DataConvert+0x128>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	4610      	mov	r0, r2
 8000e3e:	f7ff fd55 	bl	80008ec <__aeabi_fdiv>
 8000e42:	4603      	mov	r3, r0
 8000e44:	461a      	mov	r2, r3
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	621a      	str	r2, [r3, #32]
	mpu6050->gyro_y = mpu6050->gyro_y_raw / LSB_Sensitivity_GYRO;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000e50:	4618      	mov	r0, r3
 8000e52:	f7ff fc43 	bl	80006dc <__aeabi_i2f>
 8000e56:	4602      	mov	r2, r0
 8000e58:	4b13      	ldr	r3, [pc, #76]	@ (8000ea8 <MPU6050_DataConvert+0x128>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	4610      	mov	r0, r2
 8000e60:	f7ff fd44 	bl	80008ec <__aeabi_fdiv>
 8000e64:	4603      	mov	r3, r0
 8000e66:	461a      	mov	r2, r3
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	625a      	str	r2, [r3, #36]	@ 0x24
	mpu6050->gyro_z = mpu6050->gyro_z_raw / LSB_Sensitivity_GYRO;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8000e72:	4618      	mov	r0, r3
 8000e74:	f7ff fc32 	bl	80006dc <__aeabi_i2f>
 8000e78:	4602      	mov	r2, r0
 8000e7a:	4b0b      	ldr	r3, [pc, #44]	@ (8000ea8 <MPU6050_DataConvert+0x128>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	4619      	mov	r1, r3
 8000e80:	4610      	mov	r0, r2
 8000e82:	f7ff fd33 	bl	80008ec <__aeabi_fdiv>
 8000e86:	4603      	mov	r3, r0
 8000e88:	461a      	mov	r2, r3
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000e8e:	bf00      	nop
 8000e90:	3708      	adds	r7, #8
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	0a3d70a4 	.word	0x0a3d70a4
 8000e9c:	404243d7 	.word	0x404243d7
 8000ea0:	200000b0 	.word	0x200000b0
 8000ea4:	43aa0000 	.word	0x43aa0000
 8000ea8:	200000b4 	.word	0x200000b4

08000eac <MPU6050_DataReady>:


int MPU6050_DataReady(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
			return 1;
		}
	}
	return 0;
	 */
	return HAL_GPIO_ReadPin(MPU6050_INT_PORT, MPU6050_INT_PIN);
 8000eb0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000eb4:	4802      	ldr	r0, [pc, #8]	@ (8000ec0 <MPU6050_DataReady+0x14>)
 8000eb6:	f001 fafb 	bl	80024b0 <HAL_GPIO_ReadPin>
 8000eba:	4603      	mov	r3, r0
}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	40010c00 	.word	0x40010c00

08000ec4 <MPU6050_ProcessData>:

void MPU6050_ProcessData(Struct_MPU6050* mpu6050)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
	MPU6050_Get6AxisRawData(mpu6050);
 8000ecc:	6878      	ldr	r0, [r7, #4]
 8000ece:	f7ff fea7 	bl	8000c20 <MPU6050_Get6AxisRawData>
	MPU6050_DataConvert(mpu6050);
 8000ed2:	6878      	ldr	r0, [r7, #4]
 8000ed4:	f7ff ff54 	bl	8000d80 <MPU6050_DataConvert>
}
 8000ed8:	bf00      	nop
 8000eda:	3708      	adds	r7, #8
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}

08000ee0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b088      	sub	sp, #32
 8000ee4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee6:	f107 0310 	add.w	r3, r7, #16
 8000eea:	2200      	movs	r2, #0
 8000eec:	601a      	str	r2, [r3, #0]
 8000eee:	605a      	str	r2, [r3, #4]
 8000ef0:	609a      	str	r2, [r3, #8]
 8000ef2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ef4:	4b4f      	ldr	r3, [pc, #316]	@ (8001034 <MX_GPIO_Init+0x154>)
 8000ef6:	699b      	ldr	r3, [r3, #24]
 8000ef8:	4a4e      	ldr	r2, [pc, #312]	@ (8001034 <MX_GPIO_Init+0x154>)
 8000efa:	f043 0310 	orr.w	r3, r3, #16
 8000efe:	6193      	str	r3, [r2, #24]
 8000f00:	4b4c      	ldr	r3, [pc, #304]	@ (8001034 <MX_GPIO_Init+0x154>)
 8000f02:	699b      	ldr	r3, [r3, #24]
 8000f04:	f003 0310 	and.w	r3, r3, #16
 8000f08:	60fb      	str	r3, [r7, #12]
 8000f0a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f0c:	4b49      	ldr	r3, [pc, #292]	@ (8001034 <MX_GPIO_Init+0x154>)
 8000f0e:	699b      	ldr	r3, [r3, #24]
 8000f10:	4a48      	ldr	r2, [pc, #288]	@ (8001034 <MX_GPIO_Init+0x154>)
 8000f12:	f043 0320 	orr.w	r3, r3, #32
 8000f16:	6193      	str	r3, [r2, #24]
 8000f18:	4b46      	ldr	r3, [pc, #280]	@ (8001034 <MX_GPIO_Init+0x154>)
 8000f1a:	699b      	ldr	r3, [r3, #24]
 8000f1c:	f003 0320 	and.w	r3, r3, #32
 8000f20:	60bb      	str	r3, [r7, #8]
 8000f22:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f24:	4b43      	ldr	r3, [pc, #268]	@ (8001034 <MX_GPIO_Init+0x154>)
 8000f26:	699b      	ldr	r3, [r3, #24]
 8000f28:	4a42      	ldr	r2, [pc, #264]	@ (8001034 <MX_GPIO_Init+0x154>)
 8000f2a:	f043 0304 	orr.w	r3, r3, #4
 8000f2e:	6193      	str	r3, [r2, #24]
 8000f30:	4b40      	ldr	r3, [pc, #256]	@ (8001034 <MX_GPIO_Init+0x154>)
 8000f32:	699b      	ldr	r3, [r3, #24]
 8000f34:	f003 0304 	and.w	r3, r3, #4
 8000f38:	607b      	str	r3, [r7, #4]
 8000f3a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f3c:	4b3d      	ldr	r3, [pc, #244]	@ (8001034 <MX_GPIO_Init+0x154>)
 8000f3e:	699b      	ldr	r3, [r3, #24]
 8000f40:	4a3c      	ldr	r2, [pc, #240]	@ (8001034 <MX_GPIO_Init+0x154>)
 8000f42:	f043 0308 	orr.w	r3, r3, #8
 8000f46:	6193      	str	r3, [r2, #24]
 8000f48:	4b3a      	ldr	r3, [pc, #232]	@ (8001034 <MX_GPIO_Init+0x154>)
 8000f4a:	699b      	ldr	r3, [r3, #24]
 8000f4c:	f003 0308 	and.w	r3, r3, #8
 8000f50:	603b      	str	r3, [r7, #0]
 8000f52:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000f54:	2200      	movs	r2, #0
 8000f56:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f5a:	4837      	ldr	r0, [pc, #220]	@ (8001038 <MX_GPIO_Init+0x158>)
 8000f5c:	f001 fabf 	bl	80024de <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RADIO_CSN_GPIO_Port, RADIO_CSN_Pin, GPIO_PIN_SET);
 8000f60:	2201      	movs	r2, #1
 8000f62:	2110      	movs	r1, #16
 8000f64:	4835      	ldr	r0, [pc, #212]	@ (800103c <MX_GPIO_Init+0x15c>)
 8000f66:	f001 faba 	bl	80024de <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RADIO_CE_Pin|SPI_LED_Pin, GPIO_PIN_RESET);
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	f242 0101 	movw	r1, #8193	@ 0x2001
 8000f70:	4833      	ldr	r0, [pc, #204]	@ (8001040 <MX_GPIO_Init+0x160>)
 8000f72:	f001 fab4 	bl	80024de <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000f76:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f7a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f80:	2300      	movs	r3, #0
 8000f82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f84:	2302      	movs	r3, #2
 8000f86:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f88:	f107 0310 	add.w	r3, r7, #16
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	482a      	ldr	r0, [pc, #168]	@ (8001038 <MX_GPIO_Init+0x158>)
 8000f90:	f001 f90a 	bl	80021a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RADIO_CSN_Pin */
  GPIO_InitStruct.Pin = RADIO_CSN_Pin;
 8000f94:	2310      	movs	r3, #16
 8000f96:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fa0:	2303      	movs	r3, #3
 8000fa2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RADIO_CSN_GPIO_Port, &GPIO_InitStruct);
 8000fa4:	f107 0310 	add.w	r3, r7, #16
 8000fa8:	4619      	mov	r1, r3
 8000faa:	4824      	ldr	r0, [pc, #144]	@ (800103c <MX_GPIO_Init+0x15c>)
 8000fac:	f001 f8fc 	bl	80021a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RADIO_CE_Pin */
  GPIO_InitStruct.Pin = RADIO_CE_Pin;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fbc:	2303      	movs	r3, #3
 8000fbe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RADIO_CE_GPIO_Port, &GPIO_InitStruct);
 8000fc0:	f107 0310 	add.w	r3, r7, #16
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	481e      	ldr	r0, [pc, #120]	@ (8001040 <MX_GPIO_Init+0x160>)
 8000fc8:	f001 f8ee 	bl	80021a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RADIO_IRQ_Pin */
  GPIO_InitStruct.Pin = RADIO_IRQ_Pin;
 8000fcc:	2302      	movs	r3, #2
 8000fce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000fd0:	4b1c      	ldr	r3, [pc, #112]	@ (8001044 <MX_GPIO_Init+0x164>)
 8000fd2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RADIO_IRQ_GPIO_Port, &GPIO_InitStruct);
 8000fd8:	f107 0310 	add.w	r3, r7, #16
 8000fdc:	4619      	mov	r1, r3
 8000fde:	4818      	ldr	r0, [pc, #96]	@ (8001040 <MX_GPIO_Init+0x160>)
 8000fe0:	f001 f8e2 	bl	80021a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : IMU_INT_Pin */
  GPIO_InitStruct.Pin = IMU_INT_Pin;
 8000fe4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fe8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fea:	2300      	movs	r3, #0
 8000fec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(IMU_INT_GPIO_Port, &GPIO_InitStruct);
 8000ff2:	f107 0310 	add.w	r3, r7, #16
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	4811      	ldr	r0, [pc, #68]	@ (8001040 <MX_GPIO_Init+0x160>)
 8000ffa:	f001 f8d5 	bl	80021a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_LED_Pin */
  GPIO_InitStruct.Pin = SPI_LED_Pin;
 8000ffe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001002:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001004:	2301      	movs	r3, #1
 8001006:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001008:	2300      	movs	r3, #0
 800100a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800100c:	2302      	movs	r3, #2
 800100e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI_LED_GPIO_Port, &GPIO_InitStruct);
 8001010:	f107 0310 	add.w	r3, r7, #16
 8001014:	4619      	mov	r1, r3
 8001016:	480a      	ldr	r0, [pc, #40]	@ (8001040 <MX_GPIO_Init+0x160>)
 8001018:	f001 f8c6 	bl	80021a8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800101c:	2200      	movs	r2, #0
 800101e:	2100      	movs	r1, #0
 8001020:	2007      	movs	r0, #7
 8001022:	f000 ffd8 	bl	8001fd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001026:	2007      	movs	r0, #7
 8001028:	f000 fff1 	bl	800200e <HAL_NVIC_EnableIRQ>

}
 800102c:	bf00      	nop
 800102e:	3720      	adds	r7, #32
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	40021000 	.word	0x40021000
 8001038:	40011000 	.word	0x40011000
 800103c:	40010800 	.word	0x40010800
 8001040:	40010c00 	.word	0x40010c00
 8001044:	10210000 	.word	0x10210000

08001048 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800104c:	4b12      	ldr	r3, [pc, #72]	@ (8001098 <MX_I2C2_Init+0x50>)
 800104e:	4a13      	ldr	r2, [pc, #76]	@ (800109c <MX_I2C2_Init+0x54>)
 8001050:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8001052:	4b11      	ldr	r3, [pc, #68]	@ (8001098 <MX_I2C2_Init+0x50>)
 8001054:	4a12      	ldr	r2, [pc, #72]	@ (80010a0 <MX_I2C2_Init+0x58>)
 8001056:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001058:	4b0f      	ldr	r3, [pc, #60]	@ (8001098 <MX_I2C2_Init+0x50>)
 800105a:	2200      	movs	r2, #0
 800105c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800105e:	4b0e      	ldr	r3, [pc, #56]	@ (8001098 <MX_I2C2_Init+0x50>)
 8001060:	2200      	movs	r2, #0
 8001062:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001064:	4b0c      	ldr	r3, [pc, #48]	@ (8001098 <MX_I2C2_Init+0x50>)
 8001066:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800106a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800106c:	4b0a      	ldr	r3, [pc, #40]	@ (8001098 <MX_I2C2_Init+0x50>)
 800106e:	2200      	movs	r2, #0
 8001070:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001072:	4b09      	ldr	r3, [pc, #36]	@ (8001098 <MX_I2C2_Init+0x50>)
 8001074:	2200      	movs	r2, #0
 8001076:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001078:	4b07      	ldr	r3, [pc, #28]	@ (8001098 <MX_I2C2_Init+0x50>)
 800107a:	2200      	movs	r2, #0
 800107c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800107e:	4b06      	ldr	r3, [pc, #24]	@ (8001098 <MX_I2C2_Init+0x50>)
 8001080:	2200      	movs	r2, #0
 8001082:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001084:	4804      	ldr	r0, [pc, #16]	@ (8001098 <MX_I2C2_Init+0x50>)
 8001086:	f001 fa73 	bl	8002570 <HAL_I2C_Init>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001090:	f000 f94d 	bl	800132e <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001094:	bf00      	nop
 8001096:	bd80      	pop	{r7, pc}
 8001098:	200000b8 	.word	0x200000b8
 800109c:	40005800 	.word	0x40005800
 80010a0:	00061a80 	.word	0x00061a80

080010a4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b088      	sub	sp, #32
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ac:	f107 0310 	add.w	r3, r7, #16
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]
 80010b4:	605a      	str	r2, [r3, #4]
 80010b6:	609a      	str	r2, [r3, #8]
 80010b8:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C2)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4a16      	ldr	r2, [pc, #88]	@ (8001118 <HAL_I2C_MspInit+0x74>)
 80010c0:	4293      	cmp	r3, r2
 80010c2:	d124      	bne.n	800110e <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010c4:	4b15      	ldr	r3, [pc, #84]	@ (800111c <HAL_I2C_MspInit+0x78>)
 80010c6:	699b      	ldr	r3, [r3, #24]
 80010c8:	4a14      	ldr	r2, [pc, #80]	@ (800111c <HAL_I2C_MspInit+0x78>)
 80010ca:	f043 0308 	orr.w	r3, r3, #8
 80010ce:	6193      	str	r3, [r2, #24]
 80010d0:	4b12      	ldr	r3, [pc, #72]	@ (800111c <HAL_I2C_MspInit+0x78>)
 80010d2:	699b      	ldr	r3, [r3, #24]
 80010d4:	f003 0308 	and.w	r3, r3, #8
 80010d8:	60fb      	str	r3, [r7, #12]
 80010da:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80010dc:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80010e0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010e2:	2312      	movs	r3, #18
 80010e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010e6:	2303      	movs	r3, #3
 80010e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ea:	f107 0310 	add.w	r3, r7, #16
 80010ee:	4619      	mov	r1, r3
 80010f0:	480b      	ldr	r0, [pc, #44]	@ (8001120 <HAL_I2C_MspInit+0x7c>)
 80010f2:	f001 f859 	bl	80021a8 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80010f6:	4b09      	ldr	r3, [pc, #36]	@ (800111c <HAL_I2C_MspInit+0x78>)
 80010f8:	69db      	ldr	r3, [r3, #28]
 80010fa:	4a08      	ldr	r2, [pc, #32]	@ (800111c <HAL_I2C_MspInit+0x78>)
 80010fc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001100:	61d3      	str	r3, [r2, #28]
 8001102:	4b06      	ldr	r3, [pc, #24]	@ (800111c <HAL_I2C_MspInit+0x78>)
 8001104:	69db      	ldr	r3, [r3, #28]
 8001106:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800110a:	60bb      	str	r3, [r7, #8]
 800110c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800110e:	bf00      	nop
 8001110:	3720      	adds	r7, #32
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	40005800 	.word	0x40005800
 800111c:	40021000 	.word	0x40021000
 8001120:	40010c00 	.word	0x40010c00

08001124 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b084      	sub	sp, #16
 8001128:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800112a:	f000 fdf7 	bl	8001d1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800112e:	f000 f8ab 	bl	8001288 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001132:	f7ff fed5 	bl	8000ee0 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001136:	f000 fbb7 	bl	80018a8 <MX_SPI1_Init>
  MX_I2C2_Init();
 800113a:	f7ff ff85 	bl	8001048 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 800113e:	f000 fd49 	bl	8001bd4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  MPU6050_Initialization();
 8001142:	f7ff fcc1 	bl	8000ac8 <MPU6050_Initialization>
  nrf24l01p_tx_init(2500, _250kbps);
 8001146:	2102      	movs	r1, #2
 8001148:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 800114c:	f000 f97a 	bl	8001444 <nrf24l01p_tx_init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  // transmit
	  if(MPU6050_DataReady() == 1)
 8001150:	f7ff feac 	bl	8000eac <MPU6050_DataReady>
 8001154:	4603      	mov	r3, r0
 8001156:	2b01      	cmp	r3, #1
 8001158:	d15f      	bne.n	800121a <main+0xf6>
		{
		    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 800115a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800115e:	4845      	ldr	r0, [pc, #276]	@ (8001274 <main+0x150>)
 8001160:	f001 f9d5 	bl	800250e <HAL_GPIO_TogglePin>
			MPU6050_ProcessData(&MPU6050);
 8001164:	4844      	ldr	r0, [pc, #272]	@ (8001278 <main+0x154>)
 8001166:	f7ff fead 	bl	8000ec4 <MPU6050_ProcessData>
			uint8_t tx_data[NRF24L01P_PAYLOAD_LENGTH] = {MPU6050.acc_x_raw & 0xFF, (MPU6050.acc_x_raw >> 8) & 0xFF, MPU6050.acc_y_raw & 0xFF, (MPU6050.acc_y_raw >> 8) & 0xFF, MPU6050.acc_z_raw & 0xFF, (MPU6050.acc_z_raw >> 8) & 0xFF,
 800116a:	4b43      	ldr	r3, [pc, #268]	@ (8001278 <main+0x154>)
 800116c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001170:	b2db      	uxtb	r3, r3
 8001172:	703b      	strb	r3, [r7, #0]
 8001174:	4b40      	ldr	r3, [pc, #256]	@ (8001278 <main+0x154>)
 8001176:	f9b3 3000 	ldrsh.w	r3, [r3]
 800117a:	121b      	asrs	r3, r3, #8
 800117c:	b21b      	sxth	r3, r3
 800117e:	b2db      	uxtb	r3, r3
 8001180:	707b      	strb	r3, [r7, #1]
 8001182:	4b3d      	ldr	r3, [pc, #244]	@ (8001278 <main+0x154>)
 8001184:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001188:	b2db      	uxtb	r3, r3
 800118a:	70bb      	strb	r3, [r7, #2]
 800118c:	4b3a      	ldr	r3, [pc, #232]	@ (8001278 <main+0x154>)
 800118e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001192:	121b      	asrs	r3, r3, #8
 8001194:	b21b      	sxth	r3, r3
 8001196:	b2db      	uxtb	r3, r3
 8001198:	70fb      	strb	r3, [r7, #3]
 800119a:	4b37      	ldr	r3, [pc, #220]	@ (8001278 <main+0x154>)
 800119c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	713b      	strb	r3, [r7, #4]
 80011a4:	4b34      	ldr	r3, [pc, #208]	@ (8001278 <main+0x154>)
 80011a6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80011aa:	121b      	asrs	r3, r3, #8
 80011ac:	b21b      	sxth	r3, r3
 80011ae:	b2db      	uxtb	r3, r3
 80011b0:	717b      	strb	r3, [r7, #5]
														MPU6050.temperature_raw & 0xFF, (MPU6050.temperature_raw >> 8) & 0xFF,
 80011b2:	4b31      	ldr	r3, [pc, #196]	@ (8001278 <main+0x154>)
 80011b4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
			uint8_t tx_data[NRF24L01P_PAYLOAD_LENGTH] = {MPU6050.acc_x_raw & 0xFF, (MPU6050.acc_x_raw >> 8) & 0xFF, MPU6050.acc_y_raw & 0xFF, (MPU6050.acc_y_raw >> 8) & 0xFF, MPU6050.acc_z_raw & 0xFF, (MPU6050.acc_z_raw >> 8) & 0xFF,
 80011b8:	b2db      	uxtb	r3, r3
 80011ba:	71bb      	strb	r3, [r7, #6]
														MPU6050.temperature_raw & 0xFF, (MPU6050.temperature_raw >> 8) & 0xFF,
 80011bc:	4b2e      	ldr	r3, [pc, #184]	@ (8001278 <main+0x154>)
 80011be:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
			uint8_t tx_data[NRF24L01P_PAYLOAD_LENGTH] = {MPU6050.acc_x_raw & 0xFF, (MPU6050.acc_x_raw >> 8) & 0xFF, MPU6050.acc_y_raw & 0xFF, (MPU6050.acc_y_raw >> 8) & 0xFF, MPU6050.acc_z_raw & 0xFF, (MPU6050.acc_z_raw >> 8) & 0xFF,
 80011c2:	121b      	asrs	r3, r3, #8
 80011c4:	b21b      	sxth	r3, r3
 80011c6:	b2db      	uxtb	r3, r3
 80011c8:	71fb      	strb	r3, [r7, #7]
														MPU6050.gyro_x_raw & 0xFF, (MPU6050.gyro_x_raw >> 8) & 0xFF, MPU6050.gyro_y_raw & 0xFF, (MPU6050.gyro_y_raw >> 8) & 0xFF, MPU6050.gyro_z_raw & 0xFF, (MPU6050.gyro_z_raw >> 8) & 0xFF
 80011ca:	4b2b      	ldr	r3, [pc, #172]	@ (8001278 <main+0x154>)
 80011cc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
			uint8_t tx_data[NRF24L01P_PAYLOAD_LENGTH] = {MPU6050.acc_x_raw & 0xFF, (MPU6050.acc_x_raw >> 8) & 0xFF, MPU6050.acc_y_raw & 0xFF, (MPU6050.acc_y_raw >> 8) & 0xFF, MPU6050.acc_z_raw & 0xFF, (MPU6050.acc_z_raw >> 8) & 0xFF,
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	723b      	strb	r3, [r7, #8]
														MPU6050.gyro_x_raw & 0xFF, (MPU6050.gyro_x_raw >> 8) & 0xFF, MPU6050.gyro_y_raw & 0xFF, (MPU6050.gyro_y_raw >> 8) & 0xFF, MPU6050.gyro_z_raw & 0xFF, (MPU6050.gyro_z_raw >> 8) & 0xFF
 80011d4:	4b28      	ldr	r3, [pc, #160]	@ (8001278 <main+0x154>)
 80011d6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
			uint8_t tx_data[NRF24L01P_PAYLOAD_LENGTH] = {MPU6050.acc_x_raw & 0xFF, (MPU6050.acc_x_raw >> 8) & 0xFF, MPU6050.acc_y_raw & 0xFF, (MPU6050.acc_y_raw >> 8) & 0xFF, MPU6050.acc_z_raw & 0xFF, (MPU6050.acc_z_raw >> 8) & 0xFF,
 80011da:	121b      	asrs	r3, r3, #8
 80011dc:	b21b      	sxth	r3, r3
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	727b      	strb	r3, [r7, #9]
														MPU6050.gyro_x_raw & 0xFF, (MPU6050.gyro_x_raw >> 8) & 0xFF, MPU6050.gyro_y_raw & 0xFF, (MPU6050.gyro_y_raw >> 8) & 0xFF, MPU6050.gyro_z_raw & 0xFF, (MPU6050.gyro_z_raw >> 8) & 0xFF
 80011e2:	4b25      	ldr	r3, [pc, #148]	@ (8001278 <main+0x154>)
 80011e4:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
			uint8_t tx_data[NRF24L01P_PAYLOAD_LENGTH] = {MPU6050.acc_x_raw & 0xFF, (MPU6050.acc_x_raw >> 8) & 0xFF, MPU6050.acc_y_raw & 0xFF, (MPU6050.acc_y_raw >> 8) & 0xFF, MPU6050.acc_z_raw & 0xFF, (MPU6050.acc_z_raw >> 8) & 0xFF,
 80011e8:	b2db      	uxtb	r3, r3
 80011ea:	72bb      	strb	r3, [r7, #10]
														MPU6050.gyro_x_raw & 0xFF, (MPU6050.gyro_x_raw >> 8) & 0xFF, MPU6050.gyro_y_raw & 0xFF, (MPU6050.gyro_y_raw >> 8) & 0xFF, MPU6050.gyro_z_raw & 0xFF, (MPU6050.gyro_z_raw >> 8) & 0xFF
 80011ec:	4b22      	ldr	r3, [pc, #136]	@ (8001278 <main+0x154>)
 80011ee:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
			uint8_t tx_data[NRF24L01P_PAYLOAD_LENGTH] = {MPU6050.acc_x_raw & 0xFF, (MPU6050.acc_x_raw >> 8) & 0xFF, MPU6050.acc_y_raw & 0xFF, (MPU6050.acc_y_raw >> 8) & 0xFF, MPU6050.acc_z_raw & 0xFF, (MPU6050.acc_z_raw >> 8) & 0xFF,
 80011f2:	121b      	asrs	r3, r3, #8
 80011f4:	b21b      	sxth	r3, r3
 80011f6:	b2db      	uxtb	r3, r3
 80011f8:	72fb      	strb	r3, [r7, #11]
														MPU6050.gyro_x_raw & 0xFF, (MPU6050.gyro_x_raw >> 8) & 0xFF, MPU6050.gyro_y_raw & 0xFF, (MPU6050.gyro_y_raw >> 8) & 0xFF, MPU6050.gyro_z_raw & 0xFF, (MPU6050.gyro_z_raw >> 8) & 0xFF
 80011fa:	4b1f      	ldr	r3, [pc, #124]	@ (8001278 <main+0x154>)
 80011fc:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
			uint8_t tx_data[NRF24L01P_PAYLOAD_LENGTH] = {MPU6050.acc_x_raw & 0xFF, (MPU6050.acc_x_raw >> 8) & 0xFF, MPU6050.acc_y_raw & 0xFF, (MPU6050.acc_y_raw >> 8) & 0xFF, MPU6050.acc_z_raw & 0xFF, (MPU6050.acc_z_raw >> 8) & 0xFF,
 8001200:	b2db      	uxtb	r3, r3
 8001202:	733b      	strb	r3, [r7, #12]
														MPU6050.gyro_x_raw & 0xFF, (MPU6050.gyro_x_raw >> 8) & 0xFF, MPU6050.gyro_y_raw & 0xFF, (MPU6050.gyro_y_raw >> 8) & 0xFF, MPU6050.gyro_z_raw & 0xFF, (MPU6050.gyro_z_raw >> 8) & 0xFF
 8001204:	4b1c      	ldr	r3, [pc, #112]	@ (8001278 <main+0x154>)
 8001206:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
			uint8_t tx_data[NRF24L01P_PAYLOAD_LENGTH] = {MPU6050.acc_x_raw & 0xFF, (MPU6050.acc_x_raw >> 8) & 0xFF, MPU6050.acc_y_raw & 0xFF, (MPU6050.acc_y_raw >> 8) & 0xFF, MPU6050.acc_z_raw & 0xFF, (MPU6050.acc_z_raw >> 8) & 0xFF,
 800120a:	121b      	asrs	r3, r3, #8
 800120c:	b21b      	sxth	r3, r3
 800120e:	b2db      	uxtb	r3, r3
 8001210:	737b      	strb	r3, [r7, #13]
													   };
			nrf24l01p_tx_transmit(tx_data);
 8001212:	463b      	mov	r3, r7
 8001214:	4618      	mov	r0, r3
 8001216:	f000 f940 	bl	800149a <nrf24l01p_tx_transmit>
//		  // for serial monitor
//		HAL_UART_Transmit_IT(&huart1, tx_data, 14);
//		HAL_Delay(100);

	  // LED loop always runs
	  ledTimer ++;
 800121a:	4b18      	ldr	r3, [pc, #96]	@ (800127c <main+0x158>)
 800121c:	881b      	ldrh	r3, [r3, #0]
 800121e:	3301      	adds	r3, #1
 8001220:	b29a      	uxth	r2, r3
 8001222:	4b16      	ldr	r3, [pc, #88]	@ (800127c <main+0x158>)
 8001224:	801a      	strh	r2, [r3, #0]
	  if(ledTimer > 200){
 8001226:	4b15      	ldr	r3, [pc, #84]	@ (800127c <main+0x158>)
 8001228:	881b      	ldrh	r3, [r3, #0]
 800122a:	2bc8      	cmp	r3, #200	@ 0xc8
 800122c:	d91d      	bls.n	800126a <main+0x146>
		  ledTimer = 0;
 800122e:	4b13      	ldr	r3, [pc, #76]	@ (800127c <main+0x158>)
 8001230:	2200      	movs	r2, #0
 8001232:	801a      	strh	r2, [r3, #0]
		  led = !led;
 8001234:	4b12      	ldr	r3, [pc, #72]	@ (8001280 <main+0x15c>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	2b00      	cmp	r3, #0
 800123a:	bf0c      	ite	eq
 800123c:	2301      	moveq	r3, #1
 800123e:	2300      	movne	r3, #0
 8001240:	b2db      	uxtb	r3, r3
 8001242:	461a      	mov	r2, r3
 8001244:	4b0e      	ldr	r3, [pc, #56]	@ (8001280 <main+0x15c>)
 8001246:	701a      	strb	r2, [r3, #0]
		  if(led){
 8001248:	4b0d      	ldr	r3, [pc, #52]	@ (8001280 <main+0x15c>)
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d006      	beq.n	800125e <main+0x13a>
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001250:	2201      	movs	r2, #1
 8001252:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001256:	480b      	ldr	r0, [pc, #44]	@ (8001284 <main+0x160>)
 8001258:	f001 f941 	bl	80024de <HAL_GPIO_WritePin>
 800125c:	e005      	b.n	800126a <main+0x146>
		  }else{
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800125e:	2200      	movs	r2, #0
 8001260:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001264:	4807      	ldr	r0, [pc, #28]	@ (8001284 <main+0x160>)
 8001266:	f001 f93a 	bl	80024de <HAL_GPIO_WritePin>
		  }
	  }

	  HAL_Delay(1);
 800126a:	2001      	movs	r0, #1
 800126c:	f000 fdb8 	bl	8001de0 <HAL_Delay>
	  if(MPU6050_DataReady() == 1)
 8001270:	e76e      	b.n	8001150 <main+0x2c>
 8001272:	bf00      	nop
 8001274:	40010c00 	.word	0x40010c00
 8001278:	20000084 	.word	0x20000084
 800127c:	2000010e 	.word	0x2000010e
 8001280:	2000010c 	.word	0x2000010c
 8001284:	40011000 	.word	0x40011000

08001288 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b090      	sub	sp, #64	@ 0x40
 800128c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800128e:	f107 0318 	add.w	r3, r7, #24
 8001292:	2228      	movs	r2, #40	@ 0x28
 8001294:	2100      	movs	r1, #0
 8001296:	4618      	mov	r0, r3
 8001298:	f004 fab2 	bl	8005800 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800129c:	1d3b      	adds	r3, r7, #4
 800129e:	2200      	movs	r2, #0
 80012a0:	601a      	str	r2, [r3, #0]
 80012a2:	605a      	str	r2, [r3, #4]
 80012a4:	609a      	str	r2, [r3, #8]
 80012a6:	60da      	str	r2, [r3, #12]
 80012a8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012aa:	2301      	movs	r3, #1
 80012ac:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012ae:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80012b2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80012b4:	2300      	movs	r3, #0
 80012b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012b8:	2301      	movs	r3, #1
 80012ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012bc:	2302      	movs	r3, #2
 80012be:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012c0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80012c4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80012c6:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80012ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012cc:	f107 0318 	add.w	r3, r7, #24
 80012d0:	4618      	mov	r0, r3
 80012d2:	f002 f9b3 	bl	800363c <HAL_RCC_OscConfig>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80012dc:	f000 f827 	bl	800132e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012e0:	230f      	movs	r3, #15
 80012e2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012e4:	2302      	movs	r3, #2
 80012e6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012e8:	2300      	movs	r3, #0
 80012ea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012ec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80012f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012f2:	2300      	movs	r3, #0
 80012f4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80012f6:	1d3b      	adds	r3, r7, #4
 80012f8:	2102      	movs	r1, #2
 80012fa:	4618      	mov	r0, r3
 80012fc:	f002 fc20 	bl	8003b40 <HAL_RCC_ClockConfig>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001306:	f000 f812 	bl	800132e <Error_Handler>
  }
}
 800130a:	bf00      	nop
 800130c:	3740      	adds	r7, #64	@ 0x40
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}

08001312 <HAL_GPIO_EXTI_Callback>:
//		  HAL_UART_Receive_IT(&huart1, rx_buff, 1);
//		  HAL_UART_Transmit_IT(&huart1, rx_buff, 1);
//	}

	void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
	{
 8001312:	b580      	push	{r7, lr}
 8001314:	b082      	sub	sp, #8
 8001316:	af00      	add	r7, sp, #0
 8001318:	4603      	mov	r3, r0
 800131a:	80fb      	strh	r3, [r7, #6]

		if(GPIO_Pin == NRF24L01P_IRQ_PIN_NUMBER) {
 800131c:	88fb      	ldrh	r3, [r7, #6]
 800131e:	2b02      	cmp	r3, #2
 8001320:	d101      	bne.n	8001326 <HAL_GPIO_EXTI_Callback+0x14>
//			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
			nrf24l01p_tx_irq(); // clear interrupt flag
 8001322:	f000 f8c5 	bl	80014b0 <nrf24l01p_tx_irq>
//			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
//			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
		}


	}
 8001326:	bf00      	nop
 8001328:	3708      	adds	r7, #8
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}

0800132e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800132e:	b480      	push	{r7}
 8001330:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001332:	b672      	cpsid	i
}
 8001334:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001336:	bf00      	nop
 8001338:	e7fd      	b.n	8001336 <Error_Handler+0x8>
	...

0800133c <cs_high>:

#include "nrf24l01p.h"


static void cs_high()
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_SPI_CS_PIN_PORT, NRF24L01P_SPI_CS_PIN_NUMBER, GPIO_PIN_SET);
 8001340:	2201      	movs	r2, #1
 8001342:	2110      	movs	r1, #16
 8001344:	4802      	ldr	r0, [pc, #8]	@ (8001350 <cs_high+0x14>)
 8001346:	f001 f8ca 	bl	80024de <HAL_GPIO_WritePin>
}
 800134a:	bf00      	nop
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	40010800 	.word	0x40010800

08001354 <cs_low>:

static void cs_low()
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_SPI_CS_PIN_PORT, NRF24L01P_SPI_CS_PIN_NUMBER, GPIO_PIN_RESET);
 8001358:	2200      	movs	r2, #0
 800135a:	2110      	movs	r1, #16
 800135c:	4802      	ldr	r0, [pc, #8]	@ (8001368 <cs_low+0x14>)
 800135e:	f001 f8be 	bl	80024de <HAL_GPIO_WritePin>
}
 8001362:	bf00      	nop
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	40010800 	.word	0x40010800

0800136c <ce_high>:

static void ce_high()
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_CE_PIN_PORT, NRF24L01P_CE_PIN_NUMBER, GPIO_PIN_SET);
 8001370:	2201      	movs	r2, #1
 8001372:	2101      	movs	r1, #1
 8001374:	4802      	ldr	r0, [pc, #8]	@ (8001380 <ce_high+0x14>)
 8001376:	f001 f8b2 	bl	80024de <HAL_GPIO_WritePin>
}
 800137a:	bf00      	nop
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	40010c00 	.word	0x40010c00

08001384 <ce_low>:

static void ce_low()
{
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_CE_PIN_PORT, NRF24L01P_CE_PIN_NUMBER, GPIO_PIN_RESET);
 8001388:	2200      	movs	r2, #0
 800138a:	2101      	movs	r1, #1
 800138c:	4802      	ldr	r0, [pc, #8]	@ (8001398 <ce_low+0x14>)
 800138e:	f001 f8a6 	bl	80024de <HAL_GPIO_WritePin>
}
 8001392:	bf00      	nop
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	40010c00 	.word	0x40010c00

0800139c <read_register>:

static uint8_t read_register(uint8_t reg)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b086      	sub	sp, #24
 80013a0:	af02      	add	r7, sp, #8
 80013a2:	4603      	mov	r3, r0
 80013a4:	71fb      	strb	r3, [r7, #7]
    uint8_t command = NRF24L01P_CMD_R_REGISTER | reg;
 80013a6:	79fb      	ldrb	r3, [r7, #7]
 80013a8:	73fb      	strb	r3, [r7, #15]
    uint8_t status;
    uint8_t read_val;

    cs_low();
 80013aa:	f7ff ffd3 	bl	8001354 <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 80013ae:	f107 020e 	add.w	r2, r7, #14
 80013b2:	f107 010f 	add.w	r1, r7, #15
 80013b6:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80013ba:	9300      	str	r3, [sp, #0]
 80013bc:	2301      	movs	r3, #1
 80013be:	4809      	ldr	r0, [pc, #36]	@ (80013e4 <read_register+0x48>)
 80013c0:	f003 f82d 	bl	800441e <HAL_SPI_TransmitReceive>
    HAL_SPI_Receive(NRF24L01P_SPI, &read_val, 1, 2000);
 80013c4:	f107 010d 	add.w	r1, r7, #13
 80013c8:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80013cc:	2201      	movs	r2, #1
 80013ce:	4805      	ldr	r0, [pc, #20]	@ (80013e4 <read_register+0x48>)
 80013d0:	f002 ff0c 	bl	80041ec <HAL_SPI_Receive>
    cs_high();
 80013d4:	f7ff ffb2 	bl	800133c <cs_high>

    return read_val;
 80013d8:	7b7b      	ldrb	r3, [r7, #13]
}
 80013da:	4618      	mov	r0, r3
 80013dc:	3710      	adds	r7, #16
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	20000110 	.word	0x20000110

080013e8 <write_register>:

static uint8_t write_register(uint8_t reg, uint8_t value)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b086      	sub	sp, #24
 80013ec:	af02      	add	r7, sp, #8
 80013ee:	4603      	mov	r3, r0
 80013f0:	460a      	mov	r2, r1
 80013f2:	71fb      	strb	r3, [r7, #7]
 80013f4:	4613      	mov	r3, r2
 80013f6:	71bb      	strb	r3, [r7, #6]
    uint8_t command = NRF24L01P_CMD_W_REGISTER | reg;
 80013f8:	79fb      	ldrb	r3, [r7, #7]
 80013fa:	f043 0320 	orr.w	r3, r3, #32
 80013fe:	b2db      	uxtb	r3, r3
 8001400:	73fb      	strb	r3, [r7, #15]
    uint8_t status;
    uint8_t write_val = value;
 8001402:	79bb      	ldrb	r3, [r7, #6]
 8001404:	737b      	strb	r3, [r7, #13]

    cs_low();
 8001406:	f7ff ffa5 	bl	8001354 <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 800140a:	f107 020e 	add.w	r2, r7, #14
 800140e:	f107 010f 	add.w	r1, r7, #15
 8001412:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001416:	9300      	str	r3, [sp, #0]
 8001418:	2301      	movs	r3, #1
 800141a:	4809      	ldr	r0, [pc, #36]	@ (8001440 <write_register+0x58>)
 800141c:	f002 ffff 	bl	800441e <HAL_SPI_TransmitReceive>
    HAL_SPI_Transmit(NRF24L01P_SPI, &write_val, 1, 2000);
 8001420:	f107 010d 	add.w	r1, r7, #13
 8001424:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001428:	2201      	movs	r2, #1
 800142a:	4805      	ldr	r0, [pc, #20]	@ (8001440 <write_register+0x58>)
 800142c:	f002 fd9a 	bl	8003f64 <HAL_SPI_Transmit>
    cs_high();
 8001430:	f7ff ff84 	bl	800133c <cs_high>

    return write_val;
 8001434:	7b7b      	ldrb	r3, [r7, #13]
}
 8001436:	4618      	mov	r0, r3
 8001438:	3710      	adds	r7, #16
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	20000110 	.word	0x20000110

08001444 <nrf24l01p_tx_init>:

    ce_high();
}

void nrf24l01p_tx_init(channel MHz, air_data_rate bps)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	4603      	mov	r3, r0
 800144c:	460a      	mov	r2, r1
 800144e:	80fb      	strh	r3, [r7, #6]
 8001450:	4613      	mov	r3, r2
 8001452:	717b      	strb	r3, [r7, #5]
    nrf24l01p_reset();
 8001454:	f000 f843 	bl	80014de <nrf24l01p_reset>

    nrf24l01p_ptx_mode();
 8001458:	f000 f895 	bl	8001586 <nrf24l01p_ptx_mode>
    nrf24l01p_power_up();
 800145c:	f000 f93e 	bl	80016dc <nrf24l01p_power_up>

    nrf24l01p_set_rf_channel(MHz);
 8001460:	88fb      	ldrh	r3, [r7, #6]
 8001462:	4618      	mov	r0, r3
 8001464:	f000 f9c6 	bl	80017f4 <nrf24l01p_set_rf_channel>
    nrf24l01p_set_rf_air_data_rate(bps);
 8001468:	797b      	ldrb	r3, [r7, #5]
 800146a:	4618      	mov	r0, r3
 800146c:	f000 f9f3 	bl	8001856 <nrf24l01p_set_rf_air_data_rate>
    nrf24l01p_set_rf_tx_output_power(_0dBm);
 8001470:	2003      	movs	r0, #3
 8001472:	f000 f9d2 	bl	800181a <nrf24l01p_set_rf_tx_output_power>

    nrf24l01p_set_crc_length(1);
 8001476:	2001      	movs	r0, #1
 8001478:	f000 f945 	bl	8001706 <nrf24l01p_set_crc_length>
    nrf24l01p_set_address_widths(5);
 800147c:	2005      	movs	r0, #5
 800147e:	f000 f965 	bl	800174c <nrf24l01p_set_address_widths>

    nrf24l01p_auto_retransmit_count(3);
 8001482:	2003      	movs	r0, #3
 8001484:	f000 f972 	bl	800176c <nrf24l01p_auto_retransmit_count>
    nrf24l01p_auto_retransmit_delay(250);
 8001488:	20fa      	movs	r0, #250	@ 0xfa
 800148a:	f000 f98b 	bl	80017a4 <nrf24l01p_auto_retransmit_delay>

    ce_high();
 800148e:	f7ff ff6d 	bl	800136c <ce_high>
}
 8001492:	bf00      	nop
 8001494:	3708      	adds	r7, #8
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}

0800149a <nrf24l01p_tx_transmit>:

//    HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
}

void nrf24l01p_tx_transmit(uint8_t* tx_payload)
{
 800149a:	b580      	push	{r7, lr}
 800149c:	b082      	sub	sp, #8
 800149e:	af00      	add	r7, sp, #0
 80014a0:	6078      	str	r0, [r7, #4]
    nrf24l01p_write_tx_fifo(tx_payload);
 80014a2:	6878      	ldr	r0, [r7, #4]
 80014a4:	f000 f884 	bl	80015b0 <nrf24l01p_write_tx_fifo>
}
 80014a8:	bf00      	nop
 80014aa:	3708      	adds	r7, #8
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}

080014b0 <nrf24l01p_tx_irq>:

void nrf24l01p_tx_irq()
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
    uint8_t tx_ds = nrf24l01p_get_status();
 80014b6:	f000 f8cf 	bl	8001658 <nrf24l01p_get_status>
 80014ba:	4603      	mov	r3, r0
 80014bc:	71fb      	strb	r3, [r7, #7]
    tx_ds &= 0x20;
 80014be:	79fb      	ldrb	r3, [r7, #7]
 80014c0:	f003 0320 	and.w	r3, r3, #32
 80014c4:	71fb      	strb	r3, [r7, #7]

    if(tx_ds)
 80014c6:	79fb      	ldrb	r3, [r7, #7]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d002      	beq.n	80014d2 <nrf24l01p_tx_irq+0x22>
    {
        // TX_DS
//        HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
        nrf24l01p_clear_tx_ds();
 80014cc:	f000 f8de 	bl	800168c <nrf24l01p_clear_tx_ds>
    {
        // MAX_RT
//        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
        nrf24l01p_clear_max_rt();
    }
}
 80014d0:	e001      	b.n	80014d6 <nrf24l01p_tx_irq+0x26>
        nrf24l01p_clear_max_rt();
 80014d2:	f000 f8ef 	bl	80016b4 <nrf24l01p_clear_max_rt>
}
 80014d6:	bf00      	nop
 80014d8:	3708      	adds	r7, #8
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}

080014de <nrf24l01p_reset>:

/* nRF24L01+ Sub Functions */
void nrf24l01p_reset()
{
 80014de:	b580      	push	{r7, lr}
 80014e0:	af00      	add	r7, sp, #0
    // Reset pins
    cs_high();
 80014e2:	f7ff ff2b 	bl	800133c <cs_high>
    ce_low();
 80014e6:	f7ff ff4d 	bl	8001384 <ce_low>

    // Reset registers
    write_register(NRF24L01P_REG_CONFIG, 0x08);
 80014ea:	2108      	movs	r1, #8
 80014ec:	2000      	movs	r0, #0
 80014ee:	f7ff ff7b 	bl	80013e8 <write_register>
    write_register(NRF24L01P_REG_EN_AA, 0x3F);
 80014f2:	213f      	movs	r1, #63	@ 0x3f
 80014f4:	2001      	movs	r0, #1
 80014f6:	f7ff ff77 	bl	80013e8 <write_register>
    write_register(NRF24L01P_REG_EN_RXADDR, 0x03);
 80014fa:	2103      	movs	r1, #3
 80014fc:	2002      	movs	r0, #2
 80014fe:	f7ff ff73 	bl	80013e8 <write_register>
    write_register(NRF24L01P_REG_SETUP_AW, 0x03);
 8001502:	2103      	movs	r1, #3
 8001504:	2003      	movs	r0, #3
 8001506:	f7ff ff6f 	bl	80013e8 <write_register>
    write_register(NRF24L01P_REG_SETUP_RETR, 0x03);
 800150a:	2103      	movs	r1, #3
 800150c:	2004      	movs	r0, #4
 800150e:	f7ff ff6b 	bl	80013e8 <write_register>
    write_register(NRF24L01P_REG_RF_CH, 0x02);
 8001512:	2102      	movs	r1, #2
 8001514:	2005      	movs	r0, #5
 8001516:	f7ff ff67 	bl	80013e8 <write_register>
    write_register(NRF24L01P_REG_RF_SETUP, 0x07);
 800151a:	2107      	movs	r1, #7
 800151c:	2006      	movs	r0, #6
 800151e:	f7ff ff63 	bl	80013e8 <write_register>
    write_register(NRF24L01P_REG_STATUS, 0x7E);
 8001522:	217e      	movs	r1, #126	@ 0x7e
 8001524:	2007      	movs	r0, #7
 8001526:	f7ff ff5f 	bl	80013e8 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P0, 0x00);
 800152a:	2100      	movs	r1, #0
 800152c:	2011      	movs	r0, #17
 800152e:	f7ff ff5b 	bl	80013e8 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P0, 0x00);
 8001532:	2100      	movs	r1, #0
 8001534:	2011      	movs	r0, #17
 8001536:	f7ff ff57 	bl	80013e8 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P1, 0x00);
 800153a:	2100      	movs	r1, #0
 800153c:	2012      	movs	r0, #18
 800153e:	f7ff ff53 	bl	80013e8 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P2, 0x00);
 8001542:	2100      	movs	r1, #0
 8001544:	2013      	movs	r0, #19
 8001546:	f7ff ff4f 	bl	80013e8 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P3, 0x00);
 800154a:	2100      	movs	r1, #0
 800154c:	2014      	movs	r0, #20
 800154e:	f7ff ff4b 	bl	80013e8 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P4, 0x00);
 8001552:	2100      	movs	r1, #0
 8001554:	2015      	movs	r0, #21
 8001556:	f7ff ff47 	bl	80013e8 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P5, 0x00);
 800155a:	2100      	movs	r1, #0
 800155c:	2016      	movs	r0, #22
 800155e:	f7ff ff43 	bl	80013e8 <write_register>
    write_register(NRF24L01P_REG_FIFO_STATUS, 0x11);
 8001562:	2111      	movs	r1, #17
 8001564:	2017      	movs	r0, #23
 8001566:	f7ff ff3f 	bl	80013e8 <write_register>
    write_register(NRF24L01P_REG_DYNPD, 0x00);
 800156a:	2100      	movs	r1, #0
 800156c:	201c      	movs	r0, #28
 800156e:	f7ff ff3b 	bl	80013e8 <write_register>
    write_register(NRF24L01P_REG_FEATURE, 0x00);
 8001572:	2100      	movs	r1, #0
 8001574:	201d      	movs	r0, #29
 8001576:	f7ff ff37 	bl	80013e8 <write_register>

    // Reset FIFO
    nrf24l01p_flush_rx_fifo();
 800157a:	f000 f83d 	bl	80015f8 <nrf24l01p_flush_rx_fifo>
    nrf24l01p_flush_tx_fifo();
 800157e:	f000 f853 	bl	8001628 <nrf24l01p_flush_tx_fifo>
}
 8001582:	bf00      	nop
 8001584:	bd80      	pop	{r7, pc}

08001586 <nrf24l01p_ptx_mode>:

    write_register(NRF24L01P_REG_CONFIG, new_config);
}

void nrf24l01p_ptx_mode()
{
 8001586:	b580      	push	{r7, lr}
 8001588:	b082      	sub	sp, #8
 800158a:	af00      	add	r7, sp, #0
    uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 800158c:	2000      	movs	r0, #0
 800158e:	f7ff ff05 	bl	800139c <read_register>
 8001592:	4603      	mov	r3, r0
 8001594:	71fb      	strb	r3, [r7, #7]
    new_config &= 0xFE;
 8001596:	79fb      	ldrb	r3, [r7, #7]
 8001598:	f023 0301 	bic.w	r3, r3, #1
 800159c:	71fb      	strb	r3, [r7, #7]

    write_register(NRF24L01P_REG_CONFIG, new_config);
 800159e:	79fb      	ldrb	r3, [r7, #7]
 80015a0:	4619      	mov	r1, r3
 80015a2:	2000      	movs	r0, #0
 80015a4:	f7ff ff20 	bl	80013e8 <write_register>
}
 80015a8:	bf00      	nop
 80015aa:	3708      	adds	r7, #8
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}

080015b0 <nrf24l01p_write_tx_fifo>:

    return status;
}

uint8_t nrf24l01p_write_tx_fifo(uint8_t* tx_payload)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b086      	sub	sp, #24
 80015b4:	af02      	add	r7, sp, #8
 80015b6:	6078      	str	r0, [r7, #4]
    uint8_t command = NRF24L01P_CMD_W_TX_PAYLOAD;
 80015b8:	23a0      	movs	r3, #160	@ 0xa0
 80015ba:	73fb      	strb	r3, [r7, #15]
    uint8_t status;

    cs_low();
 80015bc:	f7ff feca 	bl	8001354 <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 80015c0:	f107 020e 	add.w	r2, r7, #14
 80015c4:	f107 010f 	add.w	r1, r7, #15
 80015c8:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80015cc:	9300      	str	r3, [sp, #0]
 80015ce:	2301      	movs	r3, #1
 80015d0:	4808      	ldr	r0, [pc, #32]	@ (80015f4 <nrf24l01p_write_tx_fifo+0x44>)
 80015d2:	f002 ff24 	bl	800441e <HAL_SPI_TransmitReceive>
    HAL_SPI_Transmit(NRF24L01P_SPI, tx_payload, NRF24L01P_PAYLOAD_LENGTH, 2000);
 80015d6:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80015da:	220e      	movs	r2, #14
 80015dc:	6879      	ldr	r1, [r7, #4]
 80015de:	4805      	ldr	r0, [pc, #20]	@ (80015f4 <nrf24l01p_write_tx_fifo+0x44>)
 80015e0:	f002 fcc0 	bl	8003f64 <HAL_SPI_Transmit>
    cs_high();
 80015e4:	f7ff feaa 	bl	800133c <cs_high>

    return status;
 80015e8:	7bbb      	ldrb	r3, [r7, #14]
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3710      	adds	r7, #16
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	20000110 	.word	0x20000110

080015f8 <nrf24l01p_flush_rx_fifo>:

void nrf24l01p_flush_rx_fifo()
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b084      	sub	sp, #16
 80015fc:	af02      	add	r7, sp, #8
    uint8_t command = NRF24L01P_CMD_FLUSH_RX;
 80015fe:	23e2      	movs	r3, #226	@ 0xe2
 8001600:	71fb      	strb	r3, [r7, #7]
    uint8_t status;

    cs_low();
 8001602:	f7ff fea7 	bl	8001354 <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8001606:	1dba      	adds	r2, r7, #6
 8001608:	1df9      	adds	r1, r7, #7
 800160a:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800160e:	9300      	str	r3, [sp, #0]
 8001610:	2301      	movs	r3, #1
 8001612:	4804      	ldr	r0, [pc, #16]	@ (8001624 <nrf24l01p_flush_rx_fifo+0x2c>)
 8001614:	f002 ff03 	bl	800441e <HAL_SPI_TransmitReceive>
    cs_high();
 8001618:	f7ff fe90 	bl	800133c <cs_high>
}
 800161c:	bf00      	nop
 800161e:	3708      	adds	r7, #8
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	20000110 	.word	0x20000110

08001628 <nrf24l01p_flush_tx_fifo>:

void nrf24l01p_flush_tx_fifo()
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b084      	sub	sp, #16
 800162c:	af02      	add	r7, sp, #8
    uint8_t command = NRF24L01P_CMD_FLUSH_TX;
 800162e:	23e1      	movs	r3, #225	@ 0xe1
 8001630:	71fb      	strb	r3, [r7, #7]
    uint8_t status;

    cs_low();
 8001632:	f7ff fe8f 	bl	8001354 <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8001636:	1dba      	adds	r2, r7, #6
 8001638:	1df9      	adds	r1, r7, #7
 800163a:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800163e:	9300      	str	r3, [sp, #0]
 8001640:	2301      	movs	r3, #1
 8001642:	4804      	ldr	r0, [pc, #16]	@ (8001654 <nrf24l01p_flush_tx_fifo+0x2c>)
 8001644:	f002 feeb 	bl	800441e <HAL_SPI_TransmitReceive>
    cs_high();
 8001648:	f7ff fe78 	bl	800133c <cs_high>
}
 800164c:	bf00      	nop
 800164e:	3708      	adds	r7, #8
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	20000110 	.word	0x20000110

08001658 <nrf24l01p_get_status>:

uint8_t nrf24l01p_get_status()
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b084      	sub	sp, #16
 800165c:	af02      	add	r7, sp, #8
    uint8_t command = NRF24L01P_CMD_NOP;
 800165e:	23ff      	movs	r3, #255	@ 0xff
 8001660:	71fb      	strb	r3, [r7, #7]
    uint8_t status;

    cs_low();
 8001662:	f7ff fe77 	bl	8001354 <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8001666:	1dba      	adds	r2, r7, #6
 8001668:	1df9      	adds	r1, r7, #7
 800166a:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800166e:	9300      	str	r3, [sp, #0]
 8001670:	2301      	movs	r3, #1
 8001672:	4805      	ldr	r0, [pc, #20]	@ (8001688 <nrf24l01p_get_status+0x30>)
 8001674:	f002 fed3 	bl	800441e <HAL_SPI_TransmitReceive>
    cs_high();
 8001678:	f7ff fe60 	bl	800133c <cs_high>

    return status;
 800167c:	79bb      	ldrb	r3, [r7, #6]
}
 800167e:	4618      	mov	r0, r3
 8001680:	3708      	adds	r7, #8
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	20000110 	.word	0x20000110

0800168c <nrf24l01p_clear_tx_ds>:

    write_register(NRF24L01P_REG_STATUS, new_status);
}

void nrf24l01p_clear_tx_ds()
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
    uint8_t new_status = nrf24l01p_get_status();
 8001692:	f7ff ffe1 	bl	8001658 <nrf24l01p_get_status>
 8001696:	4603      	mov	r3, r0
 8001698:	71fb      	strb	r3, [r7, #7]
    new_status |= 0x20;
 800169a:	79fb      	ldrb	r3, [r7, #7]
 800169c:	f043 0320 	orr.w	r3, r3, #32
 80016a0:	71fb      	strb	r3, [r7, #7]

    write_register(NRF24L01P_REG_STATUS, new_status);
 80016a2:	79fb      	ldrb	r3, [r7, #7]
 80016a4:	4619      	mov	r1, r3
 80016a6:	2007      	movs	r0, #7
 80016a8:	f7ff fe9e 	bl	80013e8 <write_register>
}
 80016ac:	bf00      	nop
 80016ae:	3708      	adds	r7, #8
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}

080016b4 <nrf24l01p_clear_max_rt>:

void nrf24l01p_clear_max_rt()
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
    uint8_t new_status = nrf24l01p_get_status();
 80016ba:	f7ff ffcd 	bl	8001658 <nrf24l01p_get_status>
 80016be:	4603      	mov	r3, r0
 80016c0:	71fb      	strb	r3, [r7, #7]
    new_status |= 0x10;
 80016c2:	79fb      	ldrb	r3, [r7, #7]
 80016c4:	f043 0310 	orr.w	r3, r3, #16
 80016c8:	71fb      	strb	r3, [r7, #7]

    write_register(NRF24L01P_REG_STATUS, new_status);
 80016ca:	79fb      	ldrb	r3, [r7, #7]
 80016cc:	4619      	mov	r1, r3
 80016ce:	2007      	movs	r0, #7
 80016d0:	f7ff fe8a 	bl	80013e8 <write_register>
}
 80016d4:	bf00      	nop
 80016d6:	3708      	adds	r7, #8
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}

080016dc <nrf24l01p_power_up>:

void nrf24l01p_power_up()
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
    uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 80016e2:	2000      	movs	r0, #0
 80016e4:	f7ff fe5a 	bl	800139c <read_register>
 80016e8:	4603      	mov	r3, r0
 80016ea:	71fb      	strb	r3, [r7, #7]
    new_config |= 1 << 1;
 80016ec:	79fb      	ldrb	r3, [r7, #7]
 80016ee:	f043 0302 	orr.w	r3, r3, #2
 80016f2:	71fb      	strb	r3, [r7, #7]

    write_register(NRF24L01P_REG_CONFIG, new_config);
 80016f4:	79fb      	ldrb	r3, [r7, #7]
 80016f6:	4619      	mov	r1, r3
 80016f8:	2000      	movs	r0, #0
 80016fa:	f7ff fe75 	bl	80013e8 <write_register>
}
 80016fe:	bf00      	nop
 8001700:	3708      	adds	r7, #8
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}

08001706 <nrf24l01p_set_crc_length>:

    write_register(NRF24L01P_REG_CONFIG, new_config);
}

void nrf24l01p_set_crc_length(length bytes)
{
 8001706:	b580      	push	{r7, lr}
 8001708:	b084      	sub	sp, #16
 800170a:	af00      	add	r7, sp, #0
 800170c:	4603      	mov	r3, r0
 800170e:	71fb      	strb	r3, [r7, #7]
    uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 8001710:	2000      	movs	r0, #0
 8001712:	f7ff fe43 	bl	800139c <read_register>
 8001716:	4603      	mov	r3, r0
 8001718:	73fb      	strb	r3, [r7, #15]

    switch(bytes)
 800171a:	79fb      	ldrb	r3, [r7, #7]
 800171c:	2b01      	cmp	r3, #1
 800171e:	d002      	beq.n	8001726 <nrf24l01p_set_crc_length+0x20>
 8001720:	2b02      	cmp	r3, #2
 8001722:	d005      	beq.n	8001730 <nrf24l01p_set_crc_length+0x2a>
 8001724:	e009      	b.n	800173a <nrf24l01p_set_crc_length+0x34>
    {
        // CRCO bit in CONFIG resiger set 0
        case 1:
            new_config &= 0xFB;
 8001726:	7bfb      	ldrb	r3, [r7, #15]
 8001728:	f023 0304 	bic.w	r3, r3, #4
 800172c:	73fb      	strb	r3, [r7, #15]
            break;
 800172e:	e004      	b.n	800173a <nrf24l01p_set_crc_length+0x34>
        // CRCO bit in CONFIG resiger set 1
        case 2:
            new_config |= 1 << 2;
 8001730:	7bfb      	ldrb	r3, [r7, #15]
 8001732:	f043 0304 	orr.w	r3, r3, #4
 8001736:	73fb      	strb	r3, [r7, #15]
            break;
 8001738:	bf00      	nop
    }

    write_register(NRF24L01P_REG_CONFIG, new_config);
 800173a:	7bfb      	ldrb	r3, [r7, #15]
 800173c:	4619      	mov	r1, r3
 800173e:	2000      	movs	r0, #0
 8001740:	f7ff fe52 	bl	80013e8 <write_register>
}
 8001744:	bf00      	nop
 8001746:	3710      	adds	r7, #16
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}

0800174c <nrf24l01p_set_address_widths>:

void nrf24l01p_set_address_widths(widths bytes)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
 8001752:	4603      	mov	r3, r0
 8001754:	71fb      	strb	r3, [r7, #7]
    write_register(NRF24L01P_REG_SETUP_AW, bytes - 2);
 8001756:	79fb      	ldrb	r3, [r7, #7]
 8001758:	3b02      	subs	r3, #2
 800175a:	b2db      	uxtb	r3, r3
 800175c:	4619      	mov	r1, r3
 800175e:	2003      	movs	r0, #3
 8001760:	f7ff fe42 	bl	80013e8 <write_register>
}
 8001764:	bf00      	nop
 8001766:	3708      	adds	r7, #8
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}

0800176c <nrf24l01p_auto_retransmit_count>:

void nrf24l01p_auto_retransmit_count(count cnt)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b084      	sub	sp, #16
 8001770:	af00      	add	r7, sp, #0
 8001772:	4603      	mov	r3, r0
 8001774:	71fb      	strb	r3, [r7, #7]
    uint8_t new_setup_retr = read_register(NRF24L01P_REG_SETUP_RETR);
 8001776:	2004      	movs	r0, #4
 8001778:	f7ff fe10 	bl	800139c <read_register>
 800177c:	4603      	mov	r3, r0
 800177e:	73fb      	strb	r3, [r7, #15]

    // Reset ARC register 0
    new_setup_retr |= 0xF0;
 8001780:	7bfb      	ldrb	r3, [r7, #15]
 8001782:	f063 030f 	orn	r3, r3, #15
 8001786:	73fb      	strb	r3, [r7, #15]
    new_setup_retr |= cnt;
 8001788:	7bfa      	ldrb	r2, [r7, #15]
 800178a:	79fb      	ldrb	r3, [r7, #7]
 800178c:	4313      	orrs	r3, r2
 800178e:	73fb      	strb	r3, [r7, #15]
    write_register(NRF24L01P_REG_SETUP_RETR, new_setup_retr);
 8001790:	7bfb      	ldrb	r3, [r7, #15]
 8001792:	4619      	mov	r1, r3
 8001794:	2004      	movs	r0, #4
 8001796:	f7ff fe27 	bl	80013e8 <write_register>
}
 800179a:	bf00      	nop
 800179c:	3710      	adds	r7, #16
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
	...

080017a4 <nrf24l01p_auto_retransmit_delay>:

void nrf24l01p_auto_retransmit_delay(delay us)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b084      	sub	sp, #16
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	4603      	mov	r3, r0
 80017ac:	80fb      	strh	r3, [r7, #6]
    uint8_t new_setup_retr = read_register(NRF24L01P_REG_SETUP_RETR);
 80017ae:	2004      	movs	r0, #4
 80017b0:	f7ff fdf4 	bl	800139c <read_register>
 80017b4:	4603      	mov	r3, r0
 80017b6:	73fb      	strb	r3, [r7, #15]

    // Reset ARD register 0
    new_setup_retr |= 0x0F;
 80017b8:	7bfb      	ldrb	r3, [r7, #15]
 80017ba:	f043 030f 	orr.w	r3, r3, #15
 80017be:	73fb      	strb	r3, [r7, #15]
    new_setup_retr |= ((us / 250) - 1) << 4;
 80017c0:	88fb      	ldrh	r3, [r7, #6]
 80017c2:	4a0b      	ldr	r2, [pc, #44]	@ (80017f0 <nrf24l01p_auto_retransmit_delay+0x4c>)
 80017c4:	fba2 2303 	umull	r2, r3, r2, r3
 80017c8:	091b      	lsrs	r3, r3, #4
 80017ca:	b29b      	uxth	r3, r3
 80017cc:	3b01      	subs	r3, #1
 80017ce:	b25b      	sxtb	r3, r3
 80017d0:	011b      	lsls	r3, r3, #4
 80017d2:	b25a      	sxtb	r2, r3
 80017d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017d8:	4313      	orrs	r3, r2
 80017da:	b25b      	sxtb	r3, r3
 80017dc:	73fb      	strb	r3, [r7, #15]
    write_register(NRF24L01P_REG_SETUP_RETR, new_setup_retr);
 80017de:	7bfb      	ldrb	r3, [r7, #15]
 80017e0:	4619      	mov	r1, r3
 80017e2:	2004      	movs	r0, #4
 80017e4:	f7ff fe00 	bl	80013e8 <write_register>
}
 80017e8:	bf00      	nop
 80017ea:	3710      	adds	r7, #16
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	10624dd3 	.word	0x10624dd3

080017f4 <nrf24l01p_set_rf_channel>:

void nrf24l01p_set_rf_channel(channel MHz)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b084      	sub	sp, #16
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	4603      	mov	r3, r0
 80017fc:	80fb      	strh	r3, [r7, #6]
	uint16_t new_rf_ch = MHz - 2400;
 80017fe:	88fb      	ldrh	r3, [r7, #6]
 8001800:	f5a3 6316 	sub.w	r3, r3, #2400	@ 0x960
 8001804:	81fb      	strh	r3, [r7, #14]
    write_register(NRF24L01P_REG_RF_CH, new_rf_ch);
 8001806:	89fb      	ldrh	r3, [r7, #14]
 8001808:	b2db      	uxtb	r3, r3
 800180a:	4619      	mov	r1, r3
 800180c:	2005      	movs	r0, #5
 800180e:	f7ff fdeb 	bl	80013e8 <write_register>
}
 8001812:	bf00      	nop
 8001814:	3710      	adds	r7, #16
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}

0800181a <nrf24l01p_set_rf_tx_output_power>:

void nrf24l01p_set_rf_tx_output_power(output_power dBm)
{
 800181a:	b580      	push	{r7, lr}
 800181c:	b084      	sub	sp, #16
 800181e:	af00      	add	r7, sp, #0
 8001820:	4603      	mov	r3, r0
 8001822:	71fb      	strb	r3, [r7, #7]
    uint8_t new_rf_setup = read_register(NRF24L01P_REG_RF_SETUP) & 0xF9;
 8001824:	2006      	movs	r0, #6
 8001826:	f7ff fdb9 	bl	800139c <read_register>
 800182a:	4603      	mov	r3, r0
 800182c:	f023 0306 	bic.w	r3, r3, #6
 8001830:	73fb      	strb	r3, [r7, #15]
    new_rf_setup |= (dBm << 1);
 8001832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001836:	005b      	lsls	r3, r3, #1
 8001838:	b25a      	sxtb	r2, r3
 800183a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800183e:	4313      	orrs	r3, r2
 8001840:	b25b      	sxtb	r3, r3
 8001842:	73fb      	strb	r3, [r7, #15]

    write_register(NRF24L01P_REG_RF_SETUP, new_rf_setup);
 8001844:	7bfb      	ldrb	r3, [r7, #15]
 8001846:	4619      	mov	r1, r3
 8001848:	2006      	movs	r0, #6
 800184a:	f7ff fdcd 	bl	80013e8 <write_register>
}
 800184e:	bf00      	nop
 8001850:	3710      	adds	r7, #16
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}

08001856 <nrf24l01p_set_rf_air_data_rate>:

void nrf24l01p_set_rf_air_data_rate(air_data_rate bps)
{
 8001856:	b580      	push	{r7, lr}
 8001858:	b084      	sub	sp, #16
 800185a:	af00      	add	r7, sp, #0
 800185c:	4603      	mov	r3, r0
 800185e:	71fb      	strb	r3, [r7, #7]
    // Set value to 0
    uint8_t new_rf_setup = read_register(NRF24L01P_REG_RF_SETUP) & 0xD7;
 8001860:	2006      	movs	r0, #6
 8001862:	f7ff fd9b 	bl	800139c <read_register>
 8001866:	4603      	mov	r3, r0
 8001868:	f023 0328 	bic.w	r3, r3, #40	@ 0x28
 800186c:	73fb      	strb	r3, [r7, #15]

    switch(bps)
 800186e:	79fb      	ldrb	r3, [r7, #7]
 8001870:	2b02      	cmp	r3, #2
 8001872:	d00a      	beq.n	800188a <nrf24l01p_set_rf_air_data_rate+0x34>
 8001874:	2b02      	cmp	r3, #2
 8001876:	dc0e      	bgt.n	8001896 <nrf24l01p_set_rf_air_data_rate+0x40>
 8001878:	2b00      	cmp	r3, #0
 800187a:	d00b      	beq.n	8001894 <nrf24l01p_set_rf_air_data_rate+0x3e>
 800187c:	2b01      	cmp	r3, #1
 800187e:	d10a      	bne.n	8001896 <nrf24l01p_set_rf_air_data_rate+0x40>
    {
        case _1Mbps:
            break;
        case _2Mbps:
            new_rf_setup |= 1 << 3;
 8001880:	7bfb      	ldrb	r3, [r7, #15]
 8001882:	f043 0308 	orr.w	r3, r3, #8
 8001886:	73fb      	strb	r3, [r7, #15]
            break;
 8001888:	e005      	b.n	8001896 <nrf24l01p_set_rf_air_data_rate+0x40>
        case _250kbps:
            new_rf_setup |= 1 << 5;
 800188a:	7bfb      	ldrb	r3, [r7, #15]
 800188c:	f043 0320 	orr.w	r3, r3, #32
 8001890:	73fb      	strb	r3, [r7, #15]
            break;
 8001892:	e000      	b.n	8001896 <nrf24l01p_set_rf_air_data_rate+0x40>
            break;
 8001894:	bf00      	nop
    }
    write_register(NRF24L01P_REG_RF_SETUP, new_rf_setup);
 8001896:	7bfb      	ldrb	r3, [r7, #15]
 8001898:	4619      	mov	r1, r3
 800189a:	2006      	movs	r0, #6
 800189c:	f7ff fda4 	bl	80013e8 <write_register>
}
 80018a0:	bf00      	nop
 80018a2:	3710      	adds	r7, #16
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}

080018a8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80018ac:	4b17      	ldr	r3, [pc, #92]	@ (800190c <MX_SPI1_Init+0x64>)
 80018ae:	4a18      	ldr	r2, [pc, #96]	@ (8001910 <MX_SPI1_Init+0x68>)
 80018b0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80018b2:	4b16      	ldr	r3, [pc, #88]	@ (800190c <MX_SPI1_Init+0x64>)
 80018b4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80018b8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80018ba:	4b14      	ldr	r3, [pc, #80]	@ (800190c <MX_SPI1_Init+0x64>)
 80018bc:	2200      	movs	r2, #0
 80018be:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80018c0:	4b12      	ldr	r3, [pc, #72]	@ (800190c <MX_SPI1_Init+0x64>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80018c6:	4b11      	ldr	r3, [pc, #68]	@ (800190c <MX_SPI1_Init+0x64>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80018cc:	4b0f      	ldr	r3, [pc, #60]	@ (800190c <MX_SPI1_Init+0x64>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80018d2:	4b0e      	ldr	r3, [pc, #56]	@ (800190c <MX_SPI1_Init+0x64>)
 80018d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80018d8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80018da:	4b0c      	ldr	r3, [pc, #48]	@ (800190c <MX_SPI1_Init+0x64>)
 80018dc:	2210      	movs	r2, #16
 80018de:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018e0:	4b0a      	ldr	r3, [pc, #40]	@ (800190c <MX_SPI1_Init+0x64>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80018e6:	4b09      	ldr	r3, [pc, #36]	@ (800190c <MX_SPI1_Init+0x64>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018ec:	4b07      	ldr	r3, [pc, #28]	@ (800190c <MX_SPI1_Init+0x64>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80018f2:	4b06      	ldr	r3, [pc, #24]	@ (800190c <MX_SPI1_Init+0x64>)
 80018f4:	220a      	movs	r2, #10
 80018f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80018f8:	4804      	ldr	r0, [pc, #16]	@ (800190c <MX_SPI1_Init+0x64>)
 80018fa:	f002 faaf 	bl	8003e5c <HAL_SPI_Init>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d001      	beq.n	8001908 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001904:	f7ff fd13 	bl	800132e <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001908:	bf00      	nop
 800190a:	bd80      	pop	{r7, pc}
 800190c:	20000110 	.word	0x20000110
 8001910:	40013000 	.word	0x40013000

08001914 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b088      	sub	sp, #32
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800191c:	f107 0310 	add.w	r3, r7, #16
 8001920:	2200      	movs	r2, #0
 8001922:	601a      	str	r2, [r3, #0]
 8001924:	605a      	str	r2, [r3, #4]
 8001926:	609a      	str	r2, [r3, #8]
 8001928:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a1b      	ldr	r2, [pc, #108]	@ (800199c <HAL_SPI_MspInit+0x88>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d12f      	bne.n	8001994 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001934:	4b1a      	ldr	r3, [pc, #104]	@ (80019a0 <HAL_SPI_MspInit+0x8c>)
 8001936:	699b      	ldr	r3, [r3, #24]
 8001938:	4a19      	ldr	r2, [pc, #100]	@ (80019a0 <HAL_SPI_MspInit+0x8c>)
 800193a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800193e:	6193      	str	r3, [r2, #24]
 8001940:	4b17      	ldr	r3, [pc, #92]	@ (80019a0 <HAL_SPI_MspInit+0x8c>)
 8001942:	699b      	ldr	r3, [r3, #24]
 8001944:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001948:	60fb      	str	r3, [r7, #12]
 800194a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800194c:	4b14      	ldr	r3, [pc, #80]	@ (80019a0 <HAL_SPI_MspInit+0x8c>)
 800194e:	699b      	ldr	r3, [r3, #24]
 8001950:	4a13      	ldr	r2, [pc, #76]	@ (80019a0 <HAL_SPI_MspInit+0x8c>)
 8001952:	f043 0304 	orr.w	r3, r3, #4
 8001956:	6193      	str	r3, [r2, #24]
 8001958:	4b11      	ldr	r3, [pc, #68]	@ (80019a0 <HAL_SPI_MspInit+0x8c>)
 800195a:	699b      	ldr	r3, [r3, #24]
 800195c:	f003 0304 	and.w	r3, r3, #4
 8001960:	60bb      	str	r3, [r7, #8]
 8001962:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = RADIO_SCK_Pin|RADIO_MOSI_Pin;
 8001964:	23a0      	movs	r3, #160	@ 0xa0
 8001966:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001968:	2302      	movs	r3, #2
 800196a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800196c:	2303      	movs	r3, #3
 800196e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001970:	f107 0310 	add.w	r3, r7, #16
 8001974:	4619      	mov	r1, r3
 8001976:	480b      	ldr	r0, [pc, #44]	@ (80019a4 <HAL_SPI_MspInit+0x90>)
 8001978:	f000 fc16 	bl	80021a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RADIO_MISO_Pin;
 800197c:	2340      	movs	r3, #64	@ 0x40
 800197e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001980:	2300      	movs	r3, #0
 8001982:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001984:	2300      	movs	r3, #0
 8001986:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(RADIO_MISO_GPIO_Port, &GPIO_InitStruct);
 8001988:	f107 0310 	add.w	r3, r7, #16
 800198c:	4619      	mov	r1, r3
 800198e:	4805      	ldr	r0, [pc, #20]	@ (80019a4 <HAL_SPI_MspInit+0x90>)
 8001990:	f000 fc0a 	bl	80021a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001994:	bf00      	nop
 8001996:	3720      	adds	r7, #32
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	40013000 	.word	0x40013000
 80019a0:	40021000 	.word	0x40021000
 80019a4:	40010800 	.word	0x40010800

080019a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b085      	sub	sp, #20
 80019ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80019ae:	4b15      	ldr	r3, [pc, #84]	@ (8001a04 <HAL_MspInit+0x5c>)
 80019b0:	699b      	ldr	r3, [r3, #24]
 80019b2:	4a14      	ldr	r2, [pc, #80]	@ (8001a04 <HAL_MspInit+0x5c>)
 80019b4:	f043 0301 	orr.w	r3, r3, #1
 80019b8:	6193      	str	r3, [r2, #24]
 80019ba:	4b12      	ldr	r3, [pc, #72]	@ (8001a04 <HAL_MspInit+0x5c>)
 80019bc:	699b      	ldr	r3, [r3, #24]
 80019be:	f003 0301 	and.w	r3, r3, #1
 80019c2:	60bb      	str	r3, [r7, #8]
 80019c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019c6:	4b0f      	ldr	r3, [pc, #60]	@ (8001a04 <HAL_MspInit+0x5c>)
 80019c8:	69db      	ldr	r3, [r3, #28]
 80019ca:	4a0e      	ldr	r2, [pc, #56]	@ (8001a04 <HAL_MspInit+0x5c>)
 80019cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019d0:	61d3      	str	r3, [r2, #28]
 80019d2:	4b0c      	ldr	r3, [pc, #48]	@ (8001a04 <HAL_MspInit+0x5c>)
 80019d4:	69db      	ldr	r3, [r3, #28]
 80019d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019da:	607b      	str	r3, [r7, #4]
 80019dc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80019de:	4b0a      	ldr	r3, [pc, #40]	@ (8001a08 <HAL_MspInit+0x60>)
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	60fb      	str	r3, [r7, #12]
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80019ea:	60fb      	str	r3, [r7, #12]
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80019f2:	60fb      	str	r3, [r7, #12]
 80019f4:	4a04      	ldr	r2, [pc, #16]	@ (8001a08 <HAL_MspInit+0x60>)
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019fa:	bf00      	nop
 80019fc:	3714      	adds	r7, #20
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bc80      	pop	{r7}
 8001a02:	4770      	bx	lr
 8001a04:	40021000 	.word	0x40021000
 8001a08:	40010000 	.word	0x40010000

08001a0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a10:	bf00      	nop
 8001a12:	e7fd      	b.n	8001a10 <NMI_Handler+0x4>

08001a14 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a18:	bf00      	nop
 8001a1a:	e7fd      	b.n	8001a18 <HardFault_Handler+0x4>

08001a1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a20:	bf00      	nop
 8001a22:	e7fd      	b.n	8001a20 <MemManage_Handler+0x4>

08001a24 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a28:	bf00      	nop
 8001a2a:	e7fd      	b.n	8001a28 <BusFault_Handler+0x4>

08001a2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a30:	bf00      	nop
 8001a32:	e7fd      	b.n	8001a30 <UsageFault_Handler+0x4>

08001a34 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a38:	bf00      	nop
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bc80      	pop	{r7}
 8001a3e:	4770      	bx	lr

08001a40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a44:	bf00      	nop
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bc80      	pop	{r7}
 8001a4a:	4770      	bx	lr

08001a4c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a50:	bf00      	nop
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bc80      	pop	{r7}
 8001a56:	4770      	bx	lr

08001a58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a5c:	f000 f9a4 	bl	8001da8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a60:	bf00      	nop
 8001a62:	bd80      	pop	{r7, pc}

08001a64 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RADIO_IRQ_Pin);
 8001a68:	2002      	movs	r0, #2
 8001a6a:	f000 fd69 	bl	8002540 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001a6e:	bf00      	nop
 8001a70:	bd80      	pop	{r7, pc}
	...

08001a74 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001a78:	4802      	ldr	r0, [pc, #8]	@ (8001a84 <USART1_IRQHandler+0x10>)
 8001a7a:	f002 ffd5 	bl	8004a28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001a7e:	bf00      	nop
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	2000016c 	.word	0x2000016c

08001a88 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b086      	sub	sp, #24
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	60f8      	str	r0, [r7, #12]
 8001a90:	60b9      	str	r1, [r7, #8]
 8001a92:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a94:	2300      	movs	r3, #0
 8001a96:	617b      	str	r3, [r7, #20]
 8001a98:	e00a      	b.n	8001ab0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a9a:	f3af 8000 	nop.w
 8001a9e:	4601      	mov	r1, r0
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	1c5a      	adds	r2, r3, #1
 8001aa4:	60ba      	str	r2, [r7, #8]
 8001aa6:	b2ca      	uxtb	r2, r1
 8001aa8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	3301      	adds	r3, #1
 8001aae:	617b      	str	r3, [r7, #20]
 8001ab0:	697a      	ldr	r2, [r7, #20]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	dbf0      	blt.n	8001a9a <_read+0x12>
  }

  return len;
 8001ab8:	687b      	ldr	r3, [r7, #4]
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3718      	adds	r7, #24
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}

08001ac2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ac2:	b580      	push	{r7, lr}
 8001ac4:	b086      	sub	sp, #24
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	60f8      	str	r0, [r7, #12]
 8001aca:	60b9      	str	r1, [r7, #8]
 8001acc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ace:	2300      	movs	r3, #0
 8001ad0:	617b      	str	r3, [r7, #20]
 8001ad2:	e009      	b.n	8001ae8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	1c5a      	adds	r2, r3, #1
 8001ad8:	60ba      	str	r2, [r7, #8]
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	4618      	mov	r0, r3
 8001ade:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	3301      	adds	r3, #1
 8001ae6:	617b      	str	r3, [r7, #20]
 8001ae8:	697a      	ldr	r2, [r7, #20]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	429a      	cmp	r2, r3
 8001aee:	dbf1      	blt.n	8001ad4 <_write+0x12>
  }
  return len;
 8001af0:	687b      	ldr	r3, [r7, #4]
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3718      	adds	r7, #24
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}

08001afa <_close>:

int _close(int file)
{
 8001afa:	b480      	push	{r7}
 8001afc:	b083      	sub	sp, #12
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b02:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	370c      	adds	r7, #12
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bc80      	pop	{r7}
 8001b0e:	4770      	bx	lr

08001b10 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
 8001b18:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001b20:	605a      	str	r2, [r3, #4]
  return 0;
 8001b22:	2300      	movs	r3, #0
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	370c      	adds	r7, #12
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bc80      	pop	{r7}
 8001b2c:	4770      	bx	lr

08001b2e <_isatty>:

int _isatty(int file)
{
 8001b2e:	b480      	push	{r7}
 8001b30:	b083      	sub	sp, #12
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b36:	2301      	movs	r3, #1
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	370c      	adds	r7, #12
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bc80      	pop	{r7}
 8001b40:	4770      	bx	lr

08001b42 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b42:	b480      	push	{r7}
 8001b44:	b085      	sub	sp, #20
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	60f8      	str	r0, [r7, #12]
 8001b4a:	60b9      	str	r1, [r7, #8]
 8001b4c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b4e:	2300      	movs	r3, #0
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	3714      	adds	r7, #20
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bc80      	pop	{r7}
 8001b58:	4770      	bx	lr
	...

08001b5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b086      	sub	sp, #24
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b64:	4a14      	ldr	r2, [pc, #80]	@ (8001bb8 <_sbrk+0x5c>)
 8001b66:	4b15      	ldr	r3, [pc, #84]	@ (8001bbc <_sbrk+0x60>)
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b70:	4b13      	ldr	r3, [pc, #76]	@ (8001bc0 <_sbrk+0x64>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d102      	bne.n	8001b7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b78:	4b11      	ldr	r3, [pc, #68]	@ (8001bc0 <_sbrk+0x64>)
 8001b7a:	4a12      	ldr	r2, [pc, #72]	@ (8001bc4 <_sbrk+0x68>)
 8001b7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b7e:	4b10      	ldr	r3, [pc, #64]	@ (8001bc0 <_sbrk+0x64>)
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	4413      	add	r3, r2
 8001b86:	693a      	ldr	r2, [r7, #16]
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d207      	bcs.n	8001b9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b8c:	f003 fe86 	bl	800589c <__errno>
 8001b90:	4603      	mov	r3, r0
 8001b92:	220c      	movs	r2, #12
 8001b94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b96:	f04f 33ff 	mov.w	r3, #4294967295
 8001b9a:	e009      	b.n	8001bb0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b9c:	4b08      	ldr	r3, [pc, #32]	@ (8001bc0 <_sbrk+0x64>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ba2:	4b07      	ldr	r3, [pc, #28]	@ (8001bc0 <_sbrk+0x64>)
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4413      	add	r3, r2
 8001baa:	4a05      	ldr	r2, [pc, #20]	@ (8001bc0 <_sbrk+0x64>)
 8001bac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bae:	68fb      	ldr	r3, [r7, #12]
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	3718      	adds	r7, #24
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	20005000 	.word	0x20005000
 8001bbc:	00000400 	.word	0x00000400
 8001bc0:	20000168 	.word	0x20000168
 8001bc4:	20000308 	.word	0x20000308

08001bc8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bcc:	bf00      	nop
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bc80      	pop	{r7}
 8001bd2:	4770      	bx	lr

08001bd4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001bd8:	4b11      	ldr	r3, [pc, #68]	@ (8001c20 <MX_USART1_UART_Init+0x4c>)
 8001bda:	4a12      	ldr	r2, [pc, #72]	@ (8001c24 <MX_USART1_UART_Init+0x50>)
 8001bdc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001bde:	4b10      	ldr	r3, [pc, #64]	@ (8001c20 <MX_USART1_UART_Init+0x4c>)
 8001be0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001be4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001be6:	4b0e      	ldr	r3, [pc, #56]	@ (8001c20 <MX_USART1_UART_Init+0x4c>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001bec:	4b0c      	ldr	r3, [pc, #48]	@ (8001c20 <MX_USART1_UART_Init+0x4c>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001bf2:	4b0b      	ldr	r3, [pc, #44]	@ (8001c20 <MX_USART1_UART_Init+0x4c>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001bf8:	4b09      	ldr	r3, [pc, #36]	@ (8001c20 <MX_USART1_UART_Init+0x4c>)
 8001bfa:	220c      	movs	r2, #12
 8001bfc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bfe:	4b08      	ldr	r3, [pc, #32]	@ (8001c20 <MX_USART1_UART_Init+0x4c>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c04:	4b06      	ldr	r3, [pc, #24]	@ (8001c20 <MX_USART1_UART_Init+0x4c>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001c0a:	4805      	ldr	r0, [pc, #20]	@ (8001c20 <MX_USART1_UART_Init+0x4c>)
 8001c0c:	f002 febb 	bl	8004986 <HAL_UART_Init>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d001      	beq.n	8001c1a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001c16:	f7ff fb8a 	bl	800132e <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001c1a:	bf00      	nop
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	2000016c 	.word	0x2000016c
 8001c24:	40013800 	.word	0x40013800

08001c28 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b088      	sub	sp, #32
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c30:	f107 0310 	add.w	r3, r7, #16
 8001c34:	2200      	movs	r2, #0
 8001c36:	601a      	str	r2, [r3, #0]
 8001c38:	605a      	str	r2, [r3, #4]
 8001c3a:	609a      	str	r2, [r3, #8]
 8001c3c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a20      	ldr	r2, [pc, #128]	@ (8001cc4 <HAL_UART_MspInit+0x9c>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d139      	bne.n	8001cbc <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c48:	4b1f      	ldr	r3, [pc, #124]	@ (8001cc8 <HAL_UART_MspInit+0xa0>)
 8001c4a:	699b      	ldr	r3, [r3, #24]
 8001c4c:	4a1e      	ldr	r2, [pc, #120]	@ (8001cc8 <HAL_UART_MspInit+0xa0>)
 8001c4e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c52:	6193      	str	r3, [r2, #24]
 8001c54:	4b1c      	ldr	r3, [pc, #112]	@ (8001cc8 <HAL_UART_MspInit+0xa0>)
 8001c56:	699b      	ldr	r3, [r3, #24]
 8001c58:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c5c:	60fb      	str	r3, [r7, #12]
 8001c5e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c60:	4b19      	ldr	r3, [pc, #100]	@ (8001cc8 <HAL_UART_MspInit+0xa0>)
 8001c62:	699b      	ldr	r3, [r3, #24]
 8001c64:	4a18      	ldr	r2, [pc, #96]	@ (8001cc8 <HAL_UART_MspInit+0xa0>)
 8001c66:	f043 0304 	orr.w	r3, r3, #4
 8001c6a:	6193      	str	r3, [r2, #24]
 8001c6c:	4b16      	ldr	r3, [pc, #88]	@ (8001cc8 <HAL_UART_MspInit+0xa0>)
 8001c6e:	699b      	ldr	r3, [r3, #24]
 8001c70:	f003 0304 	and.w	r3, r3, #4
 8001c74:	60bb      	str	r3, [r7, #8]
 8001c76:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001c78:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001c7c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c7e:	2302      	movs	r3, #2
 8001c80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c82:	2303      	movs	r3, #3
 8001c84:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c86:	f107 0310 	add.w	r3, r7, #16
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	480f      	ldr	r0, [pc, #60]	@ (8001ccc <HAL_UART_MspInit+0xa4>)
 8001c8e:	f000 fa8b 	bl	80021a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001c92:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001c96:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ca0:	f107 0310 	add.w	r3, r7, #16
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	4809      	ldr	r0, [pc, #36]	@ (8001ccc <HAL_UART_MspInit+0xa4>)
 8001ca8:	f000 fa7e 	bl	80021a8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001cac:	2200      	movs	r2, #0
 8001cae:	2100      	movs	r1, #0
 8001cb0:	2025      	movs	r0, #37	@ 0x25
 8001cb2:	f000 f990 	bl	8001fd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001cb6:	2025      	movs	r0, #37	@ 0x25
 8001cb8:	f000 f9a9 	bl	800200e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001cbc:	bf00      	nop
 8001cbe:	3720      	adds	r7, #32
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	40013800 	.word	0x40013800
 8001cc8:	40021000 	.word	0x40021000
 8001ccc:	40010800 	.word	0x40010800

08001cd0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001cd0:	f7ff ff7a 	bl	8001bc8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001cd4:	480b      	ldr	r0, [pc, #44]	@ (8001d04 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001cd6:	490c      	ldr	r1, [pc, #48]	@ (8001d08 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001cd8:	4a0c      	ldr	r2, [pc, #48]	@ (8001d0c <LoopFillZerobss+0x16>)
  movs r3, #0
 8001cda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cdc:	e002      	b.n	8001ce4 <LoopCopyDataInit>

08001cde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ce0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ce2:	3304      	adds	r3, #4

08001ce4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ce4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ce6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ce8:	d3f9      	bcc.n	8001cde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cea:	4a09      	ldr	r2, [pc, #36]	@ (8001d10 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001cec:	4c09      	ldr	r4, [pc, #36]	@ (8001d14 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001cee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cf0:	e001      	b.n	8001cf6 <LoopFillZerobss>

08001cf2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cf2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cf4:	3204      	adds	r2, #4

08001cf6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cf6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cf8:	d3fb      	bcc.n	8001cf2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001cfa:	f003 fdd5 	bl	80058a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001cfe:	f7ff fa11 	bl	8001124 <main>
  bx lr
 8001d02:	4770      	bx	lr
  ldr r0, =_sdata
 8001d04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d08:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001d0c:	08006448 	.word	0x08006448
  ldr r2, =_sbss
 8001d10:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001d14:	20000304 	.word	0x20000304

08001d18 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d18:	e7fe      	b.n	8001d18 <ADC1_2_IRQHandler>
	...

08001d1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d20:	4b08      	ldr	r3, [pc, #32]	@ (8001d44 <HAL_Init+0x28>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a07      	ldr	r2, [pc, #28]	@ (8001d44 <HAL_Init+0x28>)
 8001d26:	f043 0310 	orr.w	r3, r3, #16
 8001d2a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d2c:	2003      	movs	r0, #3
 8001d2e:	f000 f947 	bl	8001fc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d32:	200f      	movs	r0, #15
 8001d34:	f000 f808 	bl	8001d48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d38:	f7ff fe36 	bl	80019a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d3c:	2300      	movs	r3, #0
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	40022000 	.word	0x40022000

08001d48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d50:	4b12      	ldr	r3, [pc, #72]	@ (8001d9c <HAL_InitTick+0x54>)
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	4b12      	ldr	r3, [pc, #72]	@ (8001da0 <HAL_InitTick+0x58>)
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	4619      	mov	r1, r3
 8001d5a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d62:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d66:	4618      	mov	r0, r3
 8001d68:	f000 f95f 	bl	800202a <HAL_SYSTICK_Config>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d001      	beq.n	8001d76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e00e      	b.n	8001d94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2b0f      	cmp	r3, #15
 8001d7a:	d80a      	bhi.n	8001d92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	6879      	ldr	r1, [r7, #4]
 8001d80:	f04f 30ff 	mov.w	r0, #4294967295
 8001d84:	f000 f927 	bl	8001fd6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d88:	4a06      	ldr	r2, [pc, #24]	@ (8001da4 <HAL_InitTick+0x5c>)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	e000      	b.n	8001d94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	3708      	adds	r7, #8
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	20000000 	.word	0x20000000
 8001da0:	20000008 	.word	0x20000008
 8001da4:	20000004 	.word	0x20000004

08001da8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001dac:	4b05      	ldr	r3, [pc, #20]	@ (8001dc4 <HAL_IncTick+0x1c>)
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	461a      	mov	r2, r3
 8001db2:	4b05      	ldr	r3, [pc, #20]	@ (8001dc8 <HAL_IncTick+0x20>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4413      	add	r3, r2
 8001db8:	4a03      	ldr	r2, [pc, #12]	@ (8001dc8 <HAL_IncTick+0x20>)
 8001dba:	6013      	str	r3, [r2, #0]
}
 8001dbc:	bf00      	nop
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bc80      	pop	{r7}
 8001dc2:	4770      	bx	lr
 8001dc4:	20000008 	.word	0x20000008
 8001dc8:	200001b4 	.word	0x200001b4

08001dcc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0
  return uwTick;
 8001dd0:	4b02      	ldr	r3, [pc, #8]	@ (8001ddc <HAL_GetTick+0x10>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bc80      	pop	{r7}
 8001dda:	4770      	bx	lr
 8001ddc:	200001b4 	.word	0x200001b4

08001de0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b084      	sub	sp, #16
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001de8:	f7ff fff0 	bl	8001dcc <HAL_GetTick>
 8001dec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001df8:	d005      	beq.n	8001e06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001dfa:	4b0a      	ldr	r3, [pc, #40]	@ (8001e24 <HAL_Delay+0x44>)
 8001dfc:	781b      	ldrb	r3, [r3, #0]
 8001dfe:	461a      	mov	r2, r3
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	4413      	add	r3, r2
 8001e04:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e06:	bf00      	nop
 8001e08:	f7ff ffe0 	bl	8001dcc <HAL_GetTick>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	68fa      	ldr	r2, [r7, #12]
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d8f7      	bhi.n	8001e08 <HAL_Delay+0x28>
  {
  }
}
 8001e18:	bf00      	nop
 8001e1a:	bf00      	nop
 8001e1c:	3710      	adds	r7, #16
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	20000008 	.word	0x20000008

08001e28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b085      	sub	sp, #20
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	f003 0307 	and.w	r3, r3, #7
 8001e36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e38:	4b0c      	ldr	r3, [pc, #48]	@ (8001e6c <__NVIC_SetPriorityGrouping+0x44>)
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e3e:	68ba      	ldr	r2, [r7, #8]
 8001e40:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e44:	4013      	ands	r3, r2
 8001e46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e50:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e5a:	4a04      	ldr	r2, [pc, #16]	@ (8001e6c <__NVIC_SetPriorityGrouping+0x44>)
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	60d3      	str	r3, [r2, #12]
}
 8001e60:	bf00      	nop
 8001e62:	3714      	adds	r7, #20
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bc80      	pop	{r7}
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop
 8001e6c:	e000ed00 	.word	0xe000ed00

08001e70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e74:	4b04      	ldr	r3, [pc, #16]	@ (8001e88 <__NVIC_GetPriorityGrouping+0x18>)
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	0a1b      	lsrs	r3, r3, #8
 8001e7a:	f003 0307 	and.w	r3, r3, #7
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bc80      	pop	{r7}
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop
 8001e88:	e000ed00 	.word	0xe000ed00

08001e8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	4603      	mov	r3, r0
 8001e94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	db0b      	blt.n	8001eb6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e9e:	79fb      	ldrb	r3, [r7, #7]
 8001ea0:	f003 021f 	and.w	r2, r3, #31
 8001ea4:	4906      	ldr	r1, [pc, #24]	@ (8001ec0 <__NVIC_EnableIRQ+0x34>)
 8001ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eaa:	095b      	lsrs	r3, r3, #5
 8001eac:	2001      	movs	r0, #1
 8001eae:	fa00 f202 	lsl.w	r2, r0, r2
 8001eb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001eb6:	bf00      	nop
 8001eb8:	370c      	adds	r7, #12
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bc80      	pop	{r7}
 8001ebe:	4770      	bx	lr
 8001ec0:	e000e100 	.word	0xe000e100

08001ec4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	4603      	mov	r3, r0
 8001ecc:	6039      	str	r1, [r7, #0]
 8001ece:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ed0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	db0a      	blt.n	8001eee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	b2da      	uxtb	r2, r3
 8001edc:	490c      	ldr	r1, [pc, #48]	@ (8001f10 <__NVIC_SetPriority+0x4c>)
 8001ede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee2:	0112      	lsls	r2, r2, #4
 8001ee4:	b2d2      	uxtb	r2, r2
 8001ee6:	440b      	add	r3, r1
 8001ee8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001eec:	e00a      	b.n	8001f04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	b2da      	uxtb	r2, r3
 8001ef2:	4908      	ldr	r1, [pc, #32]	@ (8001f14 <__NVIC_SetPriority+0x50>)
 8001ef4:	79fb      	ldrb	r3, [r7, #7]
 8001ef6:	f003 030f 	and.w	r3, r3, #15
 8001efa:	3b04      	subs	r3, #4
 8001efc:	0112      	lsls	r2, r2, #4
 8001efe:	b2d2      	uxtb	r2, r2
 8001f00:	440b      	add	r3, r1
 8001f02:	761a      	strb	r2, [r3, #24]
}
 8001f04:	bf00      	nop
 8001f06:	370c      	adds	r7, #12
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bc80      	pop	{r7}
 8001f0c:	4770      	bx	lr
 8001f0e:	bf00      	nop
 8001f10:	e000e100 	.word	0xe000e100
 8001f14:	e000ed00 	.word	0xe000ed00

08001f18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b089      	sub	sp, #36	@ 0x24
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	60f8      	str	r0, [r7, #12]
 8001f20:	60b9      	str	r1, [r7, #8]
 8001f22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	f003 0307 	and.w	r3, r3, #7
 8001f2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f2c:	69fb      	ldr	r3, [r7, #28]
 8001f2e:	f1c3 0307 	rsb	r3, r3, #7
 8001f32:	2b04      	cmp	r3, #4
 8001f34:	bf28      	it	cs
 8001f36:	2304      	movcs	r3, #4
 8001f38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	3304      	adds	r3, #4
 8001f3e:	2b06      	cmp	r3, #6
 8001f40:	d902      	bls.n	8001f48 <NVIC_EncodePriority+0x30>
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	3b03      	subs	r3, #3
 8001f46:	e000      	b.n	8001f4a <NVIC_EncodePriority+0x32>
 8001f48:	2300      	movs	r3, #0
 8001f4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f4c:	f04f 32ff 	mov.w	r2, #4294967295
 8001f50:	69bb      	ldr	r3, [r7, #24]
 8001f52:	fa02 f303 	lsl.w	r3, r2, r3
 8001f56:	43da      	mvns	r2, r3
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	401a      	ands	r2, r3
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f60:	f04f 31ff 	mov.w	r1, #4294967295
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	fa01 f303 	lsl.w	r3, r1, r3
 8001f6a:	43d9      	mvns	r1, r3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f70:	4313      	orrs	r3, r2
         );
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3724      	adds	r7, #36	@ 0x24
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bc80      	pop	{r7}
 8001f7a:	4770      	bx	lr

08001f7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	3b01      	subs	r3, #1
 8001f88:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f8c:	d301      	bcc.n	8001f92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e00f      	b.n	8001fb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f92:	4a0a      	ldr	r2, [pc, #40]	@ (8001fbc <SysTick_Config+0x40>)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	3b01      	subs	r3, #1
 8001f98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f9a:	210f      	movs	r1, #15
 8001f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8001fa0:	f7ff ff90 	bl	8001ec4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fa4:	4b05      	ldr	r3, [pc, #20]	@ (8001fbc <SysTick_Config+0x40>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001faa:	4b04      	ldr	r3, [pc, #16]	@ (8001fbc <SysTick_Config+0x40>)
 8001fac:	2207      	movs	r2, #7
 8001fae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fb0:	2300      	movs	r3, #0
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3708      	adds	r7, #8
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	e000e010 	.word	0xe000e010

08001fc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	f7ff ff2d 	bl	8001e28 <__NVIC_SetPriorityGrouping>
}
 8001fce:	bf00      	nop
 8001fd0:	3708      	adds	r7, #8
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}

08001fd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fd6:	b580      	push	{r7, lr}
 8001fd8:	b086      	sub	sp, #24
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	4603      	mov	r3, r0
 8001fde:	60b9      	str	r1, [r7, #8]
 8001fe0:	607a      	str	r2, [r7, #4]
 8001fe2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fe8:	f7ff ff42 	bl	8001e70 <__NVIC_GetPriorityGrouping>
 8001fec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fee:	687a      	ldr	r2, [r7, #4]
 8001ff0:	68b9      	ldr	r1, [r7, #8]
 8001ff2:	6978      	ldr	r0, [r7, #20]
 8001ff4:	f7ff ff90 	bl	8001f18 <NVIC_EncodePriority>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ffe:	4611      	mov	r1, r2
 8002000:	4618      	mov	r0, r3
 8002002:	f7ff ff5f 	bl	8001ec4 <__NVIC_SetPriority>
}
 8002006:	bf00      	nop
 8002008:	3718      	adds	r7, #24
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}

0800200e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800200e:	b580      	push	{r7, lr}
 8002010:	b082      	sub	sp, #8
 8002012:	af00      	add	r7, sp, #0
 8002014:	4603      	mov	r3, r0
 8002016:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002018:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800201c:	4618      	mov	r0, r3
 800201e:	f7ff ff35 	bl	8001e8c <__NVIC_EnableIRQ>
}
 8002022:	bf00      	nop
 8002024:	3708      	adds	r7, #8
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}

0800202a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800202a:	b580      	push	{r7, lr}
 800202c:	b082      	sub	sp, #8
 800202e:	af00      	add	r7, sp, #0
 8002030:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f7ff ffa2 	bl	8001f7c <SysTick_Config>
 8002038:	4603      	mov	r3, r0
}
 800203a:	4618      	mov	r0, r3
 800203c:	3708      	adds	r7, #8
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}

08002042 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002042:	b480      	push	{r7}
 8002044:	b085      	sub	sp, #20
 8002046:	af00      	add	r7, sp, #0
 8002048:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800204a:	2300      	movs	r3, #0
 800204c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002054:	b2db      	uxtb	r3, r3
 8002056:	2b02      	cmp	r3, #2
 8002058:	d008      	beq.n	800206c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2204      	movs	r2, #4
 800205e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2200      	movs	r2, #0
 8002064:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	e020      	b.n	80020ae <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f022 020e 	bic.w	r2, r2, #14
 800207a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f022 0201 	bic.w	r2, r2, #1
 800208a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002094:	2101      	movs	r1, #1
 8002096:	fa01 f202 	lsl.w	r2, r1, r2
 800209a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2201      	movs	r2, #1
 80020a0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2200      	movs	r2, #0
 80020a8:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80020ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3714      	adds	r7, #20
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bc80      	pop	{r7}
 80020b6:	4770      	bx	lr

080020b8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b084      	sub	sp, #16
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020c0:	2300      	movs	r3, #0
 80020c2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80020ca:	b2db      	uxtb	r3, r3
 80020cc:	2b02      	cmp	r3, #2
 80020ce:	d005      	beq.n	80020dc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2204      	movs	r2, #4
 80020d4:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	73fb      	strb	r3, [r7, #15]
 80020da:	e051      	b.n	8002180 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f022 020e 	bic.w	r2, r2, #14
 80020ea:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f022 0201 	bic.w	r2, r2, #1
 80020fa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a22      	ldr	r2, [pc, #136]	@ (800218c <HAL_DMA_Abort_IT+0xd4>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d029      	beq.n	800215a <HAL_DMA_Abort_IT+0xa2>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a21      	ldr	r2, [pc, #132]	@ (8002190 <HAL_DMA_Abort_IT+0xd8>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d022      	beq.n	8002156 <HAL_DMA_Abort_IT+0x9e>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a1f      	ldr	r2, [pc, #124]	@ (8002194 <HAL_DMA_Abort_IT+0xdc>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d01a      	beq.n	8002150 <HAL_DMA_Abort_IT+0x98>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a1e      	ldr	r2, [pc, #120]	@ (8002198 <HAL_DMA_Abort_IT+0xe0>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d012      	beq.n	800214a <HAL_DMA_Abort_IT+0x92>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a1c      	ldr	r2, [pc, #112]	@ (800219c <HAL_DMA_Abort_IT+0xe4>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d00a      	beq.n	8002144 <HAL_DMA_Abort_IT+0x8c>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a1b      	ldr	r2, [pc, #108]	@ (80021a0 <HAL_DMA_Abort_IT+0xe8>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d102      	bne.n	800213e <HAL_DMA_Abort_IT+0x86>
 8002138:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800213c:	e00e      	b.n	800215c <HAL_DMA_Abort_IT+0xa4>
 800213e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002142:	e00b      	b.n	800215c <HAL_DMA_Abort_IT+0xa4>
 8002144:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002148:	e008      	b.n	800215c <HAL_DMA_Abort_IT+0xa4>
 800214a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800214e:	e005      	b.n	800215c <HAL_DMA_Abort_IT+0xa4>
 8002150:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002154:	e002      	b.n	800215c <HAL_DMA_Abort_IT+0xa4>
 8002156:	2310      	movs	r3, #16
 8002158:	e000      	b.n	800215c <HAL_DMA_Abort_IT+0xa4>
 800215a:	2301      	movs	r3, #1
 800215c:	4a11      	ldr	r2, [pc, #68]	@ (80021a4 <HAL_DMA_Abort_IT+0xec>)
 800215e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2201      	movs	r2, #1
 8002164:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2200      	movs	r2, #0
 800216c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002174:	2b00      	cmp	r3, #0
 8002176:	d003      	beq.n	8002180 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800217c:	6878      	ldr	r0, [r7, #4]
 800217e:	4798      	blx	r3
    } 
  }
  return status;
 8002180:	7bfb      	ldrb	r3, [r7, #15]
}
 8002182:	4618      	mov	r0, r3
 8002184:	3710      	adds	r7, #16
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	40020008 	.word	0x40020008
 8002190:	4002001c 	.word	0x4002001c
 8002194:	40020030 	.word	0x40020030
 8002198:	40020044 	.word	0x40020044
 800219c:	40020058 	.word	0x40020058
 80021a0:	4002006c 	.word	0x4002006c
 80021a4:	40020000 	.word	0x40020000

080021a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b08b      	sub	sp, #44	@ 0x2c
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80021b2:	2300      	movs	r3, #0
 80021b4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80021b6:	2300      	movs	r3, #0
 80021b8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021ba:	e169      	b.n	8002490 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80021bc:	2201      	movs	r2, #1
 80021be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021c0:	fa02 f303 	lsl.w	r3, r2, r3
 80021c4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	69fa      	ldr	r2, [r7, #28]
 80021cc:	4013      	ands	r3, r2
 80021ce:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80021d0:	69ba      	ldr	r2, [r7, #24]
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	429a      	cmp	r2, r3
 80021d6:	f040 8158 	bne.w	800248a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	4a9a      	ldr	r2, [pc, #616]	@ (8002448 <HAL_GPIO_Init+0x2a0>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d05e      	beq.n	80022a2 <HAL_GPIO_Init+0xfa>
 80021e4:	4a98      	ldr	r2, [pc, #608]	@ (8002448 <HAL_GPIO_Init+0x2a0>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d875      	bhi.n	80022d6 <HAL_GPIO_Init+0x12e>
 80021ea:	4a98      	ldr	r2, [pc, #608]	@ (800244c <HAL_GPIO_Init+0x2a4>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d058      	beq.n	80022a2 <HAL_GPIO_Init+0xfa>
 80021f0:	4a96      	ldr	r2, [pc, #600]	@ (800244c <HAL_GPIO_Init+0x2a4>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d86f      	bhi.n	80022d6 <HAL_GPIO_Init+0x12e>
 80021f6:	4a96      	ldr	r2, [pc, #600]	@ (8002450 <HAL_GPIO_Init+0x2a8>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d052      	beq.n	80022a2 <HAL_GPIO_Init+0xfa>
 80021fc:	4a94      	ldr	r2, [pc, #592]	@ (8002450 <HAL_GPIO_Init+0x2a8>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d869      	bhi.n	80022d6 <HAL_GPIO_Init+0x12e>
 8002202:	4a94      	ldr	r2, [pc, #592]	@ (8002454 <HAL_GPIO_Init+0x2ac>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d04c      	beq.n	80022a2 <HAL_GPIO_Init+0xfa>
 8002208:	4a92      	ldr	r2, [pc, #584]	@ (8002454 <HAL_GPIO_Init+0x2ac>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d863      	bhi.n	80022d6 <HAL_GPIO_Init+0x12e>
 800220e:	4a92      	ldr	r2, [pc, #584]	@ (8002458 <HAL_GPIO_Init+0x2b0>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d046      	beq.n	80022a2 <HAL_GPIO_Init+0xfa>
 8002214:	4a90      	ldr	r2, [pc, #576]	@ (8002458 <HAL_GPIO_Init+0x2b0>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d85d      	bhi.n	80022d6 <HAL_GPIO_Init+0x12e>
 800221a:	2b12      	cmp	r3, #18
 800221c:	d82a      	bhi.n	8002274 <HAL_GPIO_Init+0xcc>
 800221e:	2b12      	cmp	r3, #18
 8002220:	d859      	bhi.n	80022d6 <HAL_GPIO_Init+0x12e>
 8002222:	a201      	add	r2, pc, #4	@ (adr r2, 8002228 <HAL_GPIO_Init+0x80>)
 8002224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002228:	080022a3 	.word	0x080022a3
 800222c:	0800227d 	.word	0x0800227d
 8002230:	0800228f 	.word	0x0800228f
 8002234:	080022d1 	.word	0x080022d1
 8002238:	080022d7 	.word	0x080022d7
 800223c:	080022d7 	.word	0x080022d7
 8002240:	080022d7 	.word	0x080022d7
 8002244:	080022d7 	.word	0x080022d7
 8002248:	080022d7 	.word	0x080022d7
 800224c:	080022d7 	.word	0x080022d7
 8002250:	080022d7 	.word	0x080022d7
 8002254:	080022d7 	.word	0x080022d7
 8002258:	080022d7 	.word	0x080022d7
 800225c:	080022d7 	.word	0x080022d7
 8002260:	080022d7 	.word	0x080022d7
 8002264:	080022d7 	.word	0x080022d7
 8002268:	080022d7 	.word	0x080022d7
 800226c:	08002285 	.word	0x08002285
 8002270:	08002299 	.word	0x08002299
 8002274:	4a79      	ldr	r2, [pc, #484]	@ (800245c <HAL_GPIO_Init+0x2b4>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d013      	beq.n	80022a2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800227a:	e02c      	b.n	80022d6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	623b      	str	r3, [r7, #32]
          break;
 8002282:	e029      	b.n	80022d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	3304      	adds	r3, #4
 800228a:	623b      	str	r3, [r7, #32]
          break;
 800228c:	e024      	b.n	80022d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	68db      	ldr	r3, [r3, #12]
 8002292:	3308      	adds	r3, #8
 8002294:	623b      	str	r3, [r7, #32]
          break;
 8002296:	e01f      	b.n	80022d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	330c      	adds	r3, #12
 800229e:	623b      	str	r3, [r7, #32]
          break;
 80022a0:	e01a      	b.n	80022d8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d102      	bne.n	80022b0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80022aa:	2304      	movs	r3, #4
 80022ac:	623b      	str	r3, [r7, #32]
          break;
 80022ae:	e013      	b.n	80022d8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d105      	bne.n	80022c4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80022b8:	2308      	movs	r3, #8
 80022ba:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	69fa      	ldr	r2, [r7, #28]
 80022c0:	611a      	str	r2, [r3, #16]
          break;
 80022c2:	e009      	b.n	80022d8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80022c4:	2308      	movs	r3, #8
 80022c6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	69fa      	ldr	r2, [r7, #28]
 80022cc:	615a      	str	r2, [r3, #20]
          break;
 80022ce:	e003      	b.n	80022d8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80022d0:	2300      	movs	r3, #0
 80022d2:	623b      	str	r3, [r7, #32]
          break;
 80022d4:	e000      	b.n	80022d8 <HAL_GPIO_Init+0x130>
          break;
 80022d6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80022d8:	69bb      	ldr	r3, [r7, #24]
 80022da:	2bff      	cmp	r3, #255	@ 0xff
 80022dc:	d801      	bhi.n	80022e2 <HAL_GPIO_Init+0x13a>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	e001      	b.n	80022e6 <HAL_GPIO_Init+0x13e>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	3304      	adds	r3, #4
 80022e6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80022e8:	69bb      	ldr	r3, [r7, #24]
 80022ea:	2bff      	cmp	r3, #255	@ 0xff
 80022ec:	d802      	bhi.n	80022f4 <HAL_GPIO_Init+0x14c>
 80022ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022f0:	009b      	lsls	r3, r3, #2
 80022f2:	e002      	b.n	80022fa <HAL_GPIO_Init+0x152>
 80022f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022f6:	3b08      	subs	r3, #8
 80022f8:	009b      	lsls	r3, r3, #2
 80022fa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	210f      	movs	r1, #15
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	fa01 f303 	lsl.w	r3, r1, r3
 8002308:	43db      	mvns	r3, r3
 800230a:	401a      	ands	r2, r3
 800230c:	6a39      	ldr	r1, [r7, #32]
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	fa01 f303 	lsl.w	r3, r1, r3
 8002314:	431a      	orrs	r2, r3
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002322:	2b00      	cmp	r3, #0
 8002324:	f000 80b1 	beq.w	800248a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002328:	4b4d      	ldr	r3, [pc, #308]	@ (8002460 <HAL_GPIO_Init+0x2b8>)
 800232a:	699b      	ldr	r3, [r3, #24]
 800232c:	4a4c      	ldr	r2, [pc, #304]	@ (8002460 <HAL_GPIO_Init+0x2b8>)
 800232e:	f043 0301 	orr.w	r3, r3, #1
 8002332:	6193      	str	r3, [r2, #24]
 8002334:	4b4a      	ldr	r3, [pc, #296]	@ (8002460 <HAL_GPIO_Init+0x2b8>)
 8002336:	699b      	ldr	r3, [r3, #24]
 8002338:	f003 0301 	and.w	r3, r3, #1
 800233c:	60bb      	str	r3, [r7, #8]
 800233e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002340:	4a48      	ldr	r2, [pc, #288]	@ (8002464 <HAL_GPIO_Init+0x2bc>)
 8002342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002344:	089b      	lsrs	r3, r3, #2
 8002346:	3302      	adds	r3, #2
 8002348:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800234c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800234e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002350:	f003 0303 	and.w	r3, r3, #3
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	220f      	movs	r2, #15
 8002358:	fa02 f303 	lsl.w	r3, r2, r3
 800235c:	43db      	mvns	r3, r3
 800235e:	68fa      	ldr	r2, [r7, #12]
 8002360:	4013      	ands	r3, r2
 8002362:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	4a40      	ldr	r2, [pc, #256]	@ (8002468 <HAL_GPIO_Init+0x2c0>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d013      	beq.n	8002394 <HAL_GPIO_Init+0x1ec>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	4a3f      	ldr	r2, [pc, #252]	@ (800246c <HAL_GPIO_Init+0x2c4>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d00d      	beq.n	8002390 <HAL_GPIO_Init+0x1e8>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	4a3e      	ldr	r2, [pc, #248]	@ (8002470 <HAL_GPIO_Init+0x2c8>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d007      	beq.n	800238c <HAL_GPIO_Init+0x1e4>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	4a3d      	ldr	r2, [pc, #244]	@ (8002474 <HAL_GPIO_Init+0x2cc>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d101      	bne.n	8002388 <HAL_GPIO_Init+0x1e0>
 8002384:	2303      	movs	r3, #3
 8002386:	e006      	b.n	8002396 <HAL_GPIO_Init+0x1ee>
 8002388:	2304      	movs	r3, #4
 800238a:	e004      	b.n	8002396 <HAL_GPIO_Init+0x1ee>
 800238c:	2302      	movs	r3, #2
 800238e:	e002      	b.n	8002396 <HAL_GPIO_Init+0x1ee>
 8002390:	2301      	movs	r3, #1
 8002392:	e000      	b.n	8002396 <HAL_GPIO_Init+0x1ee>
 8002394:	2300      	movs	r3, #0
 8002396:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002398:	f002 0203 	and.w	r2, r2, #3
 800239c:	0092      	lsls	r2, r2, #2
 800239e:	4093      	lsls	r3, r2
 80023a0:	68fa      	ldr	r2, [r7, #12]
 80023a2:	4313      	orrs	r3, r2
 80023a4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80023a6:	492f      	ldr	r1, [pc, #188]	@ (8002464 <HAL_GPIO_Init+0x2bc>)
 80023a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023aa:	089b      	lsrs	r3, r3, #2
 80023ac:	3302      	adds	r3, #2
 80023ae:	68fa      	ldr	r2, [r7, #12]
 80023b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d006      	beq.n	80023ce <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80023c0:	4b2d      	ldr	r3, [pc, #180]	@ (8002478 <HAL_GPIO_Init+0x2d0>)
 80023c2:	689a      	ldr	r2, [r3, #8]
 80023c4:	492c      	ldr	r1, [pc, #176]	@ (8002478 <HAL_GPIO_Init+0x2d0>)
 80023c6:	69bb      	ldr	r3, [r7, #24]
 80023c8:	4313      	orrs	r3, r2
 80023ca:	608b      	str	r3, [r1, #8]
 80023cc:	e006      	b.n	80023dc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80023ce:	4b2a      	ldr	r3, [pc, #168]	@ (8002478 <HAL_GPIO_Init+0x2d0>)
 80023d0:	689a      	ldr	r2, [r3, #8]
 80023d2:	69bb      	ldr	r3, [r7, #24]
 80023d4:	43db      	mvns	r3, r3
 80023d6:	4928      	ldr	r1, [pc, #160]	@ (8002478 <HAL_GPIO_Init+0x2d0>)
 80023d8:	4013      	ands	r3, r2
 80023da:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d006      	beq.n	80023f6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80023e8:	4b23      	ldr	r3, [pc, #140]	@ (8002478 <HAL_GPIO_Init+0x2d0>)
 80023ea:	68da      	ldr	r2, [r3, #12]
 80023ec:	4922      	ldr	r1, [pc, #136]	@ (8002478 <HAL_GPIO_Init+0x2d0>)
 80023ee:	69bb      	ldr	r3, [r7, #24]
 80023f0:	4313      	orrs	r3, r2
 80023f2:	60cb      	str	r3, [r1, #12]
 80023f4:	e006      	b.n	8002404 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80023f6:	4b20      	ldr	r3, [pc, #128]	@ (8002478 <HAL_GPIO_Init+0x2d0>)
 80023f8:	68da      	ldr	r2, [r3, #12]
 80023fa:	69bb      	ldr	r3, [r7, #24]
 80023fc:	43db      	mvns	r3, r3
 80023fe:	491e      	ldr	r1, [pc, #120]	@ (8002478 <HAL_GPIO_Init+0x2d0>)
 8002400:	4013      	ands	r3, r2
 8002402:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800240c:	2b00      	cmp	r3, #0
 800240e:	d006      	beq.n	800241e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002410:	4b19      	ldr	r3, [pc, #100]	@ (8002478 <HAL_GPIO_Init+0x2d0>)
 8002412:	685a      	ldr	r2, [r3, #4]
 8002414:	4918      	ldr	r1, [pc, #96]	@ (8002478 <HAL_GPIO_Init+0x2d0>)
 8002416:	69bb      	ldr	r3, [r7, #24]
 8002418:	4313      	orrs	r3, r2
 800241a:	604b      	str	r3, [r1, #4]
 800241c:	e006      	b.n	800242c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800241e:	4b16      	ldr	r3, [pc, #88]	@ (8002478 <HAL_GPIO_Init+0x2d0>)
 8002420:	685a      	ldr	r2, [r3, #4]
 8002422:	69bb      	ldr	r3, [r7, #24]
 8002424:	43db      	mvns	r3, r3
 8002426:	4914      	ldr	r1, [pc, #80]	@ (8002478 <HAL_GPIO_Init+0x2d0>)
 8002428:	4013      	ands	r3, r2
 800242a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002434:	2b00      	cmp	r3, #0
 8002436:	d021      	beq.n	800247c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002438:	4b0f      	ldr	r3, [pc, #60]	@ (8002478 <HAL_GPIO_Init+0x2d0>)
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	490e      	ldr	r1, [pc, #56]	@ (8002478 <HAL_GPIO_Init+0x2d0>)
 800243e:	69bb      	ldr	r3, [r7, #24]
 8002440:	4313      	orrs	r3, r2
 8002442:	600b      	str	r3, [r1, #0]
 8002444:	e021      	b.n	800248a <HAL_GPIO_Init+0x2e2>
 8002446:	bf00      	nop
 8002448:	10320000 	.word	0x10320000
 800244c:	10310000 	.word	0x10310000
 8002450:	10220000 	.word	0x10220000
 8002454:	10210000 	.word	0x10210000
 8002458:	10120000 	.word	0x10120000
 800245c:	10110000 	.word	0x10110000
 8002460:	40021000 	.word	0x40021000
 8002464:	40010000 	.word	0x40010000
 8002468:	40010800 	.word	0x40010800
 800246c:	40010c00 	.word	0x40010c00
 8002470:	40011000 	.word	0x40011000
 8002474:	40011400 	.word	0x40011400
 8002478:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800247c:	4b0b      	ldr	r3, [pc, #44]	@ (80024ac <HAL_GPIO_Init+0x304>)
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	69bb      	ldr	r3, [r7, #24]
 8002482:	43db      	mvns	r3, r3
 8002484:	4909      	ldr	r1, [pc, #36]	@ (80024ac <HAL_GPIO_Init+0x304>)
 8002486:	4013      	ands	r3, r2
 8002488:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800248a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800248c:	3301      	adds	r3, #1
 800248e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002496:	fa22 f303 	lsr.w	r3, r2, r3
 800249a:	2b00      	cmp	r3, #0
 800249c:	f47f ae8e 	bne.w	80021bc <HAL_GPIO_Init+0x14>
  }
}
 80024a0:	bf00      	nop
 80024a2:	bf00      	nop
 80024a4:	372c      	adds	r7, #44	@ 0x2c
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bc80      	pop	{r7}
 80024aa:	4770      	bx	lr
 80024ac:	40010400 	.word	0x40010400

080024b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b085      	sub	sp, #20
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
 80024b8:	460b      	mov	r3, r1
 80024ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	689a      	ldr	r2, [r3, #8]
 80024c0:	887b      	ldrh	r3, [r7, #2]
 80024c2:	4013      	ands	r3, r2
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d002      	beq.n	80024ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80024c8:	2301      	movs	r3, #1
 80024ca:	73fb      	strb	r3, [r7, #15]
 80024cc:	e001      	b.n	80024d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80024ce:	2300      	movs	r3, #0
 80024d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80024d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	3714      	adds	r7, #20
 80024d8:	46bd      	mov	sp, r7
 80024da:	bc80      	pop	{r7}
 80024dc:	4770      	bx	lr

080024de <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024de:	b480      	push	{r7}
 80024e0:	b083      	sub	sp, #12
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	6078      	str	r0, [r7, #4]
 80024e6:	460b      	mov	r3, r1
 80024e8:	807b      	strh	r3, [r7, #2]
 80024ea:	4613      	mov	r3, r2
 80024ec:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80024ee:	787b      	ldrb	r3, [r7, #1]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d003      	beq.n	80024fc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024f4:	887a      	ldrh	r2, [r7, #2]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80024fa:	e003      	b.n	8002504 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80024fc:	887b      	ldrh	r3, [r7, #2]
 80024fe:	041a      	lsls	r2, r3, #16
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	611a      	str	r2, [r3, #16]
}
 8002504:	bf00      	nop
 8002506:	370c      	adds	r7, #12
 8002508:	46bd      	mov	sp, r7
 800250a:	bc80      	pop	{r7}
 800250c:	4770      	bx	lr

0800250e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800250e:	b480      	push	{r7}
 8002510:	b085      	sub	sp, #20
 8002512:	af00      	add	r7, sp, #0
 8002514:	6078      	str	r0, [r7, #4]
 8002516:	460b      	mov	r3, r1
 8002518:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	68db      	ldr	r3, [r3, #12]
 800251e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002520:	887a      	ldrh	r2, [r7, #2]
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	4013      	ands	r3, r2
 8002526:	041a      	lsls	r2, r3, #16
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	43d9      	mvns	r1, r3
 800252c:	887b      	ldrh	r3, [r7, #2]
 800252e:	400b      	ands	r3, r1
 8002530:	431a      	orrs	r2, r3
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	611a      	str	r2, [r3, #16]
}
 8002536:	bf00      	nop
 8002538:	3714      	adds	r7, #20
 800253a:	46bd      	mov	sp, r7
 800253c:	bc80      	pop	{r7}
 800253e:	4770      	bx	lr

08002540 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	af00      	add	r7, sp, #0
 8002546:	4603      	mov	r3, r0
 8002548:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800254a:	4b08      	ldr	r3, [pc, #32]	@ (800256c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800254c:	695a      	ldr	r2, [r3, #20]
 800254e:	88fb      	ldrh	r3, [r7, #6]
 8002550:	4013      	ands	r3, r2
 8002552:	2b00      	cmp	r3, #0
 8002554:	d006      	beq.n	8002564 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002556:	4a05      	ldr	r2, [pc, #20]	@ (800256c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002558:	88fb      	ldrh	r3, [r7, #6]
 800255a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800255c:	88fb      	ldrh	r3, [r7, #6]
 800255e:	4618      	mov	r0, r3
 8002560:	f7fe fed7 	bl	8001312 <HAL_GPIO_EXTI_Callback>
  }
}
 8002564:	bf00      	nop
 8002566:	3708      	adds	r7, #8
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}
 800256c:	40010400 	.word	0x40010400

08002570 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b084      	sub	sp, #16
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d101      	bne.n	8002582 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e12b      	b.n	80027da <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002588:	b2db      	uxtb	r3, r3
 800258a:	2b00      	cmp	r3, #0
 800258c:	d106      	bne.n	800259c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2200      	movs	r2, #0
 8002592:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f7fe fd84 	bl	80010a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2224      	movs	r2, #36	@ 0x24
 80025a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f022 0201 	bic.w	r2, r2, #1
 80025b2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80025c2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80025d2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80025d4:	f001 fbfc 	bl	8003dd0 <HAL_RCC_GetPCLK1Freq>
 80025d8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	4a81      	ldr	r2, [pc, #516]	@ (80027e4 <HAL_I2C_Init+0x274>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d807      	bhi.n	80025f4 <HAL_I2C_Init+0x84>
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	4a80      	ldr	r2, [pc, #512]	@ (80027e8 <HAL_I2C_Init+0x278>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	bf94      	ite	ls
 80025ec:	2301      	movls	r3, #1
 80025ee:	2300      	movhi	r3, #0
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	e006      	b.n	8002602 <HAL_I2C_Init+0x92>
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	4a7d      	ldr	r2, [pc, #500]	@ (80027ec <HAL_I2C_Init+0x27c>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	bf94      	ite	ls
 80025fc:	2301      	movls	r3, #1
 80025fe:	2300      	movhi	r3, #0
 8002600:	b2db      	uxtb	r3, r3
 8002602:	2b00      	cmp	r3, #0
 8002604:	d001      	beq.n	800260a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e0e7      	b.n	80027da <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	4a78      	ldr	r2, [pc, #480]	@ (80027f0 <HAL_I2C_Init+0x280>)
 800260e:	fba2 2303 	umull	r2, r3, r2, r3
 8002612:	0c9b      	lsrs	r3, r3, #18
 8002614:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	68ba      	ldr	r2, [r7, #8]
 8002626:	430a      	orrs	r2, r1
 8002628:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	6a1b      	ldr	r3, [r3, #32]
 8002630:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	4a6a      	ldr	r2, [pc, #424]	@ (80027e4 <HAL_I2C_Init+0x274>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d802      	bhi.n	8002644 <HAL_I2C_Init+0xd4>
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	3301      	adds	r3, #1
 8002642:	e009      	b.n	8002658 <HAL_I2C_Init+0xe8>
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800264a:	fb02 f303 	mul.w	r3, r2, r3
 800264e:	4a69      	ldr	r2, [pc, #420]	@ (80027f4 <HAL_I2C_Init+0x284>)
 8002650:	fba2 2303 	umull	r2, r3, r2, r3
 8002654:	099b      	lsrs	r3, r3, #6
 8002656:	3301      	adds	r3, #1
 8002658:	687a      	ldr	r2, [r7, #4]
 800265a:	6812      	ldr	r2, [r2, #0]
 800265c:	430b      	orrs	r3, r1
 800265e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	69db      	ldr	r3, [r3, #28]
 8002666:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800266a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	495c      	ldr	r1, [pc, #368]	@ (80027e4 <HAL_I2C_Init+0x274>)
 8002674:	428b      	cmp	r3, r1
 8002676:	d819      	bhi.n	80026ac <HAL_I2C_Init+0x13c>
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	1e59      	subs	r1, r3, #1
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	005b      	lsls	r3, r3, #1
 8002682:	fbb1 f3f3 	udiv	r3, r1, r3
 8002686:	1c59      	adds	r1, r3, #1
 8002688:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800268c:	400b      	ands	r3, r1
 800268e:	2b00      	cmp	r3, #0
 8002690:	d00a      	beq.n	80026a8 <HAL_I2C_Init+0x138>
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	1e59      	subs	r1, r3, #1
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	005b      	lsls	r3, r3, #1
 800269c:	fbb1 f3f3 	udiv	r3, r1, r3
 80026a0:	3301      	adds	r3, #1
 80026a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026a6:	e051      	b.n	800274c <HAL_I2C_Init+0x1dc>
 80026a8:	2304      	movs	r3, #4
 80026aa:	e04f      	b.n	800274c <HAL_I2C_Init+0x1dc>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d111      	bne.n	80026d8 <HAL_I2C_Init+0x168>
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	1e58      	subs	r0, r3, #1
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6859      	ldr	r1, [r3, #4]
 80026bc:	460b      	mov	r3, r1
 80026be:	005b      	lsls	r3, r3, #1
 80026c0:	440b      	add	r3, r1
 80026c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80026c6:	3301      	adds	r3, #1
 80026c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	bf0c      	ite	eq
 80026d0:	2301      	moveq	r3, #1
 80026d2:	2300      	movne	r3, #0
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	e012      	b.n	80026fe <HAL_I2C_Init+0x18e>
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	1e58      	subs	r0, r3, #1
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6859      	ldr	r1, [r3, #4]
 80026e0:	460b      	mov	r3, r1
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	440b      	add	r3, r1
 80026e6:	0099      	lsls	r1, r3, #2
 80026e8:	440b      	add	r3, r1
 80026ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80026ee:	3301      	adds	r3, #1
 80026f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	bf0c      	ite	eq
 80026f8:	2301      	moveq	r3, #1
 80026fa:	2300      	movne	r3, #0
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d001      	beq.n	8002706 <HAL_I2C_Init+0x196>
 8002702:	2301      	movs	r3, #1
 8002704:	e022      	b.n	800274c <HAL_I2C_Init+0x1dc>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d10e      	bne.n	800272c <HAL_I2C_Init+0x1bc>
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	1e58      	subs	r0, r3, #1
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6859      	ldr	r1, [r3, #4]
 8002716:	460b      	mov	r3, r1
 8002718:	005b      	lsls	r3, r3, #1
 800271a:	440b      	add	r3, r1
 800271c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002720:	3301      	adds	r3, #1
 8002722:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002726:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800272a:	e00f      	b.n	800274c <HAL_I2C_Init+0x1dc>
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	1e58      	subs	r0, r3, #1
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6859      	ldr	r1, [r3, #4]
 8002734:	460b      	mov	r3, r1
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	440b      	add	r3, r1
 800273a:	0099      	lsls	r1, r3, #2
 800273c:	440b      	add	r3, r1
 800273e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002742:	3301      	adds	r3, #1
 8002744:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002748:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800274c:	6879      	ldr	r1, [r7, #4]
 800274e:	6809      	ldr	r1, [r1, #0]
 8002750:	4313      	orrs	r3, r2
 8002752:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	69da      	ldr	r2, [r3, #28]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6a1b      	ldr	r3, [r3, #32]
 8002766:	431a      	orrs	r2, r3
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	430a      	orrs	r2, r1
 800276e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800277a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	6911      	ldr	r1, [r2, #16]
 8002782:	687a      	ldr	r2, [r7, #4]
 8002784:	68d2      	ldr	r2, [r2, #12]
 8002786:	4311      	orrs	r1, r2
 8002788:	687a      	ldr	r2, [r7, #4]
 800278a:	6812      	ldr	r2, [r2, #0]
 800278c:	430b      	orrs	r3, r1
 800278e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	68db      	ldr	r3, [r3, #12]
 8002796:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	695a      	ldr	r2, [r3, #20]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	699b      	ldr	r3, [r3, #24]
 80027a2:	431a      	orrs	r2, r3
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	430a      	orrs	r2, r1
 80027aa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f042 0201 	orr.w	r2, r2, #1
 80027ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2200      	movs	r2, #0
 80027c0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2220      	movs	r2, #32
 80027c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2200      	movs	r2, #0
 80027ce:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2200      	movs	r2, #0
 80027d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80027d8:	2300      	movs	r3, #0
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3710      	adds	r7, #16
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	000186a0 	.word	0x000186a0
 80027e8:	001e847f 	.word	0x001e847f
 80027ec:	003d08ff 	.word	0x003d08ff
 80027f0:	431bde83 	.word	0x431bde83
 80027f4:	10624dd3 	.word	0x10624dd3

080027f8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b088      	sub	sp, #32
 80027fc:	af02      	add	r7, sp, #8
 80027fe:	60f8      	str	r0, [r7, #12]
 8002800:	4608      	mov	r0, r1
 8002802:	4611      	mov	r1, r2
 8002804:	461a      	mov	r2, r3
 8002806:	4603      	mov	r3, r0
 8002808:	817b      	strh	r3, [r7, #10]
 800280a:	460b      	mov	r3, r1
 800280c:	813b      	strh	r3, [r7, #8]
 800280e:	4613      	mov	r3, r2
 8002810:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002812:	f7ff fadb 	bl	8001dcc <HAL_GetTick>
 8002816:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800281e:	b2db      	uxtb	r3, r3
 8002820:	2b20      	cmp	r3, #32
 8002822:	f040 80d9 	bne.w	80029d8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	9300      	str	r3, [sp, #0]
 800282a:	2319      	movs	r3, #25
 800282c:	2201      	movs	r2, #1
 800282e:	496d      	ldr	r1, [pc, #436]	@ (80029e4 <HAL_I2C_Mem_Write+0x1ec>)
 8002830:	68f8      	ldr	r0, [r7, #12]
 8002832:	f000 fccd 	bl	80031d0 <I2C_WaitOnFlagUntilTimeout>
 8002836:	4603      	mov	r3, r0
 8002838:	2b00      	cmp	r3, #0
 800283a:	d001      	beq.n	8002840 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800283c:	2302      	movs	r3, #2
 800283e:	e0cc      	b.n	80029da <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002846:	2b01      	cmp	r3, #1
 8002848:	d101      	bne.n	800284e <HAL_I2C_Mem_Write+0x56>
 800284a:	2302      	movs	r3, #2
 800284c:	e0c5      	b.n	80029da <HAL_I2C_Mem_Write+0x1e2>
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2201      	movs	r2, #1
 8002852:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 0301 	and.w	r3, r3, #1
 8002860:	2b01      	cmp	r3, #1
 8002862:	d007      	beq.n	8002874 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f042 0201 	orr.w	r2, r2, #1
 8002872:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002882:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	2221      	movs	r2, #33	@ 0x21
 8002888:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	2240      	movs	r2, #64	@ 0x40
 8002890:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	2200      	movs	r2, #0
 8002898:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	6a3a      	ldr	r2, [r7, #32]
 800289e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80028a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028aa:	b29a      	uxth	r2, r3
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	4a4d      	ldr	r2, [pc, #308]	@ (80029e8 <HAL_I2C_Mem_Write+0x1f0>)
 80028b4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80028b6:	88f8      	ldrh	r0, [r7, #6]
 80028b8:	893a      	ldrh	r2, [r7, #8]
 80028ba:	8979      	ldrh	r1, [r7, #10]
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	9301      	str	r3, [sp, #4]
 80028c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028c2:	9300      	str	r3, [sp, #0]
 80028c4:	4603      	mov	r3, r0
 80028c6:	68f8      	ldr	r0, [r7, #12]
 80028c8:	f000 fb04 	bl	8002ed4 <I2C_RequestMemoryWrite>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d052      	beq.n	8002978 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e081      	b.n	80029da <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028d6:	697a      	ldr	r2, [r7, #20]
 80028d8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80028da:	68f8      	ldr	r0, [r7, #12]
 80028dc:	f000 fd92 	bl	8003404 <I2C_WaitOnTXEFlagUntilTimeout>
 80028e0:	4603      	mov	r3, r0
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d00d      	beq.n	8002902 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ea:	2b04      	cmp	r3, #4
 80028ec:	d107      	bne.n	80028fe <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028fc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e06b      	b.n	80029da <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002906:	781a      	ldrb	r2, [r3, #0]
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002912:	1c5a      	adds	r2, r3, #1
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800291c:	3b01      	subs	r3, #1
 800291e:	b29a      	uxth	r2, r3
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002928:	b29b      	uxth	r3, r3
 800292a:	3b01      	subs	r3, #1
 800292c:	b29a      	uxth	r2, r3
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	695b      	ldr	r3, [r3, #20]
 8002938:	f003 0304 	and.w	r3, r3, #4
 800293c:	2b04      	cmp	r3, #4
 800293e:	d11b      	bne.n	8002978 <HAL_I2C_Mem_Write+0x180>
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002944:	2b00      	cmp	r3, #0
 8002946:	d017      	beq.n	8002978 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800294c:	781a      	ldrb	r2, [r3, #0]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002958:	1c5a      	adds	r2, r3, #1
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002962:	3b01      	subs	r3, #1
 8002964:	b29a      	uxth	r2, r3
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800296e:	b29b      	uxth	r3, r3
 8002970:	3b01      	subs	r3, #1
 8002972:	b29a      	uxth	r2, r3
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800297c:	2b00      	cmp	r3, #0
 800297e:	d1aa      	bne.n	80028d6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002980:	697a      	ldr	r2, [r7, #20]
 8002982:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002984:	68f8      	ldr	r0, [r7, #12]
 8002986:	f000 fd85 	bl	8003494 <I2C_WaitOnBTFFlagUntilTimeout>
 800298a:	4603      	mov	r3, r0
 800298c:	2b00      	cmp	r3, #0
 800298e:	d00d      	beq.n	80029ac <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002994:	2b04      	cmp	r3, #4
 8002996:	d107      	bne.n	80029a8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029a6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	e016      	b.n	80029da <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2220      	movs	r2, #32
 80029c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2200      	movs	r2, #0
 80029c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	2200      	movs	r2, #0
 80029d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80029d4:	2300      	movs	r3, #0
 80029d6:	e000      	b.n	80029da <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80029d8:	2302      	movs	r3, #2
  }
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3718      	adds	r7, #24
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	bf00      	nop
 80029e4:	00100002 	.word	0x00100002
 80029e8:	ffff0000 	.word	0xffff0000

080029ec <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b08c      	sub	sp, #48	@ 0x30
 80029f0:	af02      	add	r7, sp, #8
 80029f2:	60f8      	str	r0, [r7, #12]
 80029f4:	4608      	mov	r0, r1
 80029f6:	4611      	mov	r1, r2
 80029f8:	461a      	mov	r2, r3
 80029fa:	4603      	mov	r3, r0
 80029fc:	817b      	strh	r3, [r7, #10]
 80029fe:	460b      	mov	r3, r1
 8002a00:	813b      	strh	r3, [r7, #8]
 8002a02:	4613      	mov	r3, r2
 8002a04:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002a06:	2300      	movs	r3, #0
 8002a08:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002a0a:	f7ff f9df 	bl	8001dcc <HAL_GetTick>
 8002a0e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a16:	b2db      	uxtb	r3, r3
 8002a18:	2b20      	cmp	r3, #32
 8002a1a:	f040 8250 	bne.w	8002ebe <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a20:	9300      	str	r3, [sp, #0]
 8002a22:	2319      	movs	r3, #25
 8002a24:	2201      	movs	r2, #1
 8002a26:	4982      	ldr	r1, [pc, #520]	@ (8002c30 <HAL_I2C_Mem_Read+0x244>)
 8002a28:	68f8      	ldr	r0, [r7, #12]
 8002a2a:	f000 fbd1 	bl	80031d0 <I2C_WaitOnFlagUntilTimeout>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d001      	beq.n	8002a38 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002a34:	2302      	movs	r3, #2
 8002a36:	e243      	b.n	8002ec0 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d101      	bne.n	8002a46 <HAL_I2C_Mem_Read+0x5a>
 8002a42:	2302      	movs	r3, #2
 8002a44:	e23c      	b.n	8002ec0 <HAL_I2C_Mem_Read+0x4d4>
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	2201      	movs	r2, #1
 8002a4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 0301 	and.w	r3, r3, #1
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d007      	beq.n	8002a6c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f042 0201 	orr.w	r2, r2, #1
 8002a6a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a7a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2222      	movs	r2, #34	@ 0x22
 8002a80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	2240      	movs	r2, #64	@ 0x40
 8002a88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002a96:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002a9c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002aa2:	b29a      	uxth	r2, r3
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	4a62      	ldr	r2, [pc, #392]	@ (8002c34 <HAL_I2C_Mem_Read+0x248>)
 8002aac:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002aae:	88f8      	ldrh	r0, [r7, #6]
 8002ab0:	893a      	ldrh	r2, [r7, #8]
 8002ab2:	8979      	ldrh	r1, [r7, #10]
 8002ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ab6:	9301      	str	r3, [sp, #4]
 8002ab8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002aba:	9300      	str	r3, [sp, #0]
 8002abc:	4603      	mov	r3, r0
 8002abe:	68f8      	ldr	r0, [r7, #12]
 8002ac0:	f000 fa9e 	bl	8003000 <I2C_RequestMemoryRead>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d001      	beq.n	8002ace <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e1f8      	b.n	8002ec0 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d113      	bne.n	8002afe <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	61fb      	str	r3, [r7, #28]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	695b      	ldr	r3, [r3, #20]
 8002ae0:	61fb      	str	r3, [r7, #28]
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	699b      	ldr	r3, [r3, #24]
 8002ae8:	61fb      	str	r3, [r7, #28]
 8002aea:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002afa:	601a      	str	r2, [r3, #0]
 8002afc:	e1cc      	b.n	8002e98 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d11e      	bne.n	8002b44 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b14:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002b16:	b672      	cpsid	i
}
 8002b18:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	61bb      	str	r3, [r7, #24]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	695b      	ldr	r3, [r3, #20]
 8002b24:	61bb      	str	r3, [r7, #24]
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	699b      	ldr	r3, [r3, #24]
 8002b2c:	61bb      	str	r3, [r7, #24]
 8002b2e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b3e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002b40:	b662      	cpsie	i
}
 8002b42:	e035      	b.n	8002bb0 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b48:	2b02      	cmp	r3, #2
 8002b4a:	d11e      	bne.n	8002b8a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002b5a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002b5c:	b672      	cpsid	i
}
 8002b5e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b60:	2300      	movs	r3, #0
 8002b62:	617b      	str	r3, [r7, #20]
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	695b      	ldr	r3, [r3, #20]
 8002b6a:	617b      	str	r3, [r7, #20]
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	699b      	ldr	r3, [r3, #24]
 8002b72:	617b      	str	r3, [r7, #20]
 8002b74:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b84:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002b86:	b662      	cpsie	i
}
 8002b88:	e012      	b.n	8002bb0 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002b98:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	613b      	str	r3, [r7, #16]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	695b      	ldr	r3, [r3, #20]
 8002ba4:	613b      	str	r3, [r7, #16]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	699b      	ldr	r3, [r3, #24]
 8002bac:	613b      	str	r3, [r7, #16]
 8002bae:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002bb0:	e172      	b.n	8002e98 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bb6:	2b03      	cmp	r3, #3
 8002bb8:	f200 811f 	bhi.w	8002dfa <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d123      	bne.n	8002c0c <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bc4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bc6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002bc8:	68f8      	ldr	r0, [r7, #12]
 8002bca:	f000 fcab 	bl	8003524 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d001      	beq.n	8002bd8 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e173      	b.n	8002ec0 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	691a      	ldr	r2, [r3, #16]
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002be2:	b2d2      	uxtb	r2, r2
 8002be4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bea:	1c5a      	adds	r2, r3, #1
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bf4:	3b01      	subs	r3, #1
 8002bf6:	b29a      	uxth	r2, r3
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c00:	b29b      	uxth	r3, r3
 8002c02:	3b01      	subs	r3, #1
 8002c04:	b29a      	uxth	r2, r3
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002c0a:	e145      	b.n	8002e98 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c10:	2b02      	cmp	r3, #2
 8002c12:	d152      	bne.n	8002cba <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c16:	9300      	str	r3, [sp, #0]
 8002c18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	4906      	ldr	r1, [pc, #24]	@ (8002c38 <HAL_I2C_Mem_Read+0x24c>)
 8002c1e:	68f8      	ldr	r0, [r7, #12]
 8002c20:	f000 fad6 	bl	80031d0 <I2C_WaitOnFlagUntilTimeout>
 8002c24:	4603      	mov	r3, r0
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d008      	beq.n	8002c3c <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e148      	b.n	8002ec0 <HAL_I2C_Mem_Read+0x4d4>
 8002c2e:	bf00      	nop
 8002c30:	00100002 	.word	0x00100002
 8002c34:	ffff0000 	.word	0xffff0000
 8002c38:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002c3c:	b672      	cpsid	i
}
 8002c3e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c4e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	691a      	ldr	r2, [r3, #16]
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c5a:	b2d2      	uxtb	r2, r2
 8002c5c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c62:	1c5a      	adds	r2, r3, #1
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c6c:	3b01      	subs	r3, #1
 8002c6e:	b29a      	uxth	r2, r3
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c78:	b29b      	uxth	r3, r3
 8002c7a:	3b01      	subs	r3, #1
 8002c7c:	b29a      	uxth	r2, r3
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002c82:	b662      	cpsie	i
}
 8002c84:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	691a      	ldr	r2, [r3, #16]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c90:	b2d2      	uxtb	r2, r2
 8002c92:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c98:	1c5a      	adds	r2, r3, #1
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ca2:	3b01      	subs	r3, #1
 8002ca4:	b29a      	uxth	r2, r3
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cae:	b29b      	uxth	r3, r3
 8002cb0:	3b01      	subs	r3, #1
 8002cb2:	b29a      	uxth	r2, r3
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002cb8:	e0ee      	b.n	8002e98 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cbc:	9300      	str	r3, [sp, #0]
 8002cbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	4981      	ldr	r1, [pc, #516]	@ (8002ec8 <HAL_I2C_Mem_Read+0x4dc>)
 8002cc4:	68f8      	ldr	r0, [r7, #12]
 8002cc6:	f000 fa83 	bl	80031d0 <I2C_WaitOnFlagUntilTimeout>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d001      	beq.n	8002cd4 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e0f5      	b.n	8002ec0 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ce2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002ce4:	b672      	cpsid	i
}
 8002ce6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	691a      	ldr	r2, [r3, #16]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cf2:	b2d2      	uxtb	r2, r2
 8002cf4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cfa:	1c5a      	adds	r2, r3, #1
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d04:	3b01      	subs	r3, #1
 8002d06:	b29a      	uxth	r2, r3
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d10:	b29b      	uxth	r3, r3
 8002d12:	3b01      	subs	r3, #1
 8002d14:	b29a      	uxth	r2, r3
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002d1a:	4b6c      	ldr	r3, [pc, #432]	@ (8002ecc <HAL_I2C_Mem_Read+0x4e0>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	08db      	lsrs	r3, r3, #3
 8002d20:	4a6b      	ldr	r2, [pc, #428]	@ (8002ed0 <HAL_I2C_Mem_Read+0x4e4>)
 8002d22:	fba2 2303 	umull	r2, r3, r2, r3
 8002d26:	0a1a      	lsrs	r2, r3, #8
 8002d28:	4613      	mov	r3, r2
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	4413      	add	r3, r2
 8002d2e:	00da      	lsls	r2, r3, #3
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002d34:	6a3b      	ldr	r3, [r7, #32]
 8002d36:	3b01      	subs	r3, #1
 8002d38:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002d3a:	6a3b      	ldr	r3, [r7, #32]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d118      	bne.n	8002d72 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2200      	movs	r2, #0
 8002d44:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2220      	movs	r2, #32
 8002d4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2200      	movs	r2, #0
 8002d52:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d5a:	f043 0220 	orr.w	r2, r3, #32
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002d62:	b662      	cpsie	i
}
 8002d64:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e0a6      	b.n	8002ec0 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	695b      	ldr	r3, [r3, #20]
 8002d78:	f003 0304 	and.w	r3, r3, #4
 8002d7c:	2b04      	cmp	r3, #4
 8002d7e:	d1d9      	bne.n	8002d34 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d8e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	691a      	ldr	r2, [r3, #16]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d9a:	b2d2      	uxtb	r2, r2
 8002d9c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002da2:	1c5a      	adds	r2, r3, #1
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dac:	3b01      	subs	r3, #1
 8002dae:	b29a      	uxth	r2, r3
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002db8:	b29b      	uxth	r3, r3
 8002dba:	3b01      	subs	r3, #1
 8002dbc:	b29a      	uxth	r2, r3
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002dc2:	b662      	cpsie	i
}
 8002dc4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	691a      	ldr	r2, [r3, #16]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dd0:	b2d2      	uxtb	r2, r2
 8002dd2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dd8:	1c5a      	adds	r2, r3, #1
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002de2:	3b01      	subs	r3, #1
 8002de4:	b29a      	uxth	r2, r3
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dee:	b29b      	uxth	r3, r3
 8002df0:	3b01      	subs	r3, #1
 8002df2:	b29a      	uxth	r2, r3
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002df8:	e04e      	b.n	8002e98 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002dfa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002dfc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002dfe:	68f8      	ldr	r0, [r7, #12]
 8002e00:	f000 fb90 	bl	8003524 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002e04:	4603      	mov	r3, r0
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d001      	beq.n	8002e0e <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e058      	b.n	8002ec0 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	691a      	ldr	r2, [r3, #16]
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e18:	b2d2      	uxtb	r2, r2
 8002e1a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e20:	1c5a      	adds	r2, r3, #1
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e2a:	3b01      	subs	r3, #1
 8002e2c:	b29a      	uxth	r2, r3
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e36:	b29b      	uxth	r3, r3
 8002e38:	3b01      	subs	r3, #1
 8002e3a:	b29a      	uxth	r2, r3
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	695b      	ldr	r3, [r3, #20]
 8002e46:	f003 0304 	and.w	r3, r3, #4
 8002e4a:	2b04      	cmp	r3, #4
 8002e4c:	d124      	bne.n	8002e98 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e52:	2b03      	cmp	r3, #3
 8002e54:	d107      	bne.n	8002e66 <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e64:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	691a      	ldr	r2, [r3, #16]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e70:	b2d2      	uxtb	r2, r2
 8002e72:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e78:	1c5a      	adds	r2, r3, #1
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e82:	3b01      	subs	r3, #1
 8002e84:	b29a      	uxth	r2, r3
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e8e:	b29b      	uxth	r3, r3
 8002e90:	3b01      	subs	r3, #1
 8002e92:	b29a      	uxth	r2, r3
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	f47f ae88 	bne.w	8002bb2 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2220      	movs	r2, #32
 8002ea6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2200      	movs	r2, #0
 8002eae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	e000      	b.n	8002ec0 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 8002ebe:	2302      	movs	r3, #2
  }
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	3728      	adds	r7, #40	@ 0x28
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}
 8002ec8:	00010004 	.word	0x00010004
 8002ecc:	20000000 	.word	0x20000000
 8002ed0:	14f8b589 	.word	0x14f8b589

08002ed4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b088      	sub	sp, #32
 8002ed8:	af02      	add	r7, sp, #8
 8002eda:	60f8      	str	r0, [r7, #12]
 8002edc:	4608      	mov	r0, r1
 8002ede:	4611      	mov	r1, r2
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	817b      	strh	r3, [r7, #10]
 8002ee6:	460b      	mov	r3, r1
 8002ee8:	813b      	strh	r3, [r7, #8]
 8002eea:	4613      	mov	r3, r2
 8002eec:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002efc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f00:	9300      	str	r3, [sp, #0]
 8002f02:	6a3b      	ldr	r3, [r7, #32]
 8002f04:	2200      	movs	r2, #0
 8002f06:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002f0a:	68f8      	ldr	r0, [r7, #12]
 8002f0c:	f000 f960 	bl	80031d0 <I2C_WaitOnFlagUntilTimeout>
 8002f10:	4603      	mov	r3, r0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d00d      	beq.n	8002f32 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f20:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f24:	d103      	bne.n	8002f2e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f2c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002f2e:	2303      	movs	r3, #3
 8002f30:	e05f      	b.n	8002ff2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002f32:	897b      	ldrh	r3, [r7, #10]
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	461a      	mov	r2, r3
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002f40:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f44:	6a3a      	ldr	r2, [r7, #32]
 8002f46:	492d      	ldr	r1, [pc, #180]	@ (8002ffc <I2C_RequestMemoryWrite+0x128>)
 8002f48:	68f8      	ldr	r0, [r7, #12]
 8002f4a:	f000 f9bb 	bl	80032c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d001      	beq.n	8002f58 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	e04c      	b.n	8002ff2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f58:	2300      	movs	r3, #0
 8002f5a:	617b      	str	r3, [r7, #20]
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	695b      	ldr	r3, [r3, #20]
 8002f62:	617b      	str	r3, [r7, #20]
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	699b      	ldr	r3, [r3, #24]
 8002f6a:	617b      	str	r3, [r7, #20]
 8002f6c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f70:	6a39      	ldr	r1, [r7, #32]
 8002f72:	68f8      	ldr	r0, [r7, #12]
 8002f74:	f000 fa46 	bl	8003404 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d00d      	beq.n	8002f9a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f82:	2b04      	cmp	r3, #4
 8002f84:	d107      	bne.n	8002f96 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f94:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e02b      	b.n	8002ff2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002f9a:	88fb      	ldrh	r3, [r7, #6]
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d105      	bne.n	8002fac <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002fa0:	893b      	ldrh	r3, [r7, #8]
 8002fa2:	b2da      	uxtb	r2, r3
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	611a      	str	r2, [r3, #16]
 8002faa:	e021      	b.n	8002ff0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002fac:	893b      	ldrh	r3, [r7, #8]
 8002fae:	0a1b      	lsrs	r3, r3, #8
 8002fb0:	b29b      	uxth	r3, r3
 8002fb2:	b2da      	uxtb	r2, r3
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fbc:	6a39      	ldr	r1, [r7, #32]
 8002fbe:	68f8      	ldr	r0, [r7, #12]
 8002fc0:	f000 fa20 	bl	8003404 <I2C_WaitOnTXEFlagUntilTimeout>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d00d      	beq.n	8002fe6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fce:	2b04      	cmp	r3, #4
 8002fd0:	d107      	bne.n	8002fe2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002fe0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e005      	b.n	8002ff2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002fe6:	893b      	ldrh	r3, [r7, #8]
 8002fe8:	b2da      	uxtb	r2, r3
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002ff0:	2300      	movs	r3, #0
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3718      	adds	r7, #24
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	00010002 	.word	0x00010002

08003000 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b088      	sub	sp, #32
 8003004:	af02      	add	r7, sp, #8
 8003006:	60f8      	str	r0, [r7, #12]
 8003008:	4608      	mov	r0, r1
 800300a:	4611      	mov	r1, r2
 800300c:	461a      	mov	r2, r3
 800300e:	4603      	mov	r3, r0
 8003010:	817b      	strh	r3, [r7, #10]
 8003012:	460b      	mov	r3, r1
 8003014:	813b      	strh	r3, [r7, #8]
 8003016:	4613      	mov	r3, r2
 8003018:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003028:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003038:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800303a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800303c:	9300      	str	r3, [sp, #0]
 800303e:	6a3b      	ldr	r3, [r7, #32]
 8003040:	2200      	movs	r2, #0
 8003042:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003046:	68f8      	ldr	r0, [r7, #12]
 8003048:	f000 f8c2 	bl	80031d0 <I2C_WaitOnFlagUntilTimeout>
 800304c:	4603      	mov	r3, r0
 800304e:	2b00      	cmp	r3, #0
 8003050:	d00d      	beq.n	800306e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800305c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003060:	d103      	bne.n	800306a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003068:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800306a:	2303      	movs	r3, #3
 800306c:	e0aa      	b.n	80031c4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800306e:	897b      	ldrh	r3, [r7, #10]
 8003070:	b2db      	uxtb	r3, r3
 8003072:	461a      	mov	r2, r3
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800307c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800307e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003080:	6a3a      	ldr	r2, [r7, #32]
 8003082:	4952      	ldr	r1, [pc, #328]	@ (80031cc <I2C_RequestMemoryRead+0x1cc>)
 8003084:	68f8      	ldr	r0, [r7, #12]
 8003086:	f000 f91d 	bl	80032c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800308a:	4603      	mov	r3, r0
 800308c:	2b00      	cmp	r3, #0
 800308e:	d001      	beq.n	8003094 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	e097      	b.n	80031c4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003094:	2300      	movs	r3, #0
 8003096:	617b      	str	r3, [r7, #20]
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	695b      	ldr	r3, [r3, #20]
 800309e:	617b      	str	r3, [r7, #20]
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	699b      	ldr	r3, [r3, #24]
 80030a6:	617b      	str	r3, [r7, #20]
 80030a8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030ac:	6a39      	ldr	r1, [r7, #32]
 80030ae:	68f8      	ldr	r0, [r7, #12]
 80030b0:	f000 f9a8 	bl	8003404 <I2C_WaitOnTXEFlagUntilTimeout>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d00d      	beq.n	80030d6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030be:	2b04      	cmp	r3, #4
 80030c0:	d107      	bne.n	80030d2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030d0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e076      	b.n	80031c4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80030d6:	88fb      	ldrh	r3, [r7, #6]
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d105      	bne.n	80030e8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80030dc:	893b      	ldrh	r3, [r7, #8]
 80030de:	b2da      	uxtb	r2, r3
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	611a      	str	r2, [r3, #16]
 80030e6:	e021      	b.n	800312c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80030e8:	893b      	ldrh	r3, [r7, #8]
 80030ea:	0a1b      	lsrs	r3, r3, #8
 80030ec:	b29b      	uxth	r3, r3
 80030ee:	b2da      	uxtb	r2, r3
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030f8:	6a39      	ldr	r1, [r7, #32]
 80030fa:	68f8      	ldr	r0, [r7, #12]
 80030fc:	f000 f982 	bl	8003404 <I2C_WaitOnTXEFlagUntilTimeout>
 8003100:	4603      	mov	r3, r0
 8003102:	2b00      	cmp	r3, #0
 8003104:	d00d      	beq.n	8003122 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800310a:	2b04      	cmp	r3, #4
 800310c:	d107      	bne.n	800311e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800311c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e050      	b.n	80031c4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003122:	893b      	ldrh	r3, [r7, #8]
 8003124:	b2da      	uxtb	r2, r3
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800312c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800312e:	6a39      	ldr	r1, [r7, #32]
 8003130:	68f8      	ldr	r0, [r7, #12]
 8003132:	f000 f967 	bl	8003404 <I2C_WaitOnTXEFlagUntilTimeout>
 8003136:	4603      	mov	r3, r0
 8003138:	2b00      	cmp	r3, #0
 800313a:	d00d      	beq.n	8003158 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003140:	2b04      	cmp	r3, #4
 8003142:	d107      	bne.n	8003154 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003152:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	e035      	b.n	80031c4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003166:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800316a:	9300      	str	r3, [sp, #0]
 800316c:	6a3b      	ldr	r3, [r7, #32]
 800316e:	2200      	movs	r2, #0
 8003170:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003174:	68f8      	ldr	r0, [r7, #12]
 8003176:	f000 f82b 	bl	80031d0 <I2C_WaitOnFlagUntilTimeout>
 800317a:	4603      	mov	r3, r0
 800317c:	2b00      	cmp	r3, #0
 800317e:	d00d      	beq.n	800319c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800318a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800318e:	d103      	bne.n	8003198 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003196:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003198:	2303      	movs	r3, #3
 800319a:	e013      	b.n	80031c4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800319c:	897b      	ldrh	r3, [r7, #10]
 800319e:	b2db      	uxtb	r3, r3
 80031a0:	f043 0301 	orr.w	r3, r3, #1
 80031a4:	b2da      	uxtb	r2, r3
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80031ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031ae:	6a3a      	ldr	r2, [r7, #32]
 80031b0:	4906      	ldr	r1, [pc, #24]	@ (80031cc <I2C_RequestMemoryRead+0x1cc>)
 80031b2:	68f8      	ldr	r0, [r7, #12]
 80031b4:	f000 f886 	bl	80032c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80031b8:	4603      	mov	r3, r0
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d001      	beq.n	80031c2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e000      	b.n	80031c4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80031c2:	2300      	movs	r3, #0
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	3718      	adds	r7, #24
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}
 80031cc:	00010002 	.word	0x00010002

080031d0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b084      	sub	sp, #16
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	60f8      	str	r0, [r7, #12]
 80031d8:	60b9      	str	r1, [r7, #8]
 80031da:	603b      	str	r3, [r7, #0]
 80031dc:	4613      	mov	r3, r2
 80031de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80031e0:	e048      	b.n	8003274 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031e8:	d044      	beq.n	8003274 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031ea:	f7fe fdef 	bl	8001dcc <HAL_GetTick>
 80031ee:	4602      	mov	r2, r0
 80031f0:	69bb      	ldr	r3, [r7, #24]
 80031f2:	1ad3      	subs	r3, r2, r3
 80031f4:	683a      	ldr	r2, [r7, #0]
 80031f6:	429a      	cmp	r2, r3
 80031f8:	d302      	bcc.n	8003200 <I2C_WaitOnFlagUntilTimeout+0x30>
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d139      	bne.n	8003274 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	0c1b      	lsrs	r3, r3, #16
 8003204:	b2db      	uxtb	r3, r3
 8003206:	2b01      	cmp	r3, #1
 8003208:	d10d      	bne.n	8003226 <I2C_WaitOnFlagUntilTimeout+0x56>
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	695b      	ldr	r3, [r3, #20]
 8003210:	43da      	mvns	r2, r3
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	4013      	ands	r3, r2
 8003216:	b29b      	uxth	r3, r3
 8003218:	2b00      	cmp	r3, #0
 800321a:	bf0c      	ite	eq
 800321c:	2301      	moveq	r3, #1
 800321e:	2300      	movne	r3, #0
 8003220:	b2db      	uxtb	r3, r3
 8003222:	461a      	mov	r2, r3
 8003224:	e00c      	b.n	8003240 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	699b      	ldr	r3, [r3, #24]
 800322c:	43da      	mvns	r2, r3
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	4013      	ands	r3, r2
 8003232:	b29b      	uxth	r3, r3
 8003234:	2b00      	cmp	r3, #0
 8003236:	bf0c      	ite	eq
 8003238:	2301      	moveq	r3, #1
 800323a:	2300      	movne	r3, #0
 800323c:	b2db      	uxtb	r3, r3
 800323e:	461a      	mov	r2, r3
 8003240:	79fb      	ldrb	r3, [r7, #7]
 8003242:	429a      	cmp	r2, r3
 8003244:	d116      	bne.n	8003274 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2200      	movs	r2, #0
 800324a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2220      	movs	r2, #32
 8003250:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2200      	movs	r2, #0
 8003258:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003260:	f043 0220 	orr.w	r2, r3, #32
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2200      	movs	r2, #0
 800326c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	e023      	b.n	80032bc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	0c1b      	lsrs	r3, r3, #16
 8003278:	b2db      	uxtb	r3, r3
 800327a:	2b01      	cmp	r3, #1
 800327c:	d10d      	bne.n	800329a <I2C_WaitOnFlagUntilTimeout+0xca>
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	695b      	ldr	r3, [r3, #20]
 8003284:	43da      	mvns	r2, r3
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	4013      	ands	r3, r2
 800328a:	b29b      	uxth	r3, r3
 800328c:	2b00      	cmp	r3, #0
 800328e:	bf0c      	ite	eq
 8003290:	2301      	moveq	r3, #1
 8003292:	2300      	movne	r3, #0
 8003294:	b2db      	uxtb	r3, r3
 8003296:	461a      	mov	r2, r3
 8003298:	e00c      	b.n	80032b4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	699b      	ldr	r3, [r3, #24]
 80032a0:	43da      	mvns	r2, r3
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	4013      	ands	r3, r2
 80032a6:	b29b      	uxth	r3, r3
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	bf0c      	ite	eq
 80032ac:	2301      	moveq	r3, #1
 80032ae:	2300      	movne	r3, #0
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	461a      	mov	r2, r3
 80032b4:	79fb      	ldrb	r3, [r7, #7]
 80032b6:	429a      	cmp	r2, r3
 80032b8:	d093      	beq.n	80031e2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80032ba:	2300      	movs	r3, #0
}
 80032bc:	4618      	mov	r0, r3
 80032be:	3710      	adds	r7, #16
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}

080032c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b084      	sub	sp, #16
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	60f8      	str	r0, [r7, #12]
 80032cc:	60b9      	str	r1, [r7, #8]
 80032ce:	607a      	str	r2, [r7, #4]
 80032d0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80032d2:	e071      	b.n	80033b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	695b      	ldr	r3, [r3, #20]
 80032da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032e2:	d123      	bne.n	800332c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032f2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80032fc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2200      	movs	r2, #0
 8003302:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2220      	movs	r2, #32
 8003308:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2200      	movs	r2, #0
 8003310:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003318:	f043 0204 	orr.w	r2, r3, #4
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2200      	movs	r2, #0
 8003324:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	e067      	b.n	80033fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003332:	d041      	beq.n	80033b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003334:	f7fe fd4a 	bl	8001dcc <HAL_GetTick>
 8003338:	4602      	mov	r2, r0
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	1ad3      	subs	r3, r2, r3
 800333e:	687a      	ldr	r2, [r7, #4]
 8003340:	429a      	cmp	r2, r3
 8003342:	d302      	bcc.n	800334a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d136      	bne.n	80033b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	0c1b      	lsrs	r3, r3, #16
 800334e:	b2db      	uxtb	r3, r3
 8003350:	2b01      	cmp	r3, #1
 8003352:	d10c      	bne.n	800336e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	695b      	ldr	r3, [r3, #20]
 800335a:	43da      	mvns	r2, r3
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	4013      	ands	r3, r2
 8003360:	b29b      	uxth	r3, r3
 8003362:	2b00      	cmp	r3, #0
 8003364:	bf14      	ite	ne
 8003366:	2301      	movne	r3, #1
 8003368:	2300      	moveq	r3, #0
 800336a:	b2db      	uxtb	r3, r3
 800336c:	e00b      	b.n	8003386 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	699b      	ldr	r3, [r3, #24]
 8003374:	43da      	mvns	r2, r3
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	4013      	ands	r3, r2
 800337a:	b29b      	uxth	r3, r3
 800337c:	2b00      	cmp	r3, #0
 800337e:	bf14      	ite	ne
 8003380:	2301      	movne	r3, #1
 8003382:	2300      	moveq	r3, #0
 8003384:	b2db      	uxtb	r3, r3
 8003386:	2b00      	cmp	r3, #0
 8003388:	d016      	beq.n	80033b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2200      	movs	r2, #0
 800338e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2220      	movs	r2, #32
 8003394:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2200      	movs	r2, #0
 800339c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033a4:	f043 0220 	orr.w	r2, r3, #32
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2200      	movs	r2, #0
 80033b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	e021      	b.n	80033fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	0c1b      	lsrs	r3, r3, #16
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d10c      	bne.n	80033dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	695b      	ldr	r3, [r3, #20]
 80033c8:	43da      	mvns	r2, r3
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	4013      	ands	r3, r2
 80033ce:	b29b      	uxth	r3, r3
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	bf14      	ite	ne
 80033d4:	2301      	movne	r3, #1
 80033d6:	2300      	moveq	r3, #0
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	e00b      	b.n	80033f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	699b      	ldr	r3, [r3, #24]
 80033e2:	43da      	mvns	r2, r3
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	4013      	ands	r3, r2
 80033e8:	b29b      	uxth	r3, r3
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	bf14      	ite	ne
 80033ee:	2301      	movne	r3, #1
 80033f0:	2300      	moveq	r3, #0
 80033f2:	b2db      	uxtb	r3, r3
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	f47f af6d 	bne.w	80032d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80033fa:	2300      	movs	r3, #0
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	3710      	adds	r7, #16
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}

08003404 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b084      	sub	sp, #16
 8003408:	af00      	add	r7, sp, #0
 800340a:	60f8      	str	r0, [r7, #12]
 800340c:	60b9      	str	r1, [r7, #8]
 800340e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003410:	e034      	b.n	800347c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003412:	68f8      	ldr	r0, [r7, #12]
 8003414:	f000 f8e3 	bl	80035de <I2C_IsAcknowledgeFailed>
 8003418:	4603      	mov	r3, r0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d001      	beq.n	8003422 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e034      	b.n	800348c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003428:	d028      	beq.n	800347c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800342a:	f7fe fccf 	bl	8001dcc <HAL_GetTick>
 800342e:	4602      	mov	r2, r0
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	1ad3      	subs	r3, r2, r3
 8003434:	68ba      	ldr	r2, [r7, #8]
 8003436:	429a      	cmp	r2, r3
 8003438:	d302      	bcc.n	8003440 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d11d      	bne.n	800347c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	695b      	ldr	r3, [r3, #20]
 8003446:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800344a:	2b80      	cmp	r3, #128	@ 0x80
 800344c:	d016      	beq.n	800347c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2200      	movs	r2, #0
 8003452:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2220      	movs	r2, #32
 8003458:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2200      	movs	r2, #0
 8003460:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003468:	f043 0220 	orr.w	r2, r3, #32
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2200      	movs	r2, #0
 8003474:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	e007      	b.n	800348c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	695b      	ldr	r3, [r3, #20]
 8003482:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003486:	2b80      	cmp	r3, #128	@ 0x80
 8003488:	d1c3      	bne.n	8003412 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800348a:	2300      	movs	r3, #0
}
 800348c:	4618      	mov	r0, r3
 800348e:	3710      	adds	r7, #16
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}

08003494 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b084      	sub	sp, #16
 8003498:	af00      	add	r7, sp, #0
 800349a:	60f8      	str	r0, [r7, #12]
 800349c:	60b9      	str	r1, [r7, #8]
 800349e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80034a0:	e034      	b.n	800350c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80034a2:	68f8      	ldr	r0, [r7, #12]
 80034a4:	f000 f89b 	bl	80035de <I2C_IsAcknowledgeFailed>
 80034a8:	4603      	mov	r3, r0
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d001      	beq.n	80034b2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	e034      	b.n	800351c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034b8:	d028      	beq.n	800350c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034ba:	f7fe fc87 	bl	8001dcc <HAL_GetTick>
 80034be:	4602      	mov	r2, r0
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	1ad3      	subs	r3, r2, r3
 80034c4:	68ba      	ldr	r2, [r7, #8]
 80034c6:	429a      	cmp	r2, r3
 80034c8:	d302      	bcc.n	80034d0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d11d      	bne.n	800350c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	695b      	ldr	r3, [r3, #20]
 80034d6:	f003 0304 	and.w	r3, r3, #4
 80034da:	2b04      	cmp	r3, #4
 80034dc:	d016      	beq.n	800350c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2200      	movs	r2, #0
 80034e2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2220      	movs	r2, #32
 80034e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2200      	movs	r2, #0
 80034f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034f8:	f043 0220 	orr.w	r2, r3, #32
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2200      	movs	r2, #0
 8003504:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	e007      	b.n	800351c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	695b      	ldr	r3, [r3, #20]
 8003512:	f003 0304 	and.w	r3, r3, #4
 8003516:	2b04      	cmp	r3, #4
 8003518:	d1c3      	bne.n	80034a2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800351a:	2300      	movs	r3, #0
}
 800351c:	4618      	mov	r0, r3
 800351e:	3710      	adds	r7, #16
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}

08003524 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b084      	sub	sp, #16
 8003528:	af00      	add	r7, sp, #0
 800352a:	60f8      	str	r0, [r7, #12]
 800352c:	60b9      	str	r1, [r7, #8]
 800352e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003530:	e049      	b.n	80035c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	695b      	ldr	r3, [r3, #20]
 8003538:	f003 0310 	and.w	r3, r3, #16
 800353c:	2b10      	cmp	r3, #16
 800353e:	d119      	bne.n	8003574 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f06f 0210 	mvn.w	r2, #16
 8003548:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2200      	movs	r2, #0
 800354e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2220      	movs	r2, #32
 8003554:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2200      	movs	r2, #0
 800355c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2200      	movs	r2, #0
 800356c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	e030      	b.n	80035d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003574:	f7fe fc2a 	bl	8001dcc <HAL_GetTick>
 8003578:	4602      	mov	r2, r0
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	68ba      	ldr	r2, [r7, #8]
 8003580:	429a      	cmp	r2, r3
 8003582:	d302      	bcc.n	800358a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d11d      	bne.n	80035c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	695b      	ldr	r3, [r3, #20]
 8003590:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003594:	2b40      	cmp	r3, #64	@ 0x40
 8003596:	d016      	beq.n	80035c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	2200      	movs	r2, #0
 800359c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2220      	movs	r2, #32
 80035a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2200      	movs	r2, #0
 80035aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035b2:	f043 0220 	orr.w	r2, r3, #32
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2200      	movs	r2, #0
 80035be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e007      	b.n	80035d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	695b      	ldr	r3, [r3, #20]
 80035cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035d0:	2b40      	cmp	r3, #64	@ 0x40
 80035d2:	d1ae      	bne.n	8003532 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80035d4:	2300      	movs	r3, #0
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3710      	adds	r7, #16
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}

080035de <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80035de:	b480      	push	{r7}
 80035e0:	b083      	sub	sp, #12
 80035e2:	af00      	add	r7, sp, #0
 80035e4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	695b      	ldr	r3, [r3, #20]
 80035ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035f4:	d11b      	bne.n	800362e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80035fe:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2200      	movs	r2, #0
 8003604:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2220      	movs	r2, #32
 800360a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2200      	movs	r2, #0
 8003612:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800361a:	f043 0204 	orr.w	r2, r3, #4
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2200      	movs	r2, #0
 8003626:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e000      	b.n	8003630 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800362e:	2300      	movs	r3, #0
}
 8003630:	4618      	mov	r0, r3
 8003632:	370c      	adds	r7, #12
 8003634:	46bd      	mov	sp, r7
 8003636:	bc80      	pop	{r7}
 8003638:	4770      	bx	lr
	...

0800363c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b086      	sub	sp, #24
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d101      	bne.n	800364e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e272      	b.n	8003b34 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 0301 	and.w	r3, r3, #1
 8003656:	2b00      	cmp	r3, #0
 8003658:	f000 8087 	beq.w	800376a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800365c:	4b92      	ldr	r3, [pc, #584]	@ (80038a8 <HAL_RCC_OscConfig+0x26c>)
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	f003 030c 	and.w	r3, r3, #12
 8003664:	2b04      	cmp	r3, #4
 8003666:	d00c      	beq.n	8003682 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003668:	4b8f      	ldr	r3, [pc, #572]	@ (80038a8 <HAL_RCC_OscConfig+0x26c>)
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	f003 030c 	and.w	r3, r3, #12
 8003670:	2b08      	cmp	r3, #8
 8003672:	d112      	bne.n	800369a <HAL_RCC_OscConfig+0x5e>
 8003674:	4b8c      	ldr	r3, [pc, #560]	@ (80038a8 <HAL_RCC_OscConfig+0x26c>)
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800367c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003680:	d10b      	bne.n	800369a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003682:	4b89      	ldr	r3, [pc, #548]	@ (80038a8 <HAL_RCC_OscConfig+0x26c>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800368a:	2b00      	cmp	r3, #0
 800368c:	d06c      	beq.n	8003768 <HAL_RCC_OscConfig+0x12c>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d168      	bne.n	8003768 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e24c      	b.n	8003b34 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80036a2:	d106      	bne.n	80036b2 <HAL_RCC_OscConfig+0x76>
 80036a4:	4b80      	ldr	r3, [pc, #512]	@ (80038a8 <HAL_RCC_OscConfig+0x26c>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a7f      	ldr	r2, [pc, #508]	@ (80038a8 <HAL_RCC_OscConfig+0x26c>)
 80036aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036ae:	6013      	str	r3, [r2, #0]
 80036b0:	e02e      	b.n	8003710 <HAL_RCC_OscConfig+0xd4>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d10c      	bne.n	80036d4 <HAL_RCC_OscConfig+0x98>
 80036ba:	4b7b      	ldr	r3, [pc, #492]	@ (80038a8 <HAL_RCC_OscConfig+0x26c>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a7a      	ldr	r2, [pc, #488]	@ (80038a8 <HAL_RCC_OscConfig+0x26c>)
 80036c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036c4:	6013      	str	r3, [r2, #0]
 80036c6:	4b78      	ldr	r3, [pc, #480]	@ (80038a8 <HAL_RCC_OscConfig+0x26c>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a77      	ldr	r2, [pc, #476]	@ (80038a8 <HAL_RCC_OscConfig+0x26c>)
 80036cc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80036d0:	6013      	str	r3, [r2, #0]
 80036d2:	e01d      	b.n	8003710 <HAL_RCC_OscConfig+0xd4>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80036dc:	d10c      	bne.n	80036f8 <HAL_RCC_OscConfig+0xbc>
 80036de:	4b72      	ldr	r3, [pc, #456]	@ (80038a8 <HAL_RCC_OscConfig+0x26c>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a71      	ldr	r2, [pc, #452]	@ (80038a8 <HAL_RCC_OscConfig+0x26c>)
 80036e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80036e8:	6013      	str	r3, [r2, #0]
 80036ea:	4b6f      	ldr	r3, [pc, #444]	@ (80038a8 <HAL_RCC_OscConfig+0x26c>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a6e      	ldr	r2, [pc, #440]	@ (80038a8 <HAL_RCC_OscConfig+0x26c>)
 80036f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036f4:	6013      	str	r3, [r2, #0]
 80036f6:	e00b      	b.n	8003710 <HAL_RCC_OscConfig+0xd4>
 80036f8:	4b6b      	ldr	r3, [pc, #428]	@ (80038a8 <HAL_RCC_OscConfig+0x26c>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a6a      	ldr	r2, [pc, #424]	@ (80038a8 <HAL_RCC_OscConfig+0x26c>)
 80036fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003702:	6013      	str	r3, [r2, #0]
 8003704:	4b68      	ldr	r3, [pc, #416]	@ (80038a8 <HAL_RCC_OscConfig+0x26c>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a67      	ldr	r2, [pc, #412]	@ (80038a8 <HAL_RCC_OscConfig+0x26c>)
 800370a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800370e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d013      	beq.n	8003740 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003718:	f7fe fb58 	bl	8001dcc <HAL_GetTick>
 800371c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800371e:	e008      	b.n	8003732 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003720:	f7fe fb54 	bl	8001dcc <HAL_GetTick>
 8003724:	4602      	mov	r2, r0
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	1ad3      	subs	r3, r2, r3
 800372a:	2b64      	cmp	r3, #100	@ 0x64
 800372c:	d901      	bls.n	8003732 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800372e:	2303      	movs	r3, #3
 8003730:	e200      	b.n	8003b34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003732:	4b5d      	ldr	r3, [pc, #372]	@ (80038a8 <HAL_RCC_OscConfig+0x26c>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800373a:	2b00      	cmp	r3, #0
 800373c:	d0f0      	beq.n	8003720 <HAL_RCC_OscConfig+0xe4>
 800373e:	e014      	b.n	800376a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003740:	f7fe fb44 	bl	8001dcc <HAL_GetTick>
 8003744:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003746:	e008      	b.n	800375a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003748:	f7fe fb40 	bl	8001dcc <HAL_GetTick>
 800374c:	4602      	mov	r2, r0
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	2b64      	cmp	r3, #100	@ 0x64
 8003754:	d901      	bls.n	800375a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003756:	2303      	movs	r3, #3
 8003758:	e1ec      	b.n	8003b34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800375a:	4b53      	ldr	r3, [pc, #332]	@ (80038a8 <HAL_RCC_OscConfig+0x26c>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003762:	2b00      	cmp	r3, #0
 8003764:	d1f0      	bne.n	8003748 <HAL_RCC_OscConfig+0x10c>
 8003766:	e000      	b.n	800376a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003768:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 0302 	and.w	r3, r3, #2
 8003772:	2b00      	cmp	r3, #0
 8003774:	d063      	beq.n	800383e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003776:	4b4c      	ldr	r3, [pc, #304]	@ (80038a8 <HAL_RCC_OscConfig+0x26c>)
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	f003 030c 	and.w	r3, r3, #12
 800377e:	2b00      	cmp	r3, #0
 8003780:	d00b      	beq.n	800379a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003782:	4b49      	ldr	r3, [pc, #292]	@ (80038a8 <HAL_RCC_OscConfig+0x26c>)
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	f003 030c 	and.w	r3, r3, #12
 800378a:	2b08      	cmp	r3, #8
 800378c:	d11c      	bne.n	80037c8 <HAL_RCC_OscConfig+0x18c>
 800378e:	4b46      	ldr	r3, [pc, #280]	@ (80038a8 <HAL_RCC_OscConfig+0x26c>)
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003796:	2b00      	cmp	r3, #0
 8003798:	d116      	bne.n	80037c8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800379a:	4b43      	ldr	r3, [pc, #268]	@ (80038a8 <HAL_RCC_OscConfig+0x26c>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f003 0302 	and.w	r3, r3, #2
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d005      	beq.n	80037b2 <HAL_RCC_OscConfig+0x176>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	691b      	ldr	r3, [r3, #16]
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	d001      	beq.n	80037b2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e1c0      	b.n	8003b34 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037b2:	4b3d      	ldr	r3, [pc, #244]	@ (80038a8 <HAL_RCC_OscConfig+0x26c>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	695b      	ldr	r3, [r3, #20]
 80037be:	00db      	lsls	r3, r3, #3
 80037c0:	4939      	ldr	r1, [pc, #228]	@ (80038a8 <HAL_RCC_OscConfig+0x26c>)
 80037c2:	4313      	orrs	r3, r2
 80037c4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037c6:	e03a      	b.n	800383e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	691b      	ldr	r3, [r3, #16]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d020      	beq.n	8003812 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037d0:	4b36      	ldr	r3, [pc, #216]	@ (80038ac <HAL_RCC_OscConfig+0x270>)
 80037d2:	2201      	movs	r2, #1
 80037d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037d6:	f7fe faf9 	bl	8001dcc <HAL_GetTick>
 80037da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037dc:	e008      	b.n	80037f0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037de:	f7fe faf5 	bl	8001dcc <HAL_GetTick>
 80037e2:	4602      	mov	r2, r0
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	1ad3      	subs	r3, r2, r3
 80037e8:	2b02      	cmp	r3, #2
 80037ea:	d901      	bls.n	80037f0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80037ec:	2303      	movs	r3, #3
 80037ee:	e1a1      	b.n	8003b34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037f0:	4b2d      	ldr	r3, [pc, #180]	@ (80038a8 <HAL_RCC_OscConfig+0x26c>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 0302 	and.w	r3, r3, #2
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d0f0      	beq.n	80037de <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037fc:	4b2a      	ldr	r3, [pc, #168]	@ (80038a8 <HAL_RCC_OscConfig+0x26c>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	695b      	ldr	r3, [r3, #20]
 8003808:	00db      	lsls	r3, r3, #3
 800380a:	4927      	ldr	r1, [pc, #156]	@ (80038a8 <HAL_RCC_OscConfig+0x26c>)
 800380c:	4313      	orrs	r3, r2
 800380e:	600b      	str	r3, [r1, #0]
 8003810:	e015      	b.n	800383e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003812:	4b26      	ldr	r3, [pc, #152]	@ (80038ac <HAL_RCC_OscConfig+0x270>)
 8003814:	2200      	movs	r2, #0
 8003816:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003818:	f7fe fad8 	bl	8001dcc <HAL_GetTick>
 800381c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800381e:	e008      	b.n	8003832 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003820:	f7fe fad4 	bl	8001dcc <HAL_GetTick>
 8003824:	4602      	mov	r2, r0
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	1ad3      	subs	r3, r2, r3
 800382a:	2b02      	cmp	r3, #2
 800382c:	d901      	bls.n	8003832 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800382e:	2303      	movs	r3, #3
 8003830:	e180      	b.n	8003b34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003832:	4b1d      	ldr	r3, [pc, #116]	@ (80038a8 <HAL_RCC_OscConfig+0x26c>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 0302 	and.w	r3, r3, #2
 800383a:	2b00      	cmp	r3, #0
 800383c:	d1f0      	bne.n	8003820 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 0308 	and.w	r3, r3, #8
 8003846:	2b00      	cmp	r3, #0
 8003848:	d03a      	beq.n	80038c0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	699b      	ldr	r3, [r3, #24]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d019      	beq.n	8003886 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003852:	4b17      	ldr	r3, [pc, #92]	@ (80038b0 <HAL_RCC_OscConfig+0x274>)
 8003854:	2201      	movs	r2, #1
 8003856:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003858:	f7fe fab8 	bl	8001dcc <HAL_GetTick>
 800385c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800385e:	e008      	b.n	8003872 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003860:	f7fe fab4 	bl	8001dcc <HAL_GetTick>
 8003864:	4602      	mov	r2, r0
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	1ad3      	subs	r3, r2, r3
 800386a:	2b02      	cmp	r3, #2
 800386c:	d901      	bls.n	8003872 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800386e:	2303      	movs	r3, #3
 8003870:	e160      	b.n	8003b34 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003872:	4b0d      	ldr	r3, [pc, #52]	@ (80038a8 <HAL_RCC_OscConfig+0x26c>)
 8003874:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003876:	f003 0302 	and.w	r3, r3, #2
 800387a:	2b00      	cmp	r3, #0
 800387c:	d0f0      	beq.n	8003860 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800387e:	2001      	movs	r0, #1
 8003880:	f000 face 	bl	8003e20 <RCC_Delay>
 8003884:	e01c      	b.n	80038c0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003886:	4b0a      	ldr	r3, [pc, #40]	@ (80038b0 <HAL_RCC_OscConfig+0x274>)
 8003888:	2200      	movs	r2, #0
 800388a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800388c:	f7fe fa9e 	bl	8001dcc <HAL_GetTick>
 8003890:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003892:	e00f      	b.n	80038b4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003894:	f7fe fa9a 	bl	8001dcc <HAL_GetTick>
 8003898:	4602      	mov	r2, r0
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	2b02      	cmp	r3, #2
 80038a0:	d908      	bls.n	80038b4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80038a2:	2303      	movs	r3, #3
 80038a4:	e146      	b.n	8003b34 <HAL_RCC_OscConfig+0x4f8>
 80038a6:	bf00      	nop
 80038a8:	40021000 	.word	0x40021000
 80038ac:	42420000 	.word	0x42420000
 80038b0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038b4:	4b92      	ldr	r3, [pc, #584]	@ (8003b00 <HAL_RCC_OscConfig+0x4c4>)
 80038b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038b8:	f003 0302 	and.w	r3, r3, #2
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d1e9      	bne.n	8003894 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f003 0304 	and.w	r3, r3, #4
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	f000 80a6 	beq.w	8003a1a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038ce:	2300      	movs	r3, #0
 80038d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038d2:	4b8b      	ldr	r3, [pc, #556]	@ (8003b00 <HAL_RCC_OscConfig+0x4c4>)
 80038d4:	69db      	ldr	r3, [r3, #28]
 80038d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d10d      	bne.n	80038fa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038de:	4b88      	ldr	r3, [pc, #544]	@ (8003b00 <HAL_RCC_OscConfig+0x4c4>)
 80038e0:	69db      	ldr	r3, [r3, #28]
 80038e2:	4a87      	ldr	r2, [pc, #540]	@ (8003b00 <HAL_RCC_OscConfig+0x4c4>)
 80038e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038e8:	61d3      	str	r3, [r2, #28]
 80038ea:	4b85      	ldr	r3, [pc, #532]	@ (8003b00 <HAL_RCC_OscConfig+0x4c4>)
 80038ec:	69db      	ldr	r3, [r3, #28]
 80038ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038f2:	60bb      	str	r3, [r7, #8]
 80038f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038f6:	2301      	movs	r3, #1
 80038f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038fa:	4b82      	ldr	r3, [pc, #520]	@ (8003b04 <HAL_RCC_OscConfig+0x4c8>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003902:	2b00      	cmp	r3, #0
 8003904:	d118      	bne.n	8003938 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003906:	4b7f      	ldr	r3, [pc, #508]	@ (8003b04 <HAL_RCC_OscConfig+0x4c8>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a7e      	ldr	r2, [pc, #504]	@ (8003b04 <HAL_RCC_OscConfig+0x4c8>)
 800390c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003910:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003912:	f7fe fa5b 	bl	8001dcc <HAL_GetTick>
 8003916:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003918:	e008      	b.n	800392c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800391a:	f7fe fa57 	bl	8001dcc <HAL_GetTick>
 800391e:	4602      	mov	r2, r0
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	1ad3      	subs	r3, r2, r3
 8003924:	2b64      	cmp	r3, #100	@ 0x64
 8003926:	d901      	bls.n	800392c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003928:	2303      	movs	r3, #3
 800392a:	e103      	b.n	8003b34 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800392c:	4b75      	ldr	r3, [pc, #468]	@ (8003b04 <HAL_RCC_OscConfig+0x4c8>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003934:	2b00      	cmp	r3, #0
 8003936:	d0f0      	beq.n	800391a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	68db      	ldr	r3, [r3, #12]
 800393c:	2b01      	cmp	r3, #1
 800393e:	d106      	bne.n	800394e <HAL_RCC_OscConfig+0x312>
 8003940:	4b6f      	ldr	r3, [pc, #444]	@ (8003b00 <HAL_RCC_OscConfig+0x4c4>)
 8003942:	6a1b      	ldr	r3, [r3, #32]
 8003944:	4a6e      	ldr	r2, [pc, #440]	@ (8003b00 <HAL_RCC_OscConfig+0x4c4>)
 8003946:	f043 0301 	orr.w	r3, r3, #1
 800394a:	6213      	str	r3, [r2, #32]
 800394c:	e02d      	b.n	80039aa <HAL_RCC_OscConfig+0x36e>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	68db      	ldr	r3, [r3, #12]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d10c      	bne.n	8003970 <HAL_RCC_OscConfig+0x334>
 8003956:	4b6a      	ldr	r3, [pc, #424]	@ (8003b00 <HAL_RCC_OscConfig+0x4c4>)
 8003958:	6a1b      	ldr	r3, [r3, #32]
 800395a:	4a69      	ldr	r2, [pc, #420]	@ (8003b00 <HAL_RCC_OscConfig+0x4c4>)
 800395c:	f023 0301 	bic.w	r3, r3, #1
 8003960:	6213      	str	r3, [r2, #32]
 8003962:	4b67      	ldr	r3, [pc, #412]	@ (8003b00 <HAL_RCC_OscConfig+0x4c4>)
 8003964:	6a1b      	ldr	r3, [r3, #32]
 8003966:	4a66      	ldr	r2, [pc, #408]	@ (8003b00 <HAL_RCC_OscConfig+0x4c4>)
 8003968:	f023 0304 	bic.w	r3, r3, #4
 800396c:	6213      	str	r3, [r2, #32]
 800396e:	e01c      	b.n	80039aa <HAL_RCC_OscConfig+0x36e>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	2b05      	cmp	r3, #5
 8003976:	d10c      	bne.n	8003992 <HAL_RCC_OscConfig+0x356>
 8003978:	4b61      	ldr	r3, [pc, #388]	@ (8003b00 <HAL_RCC_OscConfig+0x4c4>)
 800397a:	6a1b      	ldr	r3, [r3, #32]
 800397c:	4a60      	ldr	r2, [pc, #384]	@ (8003b00 <HAL_RCC_OscConfig+0x4c4>)
 800397e:	f043 0304 	orr.w	r3, r3, #4
 8003982:	6213      	str	r3, [r2, #32]
 8003984:	4b5e      	ldr	r3, [pc, #376]	@ (8003b00 <HAL_RCC_OscConfig+0x4c4>)
 8003986:	6a1b      	ldr	r3, [r3, #32]
 8003988:	4a5d      	ldr	r2, [pc, #372]	@ (8003b00 <HAL_RCC_OscConfig+0x4c4>)
 800398a:	f043 0301 	orr.w	r3, r3, #1
 800398e:	6213      	str	r3, [r2, #32]
 8003990:	e00b      	b.n	80039aa <HAL_RCC_OscConfig+0x36e>
 8003992:	4b5b      	ldr	r3, [pc, #364]	@ (8003b00 <HAL_RCC_OscConfig+0x4c4>)
 8003994:	6a1b      	ldr	r3, [r3, #32]
 8003996:	4a5a      	ldr	r2, [pc, #360]	@ (8003b00 <HAL_RCC_OscConfig+0x4c4>)
 8003998:	f023 0301 	bic.w	r3, r3, #1
 800399c:	6213      	str	r3, [r2, #32]
 800399e:	4b58      	ldr	r3, [pc, #352]	@ (8003b00 <HAL_RCC_OscConfig+0x4c4>)
 80039a0:	6a1b      	ldr	r3, [r3, #32]
 80039a2:	4a57      	ldr	r2, [pc, #348]	@ (8003b00 <HAL_RCC_OscConfig+0x4c4>)
 80039a4:	f023 0304 	bic.w	r3, r3, #4
 80039a8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	68db      	ldr	r3, [r3, #12]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d015      	beq.n	80039de <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039b2:	f7fe fa0b 	bl	8001dcc <HAL_GetTick>
 80039b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039b8:	e00a      	b.n	80039d0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039ba:	f7fe fa07 	bl	8001dcc <HAL_GetTick>
 80039be:	4602      	mov	r2, r0
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	1ad3      	subs	r3, r2, r3
 80039c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d901      	bls.n	80039d0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80039cc:	2303      	movs	r3, #3
 80039ce:	e0b1      	b.n	8003b34 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039d0:	4b4b      	ldr	r3, [pc, #300]	@ (8003b00 <HAL_RCC_OscConfig+0x4c4>)
 80039d2:	6a1b      	ldr	r3, [r3, #32]
 80039d4:	f003 0302 	and.w	r3, r3, #2
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d0ee      	beq.n	80039ba <HAL_RCC_OscConfig+0x37e>
 80039dc:	e014      	b.n	8003a08 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039de:	f7fe f9f5 	bl	8001dcc <HAL_GetTick>
 80039e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039e4:	e00a      	b.n	80039fc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039e6:	f7fe f9f1 	bl	8001dcc <HAL_GetTick>
 80039ea:	4602      	mov	r2, r0
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	1ad3      	subs	r3, r2, r3
 80039f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d901      	bls.n	80039fc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80039f8:	2303      	movs	r3, #3
 80039fa:	e09b      	b.n	8003b34 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039fc:	4b40      	ldr	r3, [pc, #256]	@ (8003b00 <HAL_RCC_OscConfig+0x4c4>)
 80039fe:	6a1b      	ldr	r3, [r3, #32]
 8003a00:	f003 0302 	and.w	r3, r3, #2
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d1ee      	bne.n	80039e6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003a08:	7dfb      	ldrb	r3, [r7, #23]
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d105      	bne.n	8003a1a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a0e:	4b3c      	ldr	r3, [pc, #240]	@ (8003b00 <HAL_RCC_OscConfig+0x4c4>)
 8003a10:	69db      	ldr	r3, [r3, #28]
 8003a12:	4a3b      	ldr	r2, [pc, #236]	@ (8003b00 <HAL_RCC_OscConfig+0x4c4>)
 8003a14:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a18:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	69db      	ldr	r3, [r3, #28]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	f000 8087 	beq.w	8003b32 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a24:	4b36      	ldr	r3, [pc, #216]	@ (8003b00 <HAL_RCC_OscConfig+0x4c4>)
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	f003 030c 	and.w	r3, r3, #12
 8003a2c:	2b08      	cmp	r3, #8
 8003a2e:	d061      	beq.n	8003af4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	69db      	ldr	r3, [r3, #28]
 8003a34:	2b02      	cmp	r3, #2
 8003a36:	d146      	bne.n	8003ac6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a38:	4b33      	ldr	r3, [pc, #204]	@ (8003b08 <HAL_RCC_OscConfig+0x4cc>)
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a3e:	f7fe f9c5 	bl	8001dcc <HAL_GetTick>
 8003a42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a44:	e008      	b.n	8003a58 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a46:	f7fe f9c1 	bl	8001dcc <HAL_GetTick>
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	1ad3      	subs	r3, r2, r3
 8003a50:	2b02      	cmp	r3, #2
 8003a52:	d901      	bls.n	8003a58 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003a54:	2303      	movs	r3, #3
 8003a56:	e06d      	b.n	8003b34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a58:	4b29      	ldr	r3, [pc, #164]	@ (8003b00 <HAL_RCC_OscConfig+0x4c4>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d1f0      	bne.n	8003a46 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6a1b      	ldr	r3, [r3, #32]
 8003a68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a6c:	d108      	bne.n	8003a80 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003a6e:	4b24      	ldr	r3, [pc, #144]	@ (8003b00 <HAL_RCC_OscConfig+0x4c4>)
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	4921      	ldr	r1, [pc, #132]	@ (8003b00 <HAL_RCC_OscConfig+0x4c4>)
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a80:	4b1f      	ldr	r3, [pc, #124]	@ (8003b00 <HAL_RCC_OscConfig+0x4c4>)
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6a19      	ldr	r1, [r3, #32]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a90:	430b      	orrs	r3, r1
 8003a92:	491b      	ldr	r1, [pc, #108]	@ (8003b00 <HAL_RCC_OscConfig+0x4c4>)
 8003a94:	4313      	orrs	r3, r2
 8003a96:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a98:	4b1b      	ldr	r3, [pc, #108]	@ (8003b08 <HAL_RCC_OscConfig+0x4cc>)
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a9e:	f7fe f995 	bl	8001dcc <HAL_GetTick>
 8003aa2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003aa4:	e008      	b.n	8003ab8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003aa6:	f7fe f991 	bl	8001dcc <HAL_GetTick>
 8003aaa:	4602      	mov	r2, r0
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	1ad3      	subs	r3, r2, r3
 8003ab0:	2b02      	cmp	r3, #2
 8003ab2:	d901      	bls.n	8003ab8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003ab4:	2303      	movs	r3, #3
 8003ab6:	e03d      	b.n	8003b34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ab8:	4b11      	ldr	r3, [pc, #68]	@ (8003b00 <HAL_RCC_OscConfig+0x4c4>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d0f0      	beq.n	8003aa6 <HAL_RCC_OscConfig+0x46a>
 8003ac4:	e035      	b.n	8003b32 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ac6:	4b10      	ldr	r3, [pc, #64]	@ (8003b08 <HAL_RCC_OscConfig+0x4cc>)
 8003ac8:	2200      	movs	r2, #0
 8003aca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003acc:	f7fe f97e 	bl	8001dcc <HAL_GetTick>
 8003ad0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ad2:	e008      	b.n	8003ae6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ad4:	f7fe f97a 	bl	8001dcc <HAL_GetTick>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	1ad3      	subs	r3, r2, r3
 8003ade:	2b02      	cmp	r3, #2
 8003ae0:	d901      	bls.n	8003ae6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	e026      	b.n	8003b34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ae6:	4b06      	ldr	r3, [pc, #24]	@ (8003b00 <HAL_RCC_OscConfig+0x4c4>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d1f0      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x498>
 8003af2:	e01e      	b.n	8003b32 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	69db      	ldr	r3, [r3, #28]
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d107      	bne.n	8003b0c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	e019      	b.n	8003b34 <HAL_RCC_OscConfig+0x4f8>
 8003b00:	40021000 	.word	0x40021000
 8003b04:	40007000 	.word	0x40007000
 8003b08:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003b0c:	4b0b      	ldr	r3, [pc, #44]	@ (8003b3c <HAL_RCC_OscConfig+0x500>)
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6a1b      	ldr	r3, [r3, #32]
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d106      	bne.n	8003b2e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b2a:	429a      	cmp	r2, r3
 8003b2c:	d001      	beq.n	8003b32 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e000      	b.n	8003b34 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003b32:	2300      	movs	r3, #0
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	3718      	adds	r7, #24
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}
 8003b3c:	40021000 	.word	0x40021000

08003b40 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b084      	sub	sp, #16
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
 8003b48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d101      	bne.n	8003b54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b50:	2301      	movs	r3, #1
 8003b52:	e0d0      	b.n	8003cf6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b54:	4b6a      	ldr	r3, [pc, #424]	@ (8003d00 <HAL_RCC_ClockConfig+0x1c0>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 0307 	and.w	r3, r3, #7
 8003b5c:	683a      	ldr	r2, [r7, #0]
 8003b5e:	429a      	cmp	r2, r3
 8003b60:	d910      	bls.n	8003b84 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b62:	4b67      	ldr	r3, [pc, #412]	@ (8003d00 <HAL_RCC_ClockConfig+0x1c0>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f023 0207 	bic.w	r2, r3, #7
 8003b6a:	4965      	ldr	r1, [pc, #404]	@ (8003d00 <HAL_RCC_ClockConfig+0x1c0>)
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b72:	4b63      	ldr	r3, [pc, #396]	@ (8003d00 <HAL_RCC_ClockConfig+0x1c0>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 0307 	and.w	r3, r3, #7
 8003b7a:	683a      	ldr	r2, [r7, #0]
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d001      	beq.n	8003b84 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	e0b8      	b.n	8003cf6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 0302 	and.w	r3, r3, #2
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d020      	beq.n	8003bd2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 0304 	and.w	r3, r3, #4
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d005      	beq.n	8003ba8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b9c:	4b59      	ldr	r3, [pc, #356]	@ (8003d04 <HAL_RCC_ClockConfig+0x1c4>)
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	4a58      	ldr	r2, [pc, #352]	@ (8003d04 <HAL_RCC_ClockConfig+0x1c4>)
 8003ba2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003ba6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 0308 	and.w	r3, r3, #8
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d005      	beq.n	8003bc0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003bb4:	4b53      	ldr	r3, [pc, #332]	@ (8003d04 <HAL_RCC_ClockConfig+0x1c4>)
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	4a52      	ldr	r2, [pc, #328]	@ (8003d04 <HAL_RCC_ClockConfig+0x1c4>)
 8003bba:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003bbe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bc0:	4b50      	ldr	r3, [pc, #320]	@ (8003d04 <HAL_RCC_ClockConfig+0x1c4>)
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	494d      	ldr	r1, [pc, #308]	@ (8003d04 <HAL_RCC_ClockConfig+0x1c4>)
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f003 0301 	and.w	r3, r3, #1
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d040      	beq.n	8003c60 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d107      	bne.n	8003bf6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003be6:	4b47      	ldr	r3, [pc, #284]	@ (8003d04 <HAL_RCC_ClockConfig+0x1c4>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d115      	bne.n	8003c1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e07f      	b.n	8003cf6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	2b02      	cmp	r3, #2
 8003bfc:	d107      	bne.n	8003c0e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bfe:	4b41      	ldr	r3, [pc, #260]	@ (8003d04 <HAL_RCC_ClockConfig+0x1c4>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d109      	bne.n	8003c1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e073      	b.n	8003cf6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c0e:	4b3d      	ldr	r3, [pc, #244]	@ (8003d04 <HAL_RCC_ClockConfig+0x1c4>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 0302 	and.w	r3, r3, #2
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d101      	bne.n	8003c1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e06b      	b.n	8003cf6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c1e:	4b39      	ldr	r3, [pc, #228]	@ (8003d04 <HAL_RCC_ClockConfig+0x1c4>)
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	f023 0203 	bic.w	r2, r3, #3
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	4936      	ldr	r1, [pc, #216]	@ (8003d04 <HAL_RCC_ClockConfig+0x1c4>)
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c30:	f7fe f8cc 	bl	8001dcc <HAL_GetTick>
 8003c34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c36:	e00a      	b.n	8003c4e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c38:	f7fe f8c8 	bl	8001dcc <HAL_GetTick>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	1ad3      	subs	r3, r2, r3
 8003c42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d901      	bls.n	8003c4e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c4a:	2303      	movs	r3, #3
 8003c4c:	e053      	b.n	8003cf6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c4e:	4b2d      	ldr	r3, [pc, #180]	@ (8003d04 <HAL_RCC_ClockConfig+0x1c4>)
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	f003 020c 	and.w	r2, r3, #12
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	009b      	lsls	r3, r3, #2
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d1eb      	bne.n	8003c38 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c60:	4b27      	ldr	r3, [pc, #156]	@ (8003d00 <HAL_RCC_ClockConfig+0x1c0>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f003 0307 	and.w	r3, r3, #7
 8003c68:	683a      	ldr	r2, [r7, #0]
 8003c6a:	429a      	cmp	r2, r3
 8003c6c:	d210      	bcs.n	8003c90 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c6e:	4b24      	ldr	r3, [pc, #144]	@ (8003d00 <HAL_RCC_ClockConfig+0x1c0>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f023 0207 	bic.w	r2, r3, #7
 8003c76:	4922      	ldr	r1, [pc, #136]	@ (8003d00 <HAL_RCC_ClockConfig+0x1c0>)
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c7e:	4b20      	ldr	r3, [pc, #128]	@ (8003d00 <HAL_RCC_ClockConfig+0x1c0>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 0307 	and.w	r3, r3, #7
 8003c86:	683a      	ldr	r2, [r7, #0]
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	d001      	beq.n	8003c90 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	e032      	b.n	8003cf6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f003 0304 	and.w	r3, r3, #4
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d008      	beq.n	8003cae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c9c:	4b19      	ldr	r3, [pc, #100]	@ (8003d04 <HAL_RCC_ClockConfig+0x1c4>)
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	68db      	ldr	r3, [r3, #12]
 8003ca8:	4916      	ldr	r1, [pc, #88]	@ (8003d04 <HAL_RCC_ClockConfig+0x1c4>)
 8003caa:	4313      	orrs	r3, r2
 8003cac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f003 0308 	and.w	r3, r3, #8
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d009      	beq.n	8003cce <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003cba:	4b12      	ldr	r3, [pc, #72]	@ (8003d04 <HAL_RCC_ClockConfig+0x1c4>)
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	691b      	ldr	r3, [r3, #16]
 8003cc6:	00db      	lsls	r3, r3, #3
 8003cc8:	490e      	ldr	r1, [pc, #56]	@ (8003d04 <HAL_RCC_ClockConfig+0x1c4>)
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003cce:	f000 f821 	bl	8003d14 <HAL_RCC_GetSysClockFreq>
 8003cd2:	4602      	mov	r2, r0
 8003cd4:	4b0b      	ldr	r3, [pc, #44]	@ (8003d04 <HAL_RCC_ClockConfig+0x1c4>)
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	091b      	lsrs	r3, r3, #4
 8003cda:	f003 030f 	and.w	r3, r3, #15
 8003cde:	490a      	ldr	r1, [pc, #40]	@ (8003d08 <HAL_RCC_ClockConfig+0x1c8>)
 8003ce0:	5ccb      	ldrb	r3, [r1, r3]
 8003ce2:	fa22 f303 	lsr.w	r3, r2, r3
 8003ce6:	4a09      	ldr	r2, [pc, #36]	@ (8003d0c <HAL_RCC_ClockConfig+0x1cc>)
 8003ce8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003cea:	4b09      	ldr	r3, [pc, #36]	@ (8003d10 <HAL_RCC_ClockConfig+0x1d0>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f7fe f82a 	bl	8001d48 <HAL_InitTick>

  return HAL_OK;
 8003cf4:	2300      	movs	r3, #0
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3710      	adds	r7, #16
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}
 8003cfe:	bf00      	nop
 8003d00:	40022000 	.word	0x40022000
 8003d04:	40021000 	.word	0x40021000
 8003d08:	080063e0 	.word	0x080063e0
 8003d0c:	20000000 	.word	0x20000000
 8003d10:	20000004 	.word	0x20000004

08003d14 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b087      	sub	sp, #28
 8003d18:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	60fb      	str	r3, [r7, #12]
 8003d1e:	2300      	movs	r3, #0
 8003d20:	60bb      	str	r3, [r7, #8]
 8003d22:	2300      	movs	r3, #0
 8003d24:	617b      	str	r3, [r7, #20]
 8003d26:	2300      	movs	r3, #0
 8003d28:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003d2e:	4b1e      	ldr	r3, [pc, #120]	@ (8003da8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	f003 030c 	and.w	r3, r3, #12
 8003d3a:	2b04      	cmp	r3, #4
 8003d3c:	d002      	beq.n	8003d44 <HAL_RCC_GetSysClockFreq+0x30>
 8003d3e:	2b08      	cmp	r3, #8
 8003d40:	d003      	beq.n	8003d4a <HAL_RCC_GetSysClockFreq+0x36>
 8003d42:	e027      	b.n	8003d94 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003d44:	4b19      	ldr	r3, [pc, #100]	@ (8003dac <HAL_RCC_GetSysClockFreq+0x98>)
 8003d46:	613b      	str	r3, [r7, #16]
      break;
 8003d48:	e027      	b.n	8003d9a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	0c9b      	lsrs	r3, r3, #18
 8003d4e:	f003 030f 	and.w	r3, r3, #15
 8003d52:	4a17      	ldr	r2, [pc, #92]	@ (8003db0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003d54:	5cd3      	ldrb	r3, [r2, r3]
 8003d56:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d010      	beq.n	8003d84 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003d62:	4b11      	ldr	r3, [pc, #68]	@ (8003da8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	0c5b      	lsrs	r3, r3, #17
 8003d68:	f003 0301 	and.w	r3, r3, #1
 8003d6c:	4a11      	ldr	r2, [pc, #68]	@ (8003db4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003d6e:	5cd3      	ldrb	r3, [r2, r3]
 8003d70:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	4a0d      	ldr	r2, [pc, #52]	@ (8003dac <HAL_RCC_GetSysClockFreq+0x98>)
 8003d76:	fb03 f202 	mul.w	r2, r3, r2
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d80:	617b      	str	r3, [r7, #20]
 8003d82:	e004      	b.n	8003d8e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	4a0c      	ldr	r2, [pc, #48]	@ (8003db8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003d88:	fb02 f303 	mul.w	r3, r2, r3
 8003d8c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	613b      	str	r3, [r7, #16]
      break;
 8003d92:	e002      	b.n	8003d9a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003d94:	4b05      	ldr	r3, [pc, #20]	@ (8003dac <HAL_RCC_GetSysClockFreq+0x98>)
 8003d96:	613b      	str	r3, [r7, #16]
      break;
 8003d98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d9a:	693b      	ldr	r3, [r7, #16]
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	371c      	adds	r7, #28
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bc80      	pop	{r7}
 8003da4:	4770      	bx	lr
 8003da6:	bf00      	nop
 8003da8:	40021000 	.word	0x40021000
 8003dac:	007a1200 	.word	0x007a1200
 8003db0:	080063f8 	.word	0x080063f8
 8003db4:	08006408 	.word	0x08006408
 8003db8:	003d0900 	.word	0x003d0900

08003dbc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003dc0:	4b02      	ldr	r3, [pc, #8]	@ (8003dcc <HAL_RCC_GetHCLKFreq+0x10>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bc80      	pop	{r7}
 8003dca:	4770      	bx	lr
 8003dcc:	20000000 	.word	0x20000000

08003dd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003dd4:	f7ff fff2 	bl	8003dbc <HAL_RCC_GetHCLKFreq>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	4b05      	ldr	r3, [pc, #20]	@ (8003df0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	0a1b      	lsrs	r3, r3, #8
 8003de0:	f003 0307 	and.w	r3, r3, #7
 8003de4:	4903      	ldr	r1, [pc, #12]	@ (8003df4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003de6:	5ccb      	ldrb	r3, [r1, r3]
 8003de8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	bd80      	pop	{r7, pc}
 8003df0:	40021000 	.word	0x40021000
 8003df4:	080063f0 	.word	0x080063f0

08003df8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003dfc:	f7ff ffde 	bl	8003dbc <HAL_RCC_GetHCLKFreq>
 8003e00:	4602      	mov	r2, r0
 8003e02:	4b05      	ldr	r3, [pc, #20]	@ (8003e18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	0adb      	lsrs	r3, r3, #11
 8003e08:	f003 0307 	and.w	r3, r3, #7
 8003e0c:	4903      	ldr	r1, [pc, #12]	@ (8003e1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e0e:	5ccb      	ldrb	r3, [r1, r3]
 8003e10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	bd80      	pop	{r7, pc}
 8003e18:	40021000 	.word	0x40021000
 8003e1c:	080063f0 	.word	0x080063f0

08003e20 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b085      	sub	sp, #20
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003e28:	4b0a      	ldr	r3, [pc, #40]	@ (8003e54 <RCC_Delay+0x34>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a0a      	ldr	r2, [pc, #40]	@ (8003e58 <RCC_Delay+0x38>)
 8003e2e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e32:	0a5b      	lsrs	r3, r3, #9
 8003e34:	687a      	ldr	r2, [r7, #4]
 8003e36:	fb02 f303 	mul.w	r3, r2, r3
 8003e3a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003e3c:	bf00      	nop
  }
  while (Delay --);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	1e5a      	subs	r2, r3, #1
 8003e42:	60fa      	str	r2, [r7, #12]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d1f9      	bne.n	8003e3c <RCC_Delay+0x1c>
}
 8003e48:	bf00      	nop
 8003e4a:	bf00      	nop
 8003e4c:	3714      	adds	r7, #20
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bc80      	pop	{r7}
 8003e52:	4770      	bx	lr
 8003e54:	20000000 	.word	0x20000000
 8003e58:	10624dd3 	.word	0x10624dd3

08003e5c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b082      	sub	sp, #8
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d101      	bne.n	8003e6e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e076      	b.n	8003f5c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d108      	bne.n	8003e88 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003e7e:	d009      	beq.n	8003e94 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2200      	movs	r2, #0
 8003e84:	61da      	str	r2, [r3, #28]
 8003e86:	e005      	b.n	8003e94 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2200      	movs	r2, #0
 8003e92:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2200      	movs	r2, #0
 8003e98:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d106      	bne.n	8003eb4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f7fd fd30 	bl	8001914 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2202      	movs	r2, #2
 8003eb8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003eca:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003edc:	431a      	orrs	r2, r3
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	68db      	ldr	r3, [r3, #12]
 8003ee2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ee6:	431a      	orrs	r2, r3
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	691b      	ldr	r3, [r3, #16]
 8003eec:	f003 0302 	and.w	r3, r3, #2
 8003ef0:	431a      	orrs	r2, r3
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	695b      	ldr	r3, [r3, #20]
 8003ef6:	f003 0301 	and.w	r3, r3, #1
 8003efa:	431a      	orrs	r2, r3
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	699b      	ldr	r3, [r3, #24]
 8003f00:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f04:	431a      	orrs	r2, r3
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	69db      	ldr	r3, [r3, #28]
 8003f0a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003f0e:	431a      	orrs	r2, r3
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6a1b      	ldr	r3, [r3, #32]
 8003f14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f18:	ea42 0103 	orr.w	r1, r2, r3
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f20:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	430a      	orrs	r2, r1
 8003f2a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	699b      	ldr	r3, [r3, #24]
 8003f30:	0c1a      	lsrs	r2, r3, #16
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f002 0204 	and.w	r2, r2, #4
 8003f3a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	69da      	ldr	r2, [r3, #28]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003f4a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2201      	movs	r2, #1
 8003f56:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003f5a:	2300      	movs	r3, #0
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	3708      	adds	r7, #8
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}

08003f64 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b088      	sub	sp, #32
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	60f8      	str	r0, [r7, #12]
 8003f6c:	60b9      	str	r1, [r7, #8]
 8003f6e:	603b      	str	r3, [r7, #0]
 8003f70:	4613      	mov	r3, r2
 8003f72:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003f74:	f7fd ff2a 	bl	8001dcc <HAL_GetTick>
 8003f78:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003f7a:	88fb      	ldrh	r3, [r7, #6]
 8003f7c:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	d001      	beq.n	8003f8e <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003f8a:	2302      	movs	r3, #2
 8003f8c:	e12a      	b.n	80041e4 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d002      	beq.n	8003f9a <HAL_SPI_Transmit+0x36>
 8003f94:	88fb      	ldrh	r3, [r7, #6]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d101      	bne.n	8003f9e <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e122      	b.n	80041e4 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	d101      	bne.n	8003fac <HAL_SPI_Transmit+0x48>
 8003fa8:	2302      	movs	r3, #2
 8003faa:	e11b      	b.n	80041e4 <HAL_SPI_Transmit+0x280>
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2201      	movs	r2, #1
 8003fb0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2203      	movs	r2, #3
 8003fb8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	68ba      	ldr	r2, [r7, #8]
 8003fc6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	88fa      	ldrh	r2, [r7, #6]
 8003fcc:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	88fa      	ldrh	r2, [r7, #6]
 8003fd2:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	689b      	ldr	r3, [r3, #8]
 8003ff6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ffa:	d10f      	bne.n	800401c <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800400a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	681a      	ldr	r2, [r3, #0]
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800401a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004026:	2b40      	cmp	r3, #64	@ 0x40
 8004028:	d007      	beq.n	800403a <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004038:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	68db      	ldr	r3, [r3, #12]
 800403e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004042:	d152      	bne.n	80040ea <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d002      	beq.n	8004052 <HAL_SPI_Transmit+0xee>
 800404c:	8b7b      	ldrh	r3, [r7, #26]
 800404e:	2b01      	cmp	r3, #1
 8004050:	d145      	bne.n	80040de <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004056:	881a      	ldrh	r2, [r3, #0]
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004062:	1c9a      	adds	r2, r3, #2
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800406c:	b29b      	uxth	r3, r3
 800406e:	3b01      	subs	r3, #1
 8004070:	b29a      	uxth	r2, r3
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004076:	e032      	b.n	80040de <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	f003 0302 	and.w	r3, r3, #2
 8004082:	2b02      	cmp	r3, #2
 8004084:	d112      	bne.n	80040ac <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800408a:	881a      	ldrh	r2, [r3, #0]
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004096:	1c9a      	adds	r2, r3, #2
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80040a0:	b29b      	uxth	r3, r3
 80040a2:	3b01      	subs	r3, #1
 80040a4:	b29a      	uxth	r2, r3
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	86da      	strh	r2, [r3, #54]	@ 0x36
 80040aa:	e018      	b.n	80040de <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80040ac:	f7fd fe8e 	bl	8001dcc <HAL_GetTick>
 80040b0:	4602      	mov	r2, r0
 80040b2:	69fb      	ldr	r3, [r7, #28]
 80040b4:	1ad3      	subs	r3, r2, r3
 80040b6:	683a      	ldr	r2, [r7, #0]
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d803      	bhi.n	80040c4 <HAL_SPI_Transmit+0x160>
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040c2:	d102      	bne.n	80040ca <HAL_SPI_Transmit+0x166>
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d109      	bne.n	80040de <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2201      	movs	r2, #1
 80040ce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2200      	movs	r2, #0
 80040d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80040da:	2303      	movs	r3, #3
 80040dc:	e082      	b.n	80041e4 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80040e2:	b29b      	uxth	r3, r3
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d1c7      	bne.n	8004078 <HAL_SPI_Transmit+0x114>
 80040e8:	e053      	b.n	8004192 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d002      	beq.n	80040f8 <HAL_SPI_Transmit+0x194>
 80040f2:	8b7b      	ldrh	r3, [r7, #26]
 80040f4:	2b01      	cmp	r3, #1
 80040f6:	d147      	bne.n	8004188 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	330c      	adds	r3, #12
 8004102:	7812      	ldrb	r2, [r2, #0]
 8004104:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800410a:	1c5a      	adds	r2, r3, #1
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004114:	b29b      	uxth	r3, r3
 8004116:	3b01      	subs	r3, #1
 8004118:	b29a      	uxth	r2, r3
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800411e:	e033      	b.n	8004188 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	f003 0302 	and.w	r3, r3, #2
 800412a:	2b02      	cmp	r3, #2
 800412c:	d113      	bne.n	8004156 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	330c      	adds	r3, #12
 8004138:	7812      	ldrb	r2, [r2, #0]
 800413a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004140:	1c5a      	adds	r2, r3, #1
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800414a:	b29b      	uxth	r3, r3
 800414c:	3b01      	subs	r3, #1
 800414e:	b29a      	uxth	r2, r3
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004154:	e018      	b.n	8004188 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004156:	f7fd fe39 	bl	8001dcc <HAL_GetTick>
 800415a:	4602      	mov	r2, r0
 800415c:	69fb      	ldr	r3, [r7, #28]
 800415e:	1ad3      	subs	r3, r2, r3
 8004160:	683a      	ldr	r2, [r7, #0]
 8004162:	429a      	cmp	r2, r3
 8004164:	d803      	bhi.n	800416e <HAL_SPI_Transmit+0x20a>
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	f1b3 3fff 	cmp.w	r3, #4294967295
 800416c:	d102      	bne.n	8004174 <HAL_SPI_Transmit+0x210>
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d109      	bne.n	8004188 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2201      	movs	r2, #1
 8004178:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	2200      	movs	r2, #0
 8004180:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004184:	2303      	movs	r3, #3
 8004186:	e02d      	b.n	80041e4 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800418c:	b29b      	uxth	r3, r3
 800418e:	2b00      	cmp	r3, #0
 8004190:	d1c6      	bne.n	8004120 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004192:	69fa      	ldr	r2, [r7, #28]
 8004194:	6839      	ldr	r1, [r7, #0]
 8004196:	68f8      	ldr	r0, [r7, #12]
 8004198:	f000 fbc4 	bl	8004924 <SPI_EndRxTxTransaction>
 800419c:	4603      	mov	r3, r0
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d002      	beq.n	80041a8 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2220      	movs	r2, #32
 80041a6:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d10a      	bne.n	80041c6 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80041b0:	2300      	movs	r3, #0
 80041b2:	617b      	str	r3, [r7, #20]
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	68db      	ldr	r3, [r3, #12]
 80041ba:	617b      	str	r3, [r7, #20]
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	617b      	str	r3, [r7, #20]
 80041c4:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2201      	movs	r2, #1
 80041ca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2200      	movs	r2, #0
 80041d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d001      	beq.n	80041e2 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	e000      	b.n	80041e4 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80041e2:	2300      	movs	r3, #0
  }
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	3720      	adds	r7, #32
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd80      	pop	{r7, pc}

080041ec <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b088      	sub	sp, #32
 80041f0:	af02      	add	r7, sp, #8
 80041f2:	60f8      	str	r0, [r7, #12]
 80041f4:	60b9      	str	r1, [r7, #8]
 80041f6:	603b      	str	r3, [r7, #0]
 80041f8:	4613      	mov	r3, r2
 80041fa:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004202:	b2db      	uxtb	r3, r3
 8004204:	2b01      	cmp	r3, #1
 8004206:	d001      	beq.n	800420c <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8004208:	2302      	movs	r3, #2
 800420a:	e104      	b.n	8004416 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004214:	d112      	bne.n	800423c <HAL_SPI_Receive+0x50>
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d10e      	bne.n	800423c <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2204      	movs	r2, #4
 8004222:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004226:	88fa      	ldrh	r2, [r7, #6]
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	9300      	str	r3, [sp, #0]
 800422c:	4613      	mov	r3, r2
 800422e:	68ba      	ldr	r2, [r7, #8]
 8004230:	68b9      	ldr	r1, [r7, #8]
 8004232:	68f8      	ldr	r0, [r7, #12]
 8004234:	f000 f8f3 	bl	800441e <HAL_SPI_TransmitReceive>
 8004238:	4603      	mov	r3, r0
 800423a:	e0ec      	b.n	8004416 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800423c:	f7fd fdc6 	bl	8001dcc <HAL_GetTick>
 8004240:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d002      	beq.n	800424e <HAL_SPI_Receive+0x62>
 8004248:	88fb      	ldrh	r3, [r7, #6]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d101      	bne.n	8004252 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	e0e1      	b.n	8004416 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004258:	2b01      	cmp	r3, #1
 800425a:	d101      	bne.n	8004260 <HAL_SPI_Receive+0x74>
 800425c:	2302      	movs	r3, #2
 800425e:	e0da      	b.n	8004416 <HAL_SPI_Receive+0x22a>
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	2201      	movs	r2, #1
 8004264:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2204      	movs	r2, #4
 800426c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2200      	movs	r2, #0
 8004274:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	68ba      	ldr	r2, [r7, #8]
 800427a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	88fa      	ldrh	r2, [r7, #6]
 8004280:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	88fa      	ldrh	r2, [r7, #6]
 8004286:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2200      	movs	r2, #0
 800428c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2200      	movs	r2, #0
 8004292:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	2200      	movs	r2, #0
 8004298:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2200      	movs	r2, #0
 800429e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2200      	movs	r2, #0
 80042a4:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80042ae:	d10f      	bne.n	80042d0 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	681a      	ldr	r2, [r3, #0]
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80042be:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	681a      	ldr	r2, [r3, #0]
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80042ce:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042da:	2b40      	cmp	r3, #64	@ 0x40
 80042dc:	d007      	beq.n	80042ee <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80042ec:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	68db      	ldr	r3, [r3, #12]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d170      	bne.n	80043d8 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80042f6:	e035      	b.n	8004364 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	f003 0301 	and.w	r3, r3, #1
 8004302:	2b01      	cmp	r3, #1
 8004304:	d115      	bne.n	8004332 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f103 020c 	add.w	r2, r3, #12
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004312:	7812      	ldrb	r2, [r2, #0]
 8004314:	b2d2      	uxtb	r2, r2
 8004316:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800431c:	1c5a      	adds	r2, r3, #1
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004326:	b29b      	uxth	r3, r3
 8004328:	3b01      	subs	r3, #1
 800432a:	b29a      	uxth	r2, r3
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004330:	e018      	b.n	8004364 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004332:	f7fd fd4b 	bl	8001dcc <HAL_GetTick>
 8004336:	4602      	mov	r2, r0
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	1ad3      	subs	r3, r2, r3
 800433c:	683a      	ldr	r2, [r7, #0]
 800433e:	429a      	cmp	r2, r3
 8004340:	d803      	bhi.n	800434a <HAL_SPI_Receive+0x15e>
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004348:	d102      	bne.n	8004350 <HAL_SPI_Receive+0x164>
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d109      	bne.n	8004364 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2201      	movs	r2, #1
 8004354:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	2200      	movs	r2, #0
 800435c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004360:	2303      	movs	r3, #3
 8004362:	e058      	b.n	8004416 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004368:	b29b      	uxth	r3, r3
 800436a:	2b00      	cmp	r3, #0
 800436c:	d1c4      	bne.n	80042f8 <HAL_SPI_Receive+0x10c>
 800436e:	e038      	b.n	80043e2 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	f003 0301 	and.w	r3, r3, #1
 800437a:	2b01      	cmp	r3, #1
 800437c:	d113      	bne.n	80043a6 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	68da      	ldr	r2, [r3, #12]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004388:	b292      	uxth	r2, r2
 800438a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004390:	1c9a      	adds	r2, r3, #2
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800439a:	b29b      	uxth	r3, r3
 800439c:	3b01      	subs	r3, #1
 800439e:	b29a      	uxth	r2, r3
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80043a4:	e018      	b.n	80043d8 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80043a6:	f7fd fd11 	bl	8001dcc <HAL_GetTick>
 80043aa:	4602      	mov	r2, r0
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	1ad3      	subs	r3, r2, r3
 80043b0:	683a      	ldr	r2, [r7, #0]
 80043b2:	429a      	cmp	r2, r3
 80043b4:	d803      	bhi.n	80043be <HAL_SPI_Receive+0x1d2>
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043bc:	d102      	bne.n	80043c4 <HAL_SPI_Receive+0x1d8>
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d109      	bne.n	80043d8 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2201      	movs	r2, #1
 80043c8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2200      	movs	r2, #0
 80043d0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80043d4:	2303      	movs	r3, #3
 80043d6:	e01e      	b.n	8004416 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80043dc:	b29b      	uxth	r3, r3
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d1c6      	bne.n	8004370 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80043e2:	697a      	ldr	r2, [r7, #20]
 80043e4:	6839      	ldr	r1, [r7, #0]
 80043e6:	68f8      	ldr	r0, [r7, #12]
 80043e8:	f000 fa4a 	bl	8004880 <SPI_EndRxTransaction>
 80043ec:	4603      	mov	r3, r0
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d002      	beq.n	80043f8 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2220      	movs	r2, #32
 80043f6:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2201      	movs	r2, #1
 80043fc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2200      	movs	r2, #0
 8004404:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800440c:	2b00      	cmp	r3, #0
 800440e:	d001      	beq.n	8004414 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8004410:	2301      	movs	r3, #1
 8004412:	e000      	b.n	8004416 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8004414:	2300      	movs	r3, #0
  }
}
 8004416:	4618      	mov	r0, r3
 8004418:	3718      	adds	r7, #24
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}

0800441e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800441e:	b580      	push	{r7, lr}
 8004420:	b08a      	sub	sp, #40	@ 0x28
 8004422:	af00      	add	r7, sp, #0
 8004424:	60f8      	str	r0, [r7, #12]
 8004426:	60b9      	str	r1, [r7, #8]
 8004428:	607a      	str	r2, [r7, #4]
 800442a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800442c:	2301      	movs	r3, #1
 800442e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004430:	f7fd fccc 	bl	8001dcc <HAL_GetTick>
 8004434:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800443c:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004444:	887b      	ldrh	r3, [r7, #2]
 8004446:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004448:	7ffb      	ldrb	r3, [r7, #31]
 800444a:	2b01      	cmp	r3, #1
 800444c:	d00c      	beq.n	8004468 <HAL_SPI_TransmitReceive+0x4a>
 800444e:	69bb      	ldr	r3, [r7, #24]
 8004450:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004454:	d106      	bne.n	8004464 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d102      	bne.n	8004464 <HAL_SPI_TransmitReceive+0x46>
 800445e:	7ffb      	ldrb	r3, [r7, #31]
 8004460:	2b04      	cmp	r3, #4
 8004462:	d001      	beq.n	8004468 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8004464:	2302      	movs	r3, #2
 8004466:	e17f      	b.n	8004768 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d005      	beq.n	800447a <HAL_SPI_TransmitReceive+0x5c>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d002      	beq.n	800447a <HAL_SPI_TransmitReceive+0x5c>
 8004474:	887b      	ldrh	r3, [r7, #2]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d101      	bne.n	800447e <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	e174      	b.n	8004768 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004484:	2b01      	cmp	r3, #1
 8004486:	d101      	bne.n	800448c <HAL_SPI_TransmitReceive+0x6e>
 8004488:	2302      	movs	r3, #2
 800448a:	e16d      	b.n	8004768 <HAL_SPI_TransmitReceive+0x34a>
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	2201      	movs	r2, #1
 8004490:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800449a:	b2db      	uxtb	r3, r3
 800449c:	2b04      	cmp	r3, #4
 800449e:	d003      	beq.n	80044a8 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2205      	movs	r2, #5
 80044a4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2200      	movs	r2, #0
 80044ac:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	687a      	ldr	r2, [r7, #4]
 80044b2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	887a      	ldrh	r2, [r7, #2]
 80044b8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	887a      	ldrh	r2, [r7, #2]
 80044be:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	68ba      	ldr	r2, [r7, #8]
 80044c4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	887a      	ldrh	r2, [r7, #2]
 80044ca:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	887a      	ldrh	r2, [r7, #2]
 80044d0:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	2200      	movs	r2, #0
 80044d6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	2200      	movs	r2, #0
 80044dc:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044e8:	2b40      	cmp	r3, #64	@ 0x40
 80044ea:	d007      	beq.n	80044fc <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	681a      	ldr	r2, [r3, #0]
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80044fa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	68db      	ldr	r3, [r3, #12]
 8004500:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004504:	d17e      	bne.n	8004604 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d002      	beq.n	8004514 <HAL_SPI_TransmitReceive+0xf6>
 800450e:	8afb      	ldrh	r3, [r7, #22]
 8004510:	2b01      	cmp	r3, #1
 8004512:	d16c      	bne.n	80045ee <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004518:	881a      	ldrh	r2, [r3, #0]
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004524:	1c9a      	adds	r2, r3, #2
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800452e:	b29b      	uxth	r3, r3
 8004530:	3b01      	subs	r3, #1
 8004532:	b29a      	uxth	r2, r3
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004538:	e059      	b.n	80045ee <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	f003 0302 	and.w	r3, r3, #2
 8004544:	2b02      	cmp	r3, #2
 8004546:	d11b      	bne.n	8004580 <HAL_SPI_TransmitReceive+0x162>
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800454c:	b29b      	uxth	r3, r3
 800454e:	2b00      	cmp	r3, #0
 8004550:	d016      	beq.n	8004580 <HAL_SPI_TransmitReceive+0x162>
 8004552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004554:	2b01      	cmp	r3, #1
 8004556:	d113      	bne.n	8004580 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800455c:	881a      	ldrh	r2, [r3, #0]
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004568:	1c9a      	adds	r2, r3, #2
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004572:	b29b      	uxth	r3, r3
 8004574:	3b01      	subs	r3, #1
 8004576:	b29a      	uxth	r2, r3
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800457c:	2300      	movs	r3, #0
 800457e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	f003 0301 	and.w	r3, r3, #1
 800458a:	2b01      	cmp	r3, #1
 800458c:	d119      	bne.n	80045c2 <HAL_SPI_TransmitReceive+0x1a4>
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004592:	b29b      	uxth	r3, r3
 8004594:	2b00      	cmp	r3, #0
 8004596:	d014      	beq.n	80045c2 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	68da      	ldr	r2, [r3, #12]
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045a2:	b292      	uxth	r2, r2
 80045a4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045aa:	1c9a      	adds	r2, r3, #2
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80045b4:	b29b      	uxth	r3, r3
 80045b6:	3b01      	subs	r3, #1
 80045b8:	b29a      	uxth	r2, r3
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80045be:	2301      	movs	r3, #1
 80045c0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80045c2:	f7fd fc03 	bl	8001dcc <HAL_GetTick>
 80045c6:	4602      	mov	r2, r0
 80045c8:	6a3b      	ldr	r3, [r7, #32]
 80045ca:	1ad3      	subs	r3, r2, r3
 80045cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80045ce:	429a      	cmp	r2, r3
 80045d0:	d80d      	bhi.n	80045ee <HAL_SPI_TransmitReceive+0x1d0>
 80045d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045d8:	d009      	beq.n	80045ee <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2201      	movs	r2, #1
 80045de:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2200      	movs	r2, #0
 80045e6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80045ea:	2303      	movs	r3, #3
 80045ec:	e0bc      	b.n	8004768 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80045f2:	b29b      	uxth	r3, r3
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d1a0      	bne.n	800453a <HAL_SPI_TransmitReceive+0x11c>
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80045fc:	b29b      	uxth	r3, r3
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d19b      	bne.n	800453a <HAL_SPI_TransmitReceive+0x11c>
 8004602:	e082      	b.n	800470a <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d002      	beq.n	8004612 <HAL_SPI_TransmitReceive+0x1f4>
 800460c:	8afb      	ldrh	r3, [r7, #22]
 800460e:	2b01      	cmp	r3, #1
 8004610:	d171      	bne.n	80046f6 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	330c      	adds	r3, #12
 800461c:	7812      	ldrb	r2, [r2, #0]
 800461e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004624:	1c5a      	adds	r2, r3, #1
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800462e:	b29b      	uxth	r3, r3
 8004630:	3b01      	subs	r3, #1
 8004632:	b29a      	uxth	r2, r3
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004638:	e05d      	b.n	80046f6 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	f003 0302 	and.w	r3, r3, #2
 8004644:	2b02      	cmp	r3, #2
 8004646:	d11c      	bne.n	8004682 <HAL_SPI_TransmitReceive+0x264>
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800464c:	b29b      	uxth	r3, r3
 800464e:	2b00      	cmp	r3, #0
 8004650:	d017      	beq.n	8004682 <HAL_SPI_TransmitReceive+0x264>
 8004652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004654:	2b01      	cmp	r3, #1
 8004656:	d114      	bne.n	8004682 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	330c      	adds	r3, #12
 8004662:	7812      	ldrb	r2, [r2, #0]
 8004664:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800466a:	1c5a      	adds	r2, r3, #1
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004674:	b29b      	uxth	r3, r3
 8004676:	3b01      	subs	r3, #1
 8004678:	b29a      	uxth	r2, r3
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800467e:	2300      	movs	r3, #0
 8004680:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	f003 0301 	and.w	r3, r3, #1
 800468c:	2b01      	cmp	r3, #1
 800468e:	d119      	bne.n	80046c4 <HAL_SPI_TransmitReceive+0x2a6>
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004694:	b29b      	uxth	r3, r3
 8004696:	2b00      	cmp	r3, #0
 8004698:	d014      	beq.n	80046c4 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	68da      	ldr	r2, [r3, #12]
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046a4:	b2d2      	uxtb	r2, r2
 80046a6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046ac:	1c5a      	adds	r2, r3, #1
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80046b6:	b29b      	uxth	r3, r3
 80046b8:	3b01      	subs	r3, #1
 80046ba:	b29a      	uxth	r2, r3
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80046c0:	2301      	movs	r3, #1
 80046c2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80046c4:	f7fd fb82 	bl	8001dcc <HAL_GetTick>
 80046c8:	4602      	mov	r2, r0
 80046ca:	6a3b      	ldr	r3, [r7, #32]
 80046cc:	1ad3      	subs	r3, r2, r3
 80046ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80046d0:	429a      	cmp	r2, r3
 80046d2:	d803      	bhi.n	80046dc <HAL_SPI_TransmitReceive+0x2be>
 80046d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046da:	d102      	bne.n	80046e2 <HAL_SPI_TransmitReceive+0x2c4>
 80046dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d109      	bne.n	80046f6 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	2201      	movs	r2, #1
 80046e6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	2200      	movs	r2, #0
 80046ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80046f2:	2303      	movs	r3, #3
 80046f4:	e038      	b.n	8004768 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80046fa:	b29b      	uxth	r3, r3
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d19c      	bne.n	800463a <HAL_SPI_TransmitReceive+0x21c>
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004704:	b29b      	uxth	r3, r3
 8004706:	2b00      	cmp	r3, #0
 8004708:	d197      	bne.n	800463a <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800470a:	6a3a      	ldr	r2, [r7, #32]
 800470c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800470e:	68f8      	ldr	r0, [r7, #12]
 8004710:	f000 f908 	bl	8004924 <SPI_EndRxTxTransaction>
 8004714:	4603      	mov	r3, r0
 8004716:	2b00      	cmp	r3, #0
 8004718:	d008      	beq.n	800472c <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	2220      	movs	r2, #32
 800471e:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	2200      	movs	r2, #0
 8004724:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8004728:	2301      	movs	r3, #1
 800472a:	e01d      	b.n	8004768 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	689b      	ldr	r3, [r3, #8]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d10a      	bne.n	800474a <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004734:	2300      	movs	r3, #0
 8004736:	613b      	str	r3, [r7, #16]
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	68db      	ldr	r3, [r3, #12]
 800473e:	613b      	str	r3, [r7, #16]
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	613b      	str	r3, [r7, #16]
 8004748:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2201      	movs	r2, #1
 800474e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2200      	movs	r2, #0
 8004756:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800475e:	2b00      	cmp	r3, #0
 8004760:	d001      	beq.n	8004766 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8004762:	2301      	movs	r3, #1
 8004764:	e000      	b.n	8004768 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8004766:	2300      	movs	r3, #0
  }
}
 8004768:	4618      	mov	r0, r3
 800476a:	3728      	adds	r7, #40	@ 0x28
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}

08004770 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b088      	sub	sp, #32
 8004774:	af00      	add	r7, sp, #0
 8004776:	60f8      	str	r0, [r7, #12]
 8004778:	60b9      	str	r1, [r7, #8]
 800477a:	603b      	str	r3, [r7, #0]
 800477c:	4613      	mov	r3, r2
 800477e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004780:	f7fd fb24 	bl	8001dcc <HAL_GetTick>
 8004784:	4602      	mov	r2, r0
 8004786:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004788:	1a9b      	subs	r3, r3, r2
 800478a:	683a      	ldr	r2, [r7, #0]
 800478c:	4413      	add	r3, r2
 800478e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004790:	f7fd fb1c 	bl	8001dcc <HAL_GetTick>
 8004794:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004796:	4b39      	ldr	r3, [pc, #228]	@ (800487c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	015b      	lsls	r3, r3, #5
 800479c:	0d1b      	lsrs	r3, r3, #20
 800479e:	69fa      	ldr	r2, [r7, #28]
 80047a0:	fb02 f303 	mul.w	r3, r2, r3
 80047a4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80047a6:	e054      	b.n	8004852 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047ae:	d050      	beq.n	8004852 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80047b0:	f7fd fb0c 	bl	8001dcc <HAL_GetTick>
 80047b4:	4602      	mov	r2, r0
 80047b6:	69bb      	ldr	r3, [r7, #24]
 80047b8:	1ad3      	subs	r3, r2, r3
 80047ba:	69fa      	ldr	r2, [r7, #28]
 80047bc:	429a      	cmp	r2, r3
 80047be:	d902      	bls.n	80047c6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80047c0:	69fb      	ldr	r3, [r7, #28]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d13d      	bne.n	8004842 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	685a      	ldr	r2, [r3, #4]
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80047d4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80047de:	d111      	bne.n	8004804 <SPI_WaitFlagStateUntilTimeout+0x94>
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80047e8:	d004      	beq.n	80047f4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047f2:	d107      	bne.n	8004804 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	681a      	ldr	r2, [r3, #0]
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004802:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004808:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800480c:	d10f      	bne.n	800482e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	681a      	ldr	r2, [r3, #0]
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800481c:	601a      	str	r2, [r3, #0]
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	681a      	ldr	r2, [r3, #0]
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800482c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	2201      	movs	r2, #1
 8004832:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2200      	movs	r2, #0
 800483a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800483e:	2303      	movs	r3, #3
 8004840:	e017      	b.n	8004872 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d101      	bne.n	800484c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004848:	2300      	movs	r3, #0
 800484a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	3b01      	subs	r3, #1
 8004850:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	689a      	ldr	r2, [r3, #8]
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	4013      	ands	r3, r2
 800485c:	68ba      	ldr	r2, [r7, #8]
 800485e:	429a      	cmp	r2, r3
 8004860:	bf0c      	ite	eq
 8004862:	2301      	moveq	r3, #1
 8004864:	2300      	movne	r3, #0
 8004866:	b2db      	uxtb	r3, r3
 8004868:	461a      	mov	r2, r3
 800486a:	79fb      	ldrb	r3, [r7, #7]
 800486c:	429a      	cmp	r2, r3
 800486e:	d19b      	bne.n	80047a8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004870:	2300      	movs	r3, #0
}
 8004872:	4618      	mov	r0, r3
 8004874:	3720      	adds	r7, #32
 8004876:	46bd      	mov	sp, r7
 8004878:	bd80      	pop	{r7, pc}
 800487a:	bf00      	nop
 800487c:	20000000 	.word	0x20000000

08004880 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b086      	sub	sp, #24
 8004884:	af02      	add	r7, sp, #8
 8004886:	60f8      	str	r0, [r7, #12]
 8004888:	60b9      	str	r1, [r7, #8]
 800488a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004894:	d111      	bne.n	80048ba <SPI_EndRxTransaction+0x3a>
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800489e:	d004      	beq.n	80048aa <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048a8:	d107      	bne.n	80048ba <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80048b8:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80048c2:	d117      	bne.n	80048f4 <SPI_EndRxTransaction+0x74>
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048cc:	d112      	bne.n	80048f4 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	9300      	str	r3, [sp, #0]
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	2200      	movs	r2, #0
 80048d6:	2101      	movs	r1, #1
 80048d8:	68f8      	ldr	r0, [r7, #12]
 80048da:	f7ff ff49 	bl	8004770 <SPI_WaitFlagStateUntilTimeout>
 80048de:	4603      	mov	r3, r0
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d01a      	beq.n	800491a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048e8:	f043 0220 	orr.w	r2, r3, #32
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80048f0:	2303      	movs	r3, #3
 80048f2:	e013      	b.n	800491c <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	9300      	str	r3, [sp, #0]
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	2200      	movs	r2, #0
 80048fc:	2180      	movs	r1, #128	@ 0x80
 80048fe:	68f8      	ldr	r0, [r7, #12]
 8004900:	f7ff ff36 	bl	8004770 <SPI_WaitFlagStateUntilTimeout>
 8004904:	4603      	mov	r3, r0
 8004906:	2b00      	cmp	r3, #0
 8004908:	d007      	beq.n	800491a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800490e:	f043 0220 	orr.w	r2, r3, #32
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004916:	2303      	movs	r3, #3
 8004918:	e000      	b.n	800491c <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 800491a:	2300      	movs	r3, #0
}
 800491c:	4618      	mov	r0, r3
 800491e:	3710      	adds	r7, #16
 8004920:	46bd      	mov	sp, r7
 8004922:	bd80      	pop	{r7, pc}

08004924 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b086      	sub	sp, #24
 8004928:	af02      	add	r7, sp, #8
 800492a:	60f8      	str	r0, [r7, #12]
 800492c:	60b9      	str	r1, [r7, #8]
 800492e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	9300      	str	r3, [sp, #0]
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	2201      	movs	r2, #1
 8004938:	2102      	movs	r1, #2
 800493a:	68f8      	ldr	r0, [r7, #12]
 800493c:	f7ff ff18 	bl	8004770 <SPI_WaitFlagStateUntilTimeout>
 8004940:	4603      	mov	r3, r0
 8004942:	2b00      	cmp	r3, #0
 8004944:	d007      	beq.n	8004956 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800494a:	f043 0220 	orr.w	r2, r3, #32
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004952:	2303      	movs	r3, #3
 8004954:	e013      	b.n	800497e <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	9300      	str	r3, [sp, #0]
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	2200      	movs	r2, #0
 800495e:	2180      	movs	r1, #128	@ 0x80
 8004960:	68f8      	ldr	r0, [r7, #12]
 8004962:	f7ff ff05 	bl	8004770 <SPI_WaitFlagStateUntilTimeout>
 8004966:	4603      	mov	r3, r0
 8004968:	2b00      	cmp	r3, #0
 800496a:	d007      	beq.n	800497c <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004970:	f043 0220 	orr.w	r2, r3, #32
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004978:	2303      	movs	r3, #3
 800497a:	e000      	b.n	800497e <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 800497c:	2300      	movs	r3, #0
}
 800497e:	4618      	mov	r0, r3
 8004980:	3710      	adds	r7, #16
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}

08004986 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004986:	b580      	push	{r7, lr}
 8004988:	b082      	sub	sp, #8
 800498a:	af00      	add	r7, sp, #0
 800498c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d101      	bne.n	8004998 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	e042      	b.n	8004a1e <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800499e:	b2db      	uxtb	r3, r3
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d106      	bne.n	80049b2 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2200      	movs	r2, #0
 80049a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80049ac:	6878      	ldr	r0, [r7, #4]
 80049ae:	f7fd f93b 	bl	8001c28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2224      	movs	r2, #36	@ 0x24
 80049b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	68da      	ldr	r2, [r3, #12]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80049c8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	f000 fc80 	bl	80052d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	691a      	ldr	r2, [r3, #16]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80049de:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	695a      	ldr	r2, [r3, #20]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80049ee:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	68da      	ldr	r2, [r3, #12]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80049fe:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2200      	movs	r2, #0
 8004a04:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2220      	movs	r2, #32
 8004a0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2220      	movs	r2, #32
 8004a12:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004a1c:	2300      	movs	r3, #0
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	3708      	adds	r7, #8
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}
	...

08004a28 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b0ba      	sub	sp, #232	@ 0xe8
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	68db      	ldr	r3, [r3, #12]
 8004a40:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	695b      	ldr	r3, [r3, #20]
 8004a4a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004a4e:	2300      	movs	r3, #0
 8004a50:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004a54:	2300      	movs	r3, #0
 8004a56:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004a5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a5e:	f003 030f 	and.w	r3, r3, #15
 8004a62:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004a66:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d10f      	bne.n	8004a8e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004a6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a72:	f003 0320 	and.w	r3, r3, #32
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d009      	beq.n	8004a8e <HAL_UART_IRQHandler+0x66>
 8004a7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a7e:	f003 0320 	and.w	r3, r3, #32
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d003      	beq.n	8004a8e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f000 fb63 	bl	8005152 <UART_Receive_IT>
      return;
 8004a8c:	e25b      	b.n	8004f46 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004a8e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	f000 80de 	beq.w	8004c54 <HAL_UART_IRQHandler+0x22c>
 8004a98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004a9c:	f003 0301 	and.w	r3, r3, #1
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d106      	bne.n	8004ab2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004aa4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004aa8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	f000 80d1 	beq.w	8004c54 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004ab2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ab6:	f003 0301 	and.w	r3, r3, #1
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d00b      	beq.n	8004ad6 <HAL_UART_IRQHandler+0xae>
 8004abe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ac2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d005      	beq.n	8004ad6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ace:	f043 0201 	orr.w	r2, r3, #1
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004ad6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ada:	f003 0304 	and.w	r3, r3, #4
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d00b      	beq.n	8004afa <HAL_UART_IRQHandler+0xd2>
 8004ae2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004ae6:	f003 0301 	and.w	r3, r3, #1
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d005      	beq.n	8004afa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004af2:	f043 0202 	orr.w	r2, r3, #2
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004afa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004afe:	f003 0302 	and.w	r3, r3, #2
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d00b      	beq.n	8004b1e <HAL_UART_IRQHandler+0xf6>
 8004b06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004b0a:	f003 0301 	and.w	r3, r3, #1
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d005      	beq.n	8004b1e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b16:	f043 0204 	orr.w	r2, r3, #4
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004b1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b22:	f003 0308 	and.w	r3, r3, #8
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d011      	beq.n	8004b4e <HAL_UART_IRQHandler+0x126>
 8004b2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b2e:	f003 0320 	and.w	r3, r3, #32
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d105      	bne.n	8004b42 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004b36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004b3a:	f003 0301 	and.w	r3, r3, #1
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d005      	beq.n	8004b4e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b46:	f043 0208 	orr.w	r2, r3, #8
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	f000 81f2 	beq.w	8004f3c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004b58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b5c:	f003 0320 	and.w	r3, r3, #32
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d008      	beq.n	8004b76 <HAL_UART_IRQHandler+0x14e>
 8004b64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b68:	f003 0320 	and.w	r3, r3, #32
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d002      	beq.n	8004b76 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004b70:	6878      	ldr	r0, [r7, #4]
 8004b72:	f000 faee 	bl	8005152 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	695b      	ldr	r3, [r3, #20]
 8004b7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	bf14      	ite	ne
 8004b84:	2301      	movne	r3, #1
 8004b86:	2300      	moveq	r3, #0
 8004b88:	b2db      	uxtb	r3, r3
 8004b8a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b92:	f003 0308 	and.w	r3, r3, #8
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d103      	bne.n	8004ba2 <HAL_UART_IRQHandler+0x17a>
 8004b9a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d04f      	beq.n	8004c42 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	f000 f9f8 	bl	8004f98 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	695b      	ldr	r3, [r3, #20]
 8004bae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d041      	beq.n	8004c3a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	3314      	adds	r3, #20
 8004bbc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bc0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004bc4:	e853 3f00 	ldrex	r3, [r3]
 8004bc8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004bcc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004bd0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004bd4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	3314      	adds	r3, #20
 8004bde:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004be2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004be6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004bee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004bf2:	e841 2300 	strex	r3, r2, [r1]
 8004bf6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004bfa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d1d9      	bne.n	8004bb6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d013      	beq.n	8004c32 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c0e:	4a7e      	ldr	r2, [pc, #504]	@ (8004e08 <HAL_UART_IRQHandler+0x3e0>)
 8004c10:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c16:	4618      	mov	r0, r3
 8004c18:	f7fd fa4e 	bl	80020b8 <HAL_DMA_Abort_IT>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d016      	beq.n	8004c50 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c28:	687a      	ldr	r2, [r7, #4]
 8004c2a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004c2c:	4610      	mov	r0, r2
 8004c2e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c30:	e00e      	b.n	8004c50 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	f000 f99c 	bl	8004f70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c38:	e00a      	b.n	8004c50 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f000 f998 	bl	8004f70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c40:	e006      	b.n	8004c50 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f000 f994 	bl	8004f70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004c4e:	e175      	b.n	8004f3c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c50:	bf00      	nop
    return;
 8004c52:	e173      	b.n	8004f3c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c58:	2b01      	cmp	r3, #1
 8004c5a:	f040 814f 	bne.w	8004efc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004c5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c62:	f003 0310 	and.w	r3, r3, #16
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	f000 8148 	beq.w	8004efc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004c6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c70:	f003 0310 	and.w	r3, r3, #16
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	f000 8141 	beq.w	8004efc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	60bb      	str	r3, [r7, #8]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	60bb      	str	r3, [r7, #8]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	60bb      	str	r3, [r7, #8]
 8004c8e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	695b      	ldr	r3, [r3, #20]
 8004c96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	f000 80b6 	beq.w	8004e0c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004cac:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	f000 8145 	beq.w	8004f40 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004cba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004cbe:	429a      	cmp	r2, r3
 8004cc0:	f080 813e 	bcs.w	8004f40 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004cca:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cd0:	699b      	ldr	r3, [r3, #24]
 8004cd2:	2b20      	cmp	r3, #32
 8004cd4:	f000 8088 	beq.w	8004de8 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	330c      	adds	r3, #12
 8004cde:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ce2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004ce6:	e853 3f00 	ldrex	r3, [r3]
 8004cea:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004cee:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004cf2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004cf6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	330c      	adds	r3, #12
 8004d00:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004d04:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004d08:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d0c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004d10:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004d14:	e841 2300 	strex	r3, r2, [r1]
 8004d18:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004d1c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d1d9      	bne.n	8004cd8 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	3314      	adds	r3, #20
 8004d2a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d2c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004d2e:	e853 3f00 	ldrex	r3, [r3]
 8004d32:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004d34:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004d36:	f023 0301 	bic.w	r3, r3, #1
 8004d3a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	3314      	adds	r3, #20
 8004d44:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004d48:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004d4c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d4e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004d50:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004d54:	e841 2300 	strex	r3, r2, [r1]
 8004d58:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004d5a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d1e1      	bne.n	8004d24 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	3314      	adds	r3, #20
 8004d66:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d68:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004d6a:	e853 3f00 	ldrex	r3, [r3]
 8004d6e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004d70:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004d72:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004d76:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	3314      	adds	r3, #20
 8004d80:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004d84:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004d86:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d88:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004d8a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004d8c:	e841 2300 	strex	r3, r2, [r1]
 8004d90:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004d92:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d1e3      	bne.n	8004d60 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2220      	movs	r2, #32
 8004d9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2200      	movs	r2, #0
 8004da4:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	330c      	adds	r3, #12
 8004dac:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004db0:	e853 3f00 	ldrex	r3, [r3]
 8004db4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004db6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004db8:	f023 0310 	bic.w	r3, r3, #16
 8004dbc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	330c      	adds	r3, #12
 8004dc6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004dca:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004dcc:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dce:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004dd0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004dd2:	e841 2300 	strex	r3, r2, [r1]
 8004dd6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004dd8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d1e3      	bne.n	8004da6 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004de2:	4618      	mov	r0, r3
 8004de4:	f7fd f92d 	bl	8002042 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2202      	movs	r2, #2
 8004dec:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004df6:	b29b      	uxth	r3, r3
 8004df8:	1ad3      	subs	r3, r2, r3
 8004dfa:	b29b      	uxth	r3, r3
 8004dfc:	4619      	mov	r1, r3
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	f000 f8bf 	bl	8004f82 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004e04:	e09c      	b.n	8004f40 <HAL_UART_IRQHandler+0x518>
 8004e06:	bf00      	nop
 8004e08:	0800505d 	.word	0x0800505d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004e14:	b29b      	uxth	r3, r3
 8004e16:	1ad3      	subs	r3, r2, r3
 8004e18:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004e20:	b29b      	uxth	r3, r3
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	f000 808e 	beq.w	8004f44 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004e28:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	f000 8089 	beq.w	8004f44 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	330c      	adds	r3, #12
 8004e38:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e3c:	e853 3f00 	ldrex	r3, [r3]
 8004e40:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004e42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e44:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004e48:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	330c      	adds	r3, #12
 8004e52:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004e56:	647a      	str	r2, [r7, #68]	@ 0x44
 8004e58:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e5a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004e5c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004e5e:	e841 2300 	strex	r3, r2, [r1]
 8004e62:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004e64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d1e3      	bne.n	8004e32 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	3314      	adds	r3, #20
 8004e70:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e74:	e853 3f00 	ldrex	r3, [r3]
 8004e78:	623b      	str	r3, [r7, #32]
   return(result);
 8004e7a:	6a3b      	ldr	r3, [r7, #32]
 8004e7c:	f023 0301 	bic.w	r3, r3, #1
 8004e80:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	3314      	adds	r3, #20
 8004e8a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004e8e:	633a      	str	r2, [r7, #48]	@ 0x30
 8004e90:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e92:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004e94:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e96:	e841 2300 	strex	r3, r2, [r1]
 8004e9a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004e9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d1e3      	bne.n	8004e6a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2220      	movs	r2, #32
 8004ea6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2200      	movs	r2, #0
 8004eae:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	330c      	adds	r3, #12
 8004eb6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	e853 3f00 	ldrex	r3, [r3]
 8004ebe:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	f023 0310 	bic.w	r3, r3, #16
 8004ec6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	330c      	adds	r3, #12
 8004ed0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004ed4:	61fa      	str	r2, [r7, #28]
 8004ed6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ed8:	69b9      	ldr	r1, [r7, #24]
 8004eda:	69fa      	ldr	r2, [r7, #28]
 8004edc:	e841 2300 	strex	r3, r2, [r1]
 8004ee0:	617b      	str	r3, [r7, #20]
   return(result);
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d1e3      	bne.n	8004eb0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2202      	movs	r2, #2
 8004eec:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004eee:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004ef2:	4619      	mov	r1, r3
 8004ef4:	6878      	ldr	r0, [r7, #4]
 8004ef6:	f000 f844 	bl	8004f82 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004efa:	e023      	b.n	8004f44 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004efc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d009      	beq.n	8004f1c <HAL_UART_IRQHandler+0x4f4>
 8004f08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d003      	beq.n	8004f1c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004f14:	6878      	ldr	r0, [r7, #4]
 8004f16:	f000 f8b5 	bl	8005084 <UART_Transmit_IT>
    return;
 8004f1a:	e014      	b.n	8004f46 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004f1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d00e      	beq.n	8004f46 <HAL_UART_IRQHandler+0x51e>
 8004f28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d008      	beq.n	8004f46 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004f34:	6878      	ldr	r0, [r7, #4]
 8004f36:	f000 f8f4 	bl	8005122 <UART_EndTransmit_IT>
    return;
 8004f3a:	e004      	b.n	8004f46 <HAL_UART_IRQHandler+0x51e>
    return;
 8004f3c:	bf00      	nop
 8004f3e:	e002      	b.n	8004f46 <HAL_UART_IRQHandler+0x51e>
      return;
 8004f40:	bf00      	nop
 8004f42:	e000      	b.n	8004f46 <HAL_UART_IRQHandler+0x51e>
      return;
 8004f44:	bf00      	nop
  }
}
 8004f46:	37e8      	adds	r7, #232	@ 0xe8
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}

08004f4c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b083      	sub	sp, #12
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004f54:	bf00      	nop
 8004f56:	370c      	adds	r7, #12
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bc80      	pop	{r7}
 8004f5c:	4770      	bx	lr

08004f5e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004f5e:	b480      	push	{r7}
 8004f60:	b083      	sub	sp, #12
 8004f62:	af00      	add	r7, sp, #0
 8004f64:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004f66:	bf00      	nop
 8004f68:	370c      	adds	r7, #12
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bc80      	pop	{r7}
 8004f6e:	4770      	bx	lr

08004f70 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b083      	sub	sp, #12
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004f78:	bf00      	nop
 8004f7a:	370c      	adds	r7, #12
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bc80      	pop	{r7}
 8004f80:	4770      	bx	lr

08004f82 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004f82:	b480      	push	{r7}
 8004f84:	b083      	sub	sp, #12
 8004f86:	af00      	add	r7, sp, #0
 8004f88:	6078      	str	r0, [r7, #4]
 8004f8a:	460b      	mov	r3, r1
 8004f8c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004f8e:	bf00      	nop
 8004f90:	370c      	adds	r7, #12
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bc80      	pop	{r7}
 8004f96:	4770      	bx	lr

08004f98 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b095      	sub	sp, #84	@ 0x54
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	330c      	adds	r3, #12
 8004fa6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fa8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004faa:	e853 3f00 	ldrex	r3, [r3]
 8004fae:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004fb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fb2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004fb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	330c      	adds	r3, #12
 8004fbe:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004fc0:	643a      	str	r2, [r7, #64]	@ 0x40
 8004fc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fc4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004fc6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004fc8:	e841 2300 	strex	r3, r2, [r1]
 8004fcc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004fce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d1e5      	bne.n	8004fa0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	3314      	adds	r3, #20
 8004fda:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fdc:	6a3b      	ldr	r3, [r7, #32]
 8004fde:	e853 3f00 	ldrex	r3, [r3]
 8004fe2:	61fb      	str	r3, [r7, #28]
   return(result);
 8004fe4:	69fb      	ldr	r3, [r7, #28]
 8004fe6:	f023 0301 	bic.w	r3, r3, #1
 8004fea:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	3314      	adds	r3, #20
 8004ff2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004ff4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004ff6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ff8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004ffa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004ffc:	e841 2300 	strex	r3, r2, [r1]
 8005000:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005004:	2b00      	cmp	r3, #0
 8005006:	d1e5      	bne.n	8004fd4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800500c:	2b01      	cmp	r3, #1
 800500e:	d119      	bne.n	8005044 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	330c      	adds	r3, #12
 8005016:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	e853 3f00 	ldrex	r3, [r3]
 800501e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	f023 0310 	bic.w	r3, r3, #16
 8005026:	647b      	str	r3, [r7, #68]	@ 0x44
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	330c      	adds	r3, #12
 800502e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005030:	61ba      	str	r2, [r7, #24]
 8005032:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005034:	6979      	ldr	r1, [r7, #20]
 8005036:	69ba      	ldr	r2, [r7, #24]
 8005038:	e841 2300 	strex	r3, r2, [r1]
 800503c:	613b      	str	r3, [r7, #16]
   return(result);
 800503e:	693b      	ldr	r3, [r7, #16]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d1e5      	bne.n	8005010 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2220      	movs	r2, #32
 8005048:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2200      	movs	r2, #0
 8005050:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005052:	bf00      	nop
 8005054:	3754      	adds	r7, #84	@ 0x54
 8005056:	46bd      	mov	sp, r7
 8005058:	bc80      	pop	{r7}
 800505a:	4770      	bx	lr

0800505c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b084      	sub	sp, #16
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005068:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	2200      	movs	r2, #0
 800506e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	2200      	movs	r2, #0
 8005074:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005076:	68f8      	ldr	r0, [r7, #12]
 8005078:	f7ff ff7a 	bl	8004f70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800507c:	bf00      	nop
 800507e:	3710      	adds	r7, #16
 8005080:	46bd      	mov	sp, r7
 8005082:	bd80      	pop	{r7, pc}

08005084 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005084:	b480      	push	{r7}
 8005086:	b085      	sub	sp, #20
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005092:	b2db      	uxtb	r3, r3
 8005094:	2b21      	cmp	r3, #33	@ 0x21
 8005096:	d13e      	bne.n	8005116 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	689b      	ldr	r3, [r3, #8]
 800509c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80050a0:	d114      	bne.n	80050cc <UART_Transmit_IT+0x48>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	691b      	ldr	r3, [r3, #16]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d110      	bne.n	80050cc <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6a1b      	ldr	r3, [r3, #32]
 80050ae:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	881b      	ldrh	r3, [r3, #0]
 80050b4:	461a      	mov	r2, r3
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80050be:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6a1b      	ldr	r3, [r3, #32]
 80050c4:	1c9a      	adds	r2, r3, #2
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	621a      	str	r2, [r3, #32]
 80050ca:	e008      	b.n	80050de <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6a1b      	ldr	r3, [r3, #32]
 80050d0:	1c59      	adds	r1, r3, #1
 80050d2:	687a      	ldr	r2, [r7, #4]
 80050d4:	6211      	str	r1, [r2, #32]
 80050d6:	781a      	ldrb	r2, [r3, #0]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80050e2:	b29b      	uxth	r3, r3
 80050e4:	3b01      	subs	r3, #1
 80050e6:	b29b      	uxth	r3, r3
 80050e8:	687a      	ldr	r2, [r7, #4]
 80050ea:	4619      	mov	r1, r3
 80050ec:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d10f      	bne.n	8005112 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	68da      	ldr	r2, [r3, #12]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005100:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	68da      	ldr	r2, [r3, #12]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005110:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005112:	2300      	movs	r3, #0
 8005114:	e000      	b.n	8005118 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005116:	2302      	movs	r3, #2
  }
}
 8005118:	4618      	mov	r0, r3
 800511a:	3714      	adds	r7, #20
 800511c:	46bd      	mov	sp, r7
 800511e:	bc80      	pop	{r7}
 8005120:	4770      	bx	lr

08005122 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005122:	b580      	push	{r7, lr}
 8005124:	b082      	sub	sp, #8
 8005126:	af00      	add	r7, sp, #0
 8005128:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	68da      	ldr	r2, [r3, #12]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005138:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2220      	movs	r2, #32
 800513e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f7ff ff02 	bl	8004f4c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005148:	2300      	movs	r3, #0
}
 800514a:	4618      	mov	r0, r3
 800514c:	3708      	adds	r7, #8
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}

08005152 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005152:	b580      	push	{r7, lr}
 8005154:	b08c      	sub	sp, #48	@ 0x30
 8005156:	af00      	add	r7, sp, #0
 8005158:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005160:	b2db      	uxtb	r3, r3
 8005162:	2b22      	cmp	r3, #34	@ 0x22
 8005164:	f040 80ae 	bne.w	80052c4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	689b      	ldr	r3, [r3, #8]
 800516c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005170:	d117      	bne.n	80051a2 <UART_Receive_IT+0x50>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	691b      	ldr	r3, [r3, #16]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d113      	bne.n	80051a2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800517a:	2300      	movs	r3, #0
 800517c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005182:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	b29b      	uxth	r3, r3
 800518c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005190:	b29a      	uxth	r2, r3
 8005192:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005194:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800519a:	1c9a      	adds	r2, r3, #2
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	629a      	str	r2, [r3, #40]	@ 0x28
 80051a0:	e026      	b.n	80051f0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80051a8:	2300      	movs	r3, #0
 80051aa:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	689b      	ldr	r3, [r3, #8]
 80051b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80051b4:	d007      	beq.n	80051c6 <UART_Receive_IT+0x74>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d10a      	bne.n	80051d4 <UART_Receive_IT+0x82>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	691b      	ldr	r3, [r3, #16]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d106      	bne.n	80051d4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	b2da      	uxtb	r2, r3
 80051ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051d0:	701a      	strb	r2, [r3, #0]
 80051d2:	e008      	b.n	80051e6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	b2db      	uxtb	r3, r3
 80051dc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80051e0:	b2da      	uxtb	r2, r3
 80051e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051e4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051ea:	1c5a      	adds	r2, r3, #1
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80051f4:	b29b      	uxth	r3, r3
 80051f6:	3b01      	subs	r3, #1
 80051f8:	b29b      	uxth	r3, r3
 80051fa:	687a      	ldr	r2, [r7, #4]
 80051fc:	4619      	mov	r1, r3
 80051fe:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005200:	2b00      	cmp	r3, #0
 8005202:	d15d      	bne.n	80052c0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	68da      	ldr	r2, [r3, #12]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f022 0220 	bic.w	r2, r2, #32
 8005212:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	68da      	ldr	r2, [r3, #12]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005222:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	695a      	ldr	r2, [r3, #20]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f022 0201 	bic.w	r2, r2, #1
 8005232:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2220      	movs	r2, #32
 8005238:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2200      	movs	r2, #0
 8005240:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005246:	2b01      	cmp	r3, #1
 8005248:	d135      	bne.n	80052b6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2200      	movs	r2, #0
 800524e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	330c      	adds	r3, #12
 8005256:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	e853 3f00 	ldrex	r3, [r3]
 800525e:	613b      	str	r3, [r7, #16]
   return(result);
 8005260:	693b      	ldr	r3, [r7, #16]
 8005262:	f023 0310 	bic.w	r3, r3, #16
 8005266:	627b      	str	r3, [r7, #36]	@ 0x24
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	330c      	adds	r3, #12
 800526e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005270:	623a      	str	r2, [r7, #32]
 8005272:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005274:	69f9      	ldr	r1, [r7, #28]
 8005276:	6a3a      	ldr	r2, [r7, #32]
 8005278:	e841 2300 	strex	r3, r2, [r1]
 800527c:	61bb      	str	r3, [r7, #24]
   return(result);
 800527e:	69bb      	ldr	r3, [r7, #24]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d1e5      	bne.n	8005250 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f003 0310 	and.w	r3, r3, #16
 800528e:	2b10      	cmp	r3, #16
 8005290:	d10a      	bne.n	80052a8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005292:	2300      	movs	r3, #0
 8005294:	60fb      	str	r3, [r7, #12]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	60fb      	str	r3, [r7, #12]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	60fb      	str	r3, [r7, #12]
 80052a6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80052ac:	4619      	mov	r1, r3
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f7ff fe67 	bl	8004f82 <HAL_UARTEx_RxEventCallback>
 80052b4:	e002      	b.n	80052bc <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f7ff fe51 	bl	8004f5e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80052bc:	2300      	movs	r3, #0
 80052be:	e002      	b.n	80052c6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80052c0:	2300      	movs	r3, #0
 80052c2:	e000      	b.n	80052c6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80052c4:	2302      	movs	r3, #2
  }
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	3730      	adds	r7, #48	@ 0x30
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}
	...

080052d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b084      	sub	sp, #16
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	691b      	ldr	r3, [r3, #16]
 80052de:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	68da      	ldr	r2, [r3, #12]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	430a      	orrs	r2, r1
 80052ec:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	689a      	ldr	r2, [r3, #8]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	691b      	ldr	r3, [r3, #16]
 80052f6:	431a      	orrs	r2, r3
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	695b      	ldr	r3, [r3, #20]
 80052fc:	4313      	orrs	r3, r2
 80052fe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	68db      	ldr	r3, [r3, #12]
 8005306:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800530a:	f023 030c 	bic.w	r3, r3, #12
 800530e:	687a      	ldr	r2, [r7, #4]
 8005310:	6812      	ldr	r2, [r2, #0]
 8005312:	68b9      	ldr	r1, [r7, #8]
 8005314:	430b      	orrs	r3, r1
 8005316:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	695b      	ldr	r3, [r3, #20]
 800531e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	699a      	ldr	r2, [r3, #24]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	430a      	orrs	r2, r1
 800532c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4a2c      	ldr	r2, [pc, #176]	@ (80053e4 <UART_SetConfig+0x114>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d103      	bne.n	8005340 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005338:	f7fe fd5e 	bl	8003df8 <HAL_RCC_GetPCLK2Freq>
 800533c:	60f8      	str	r0, [r7, #12]
 800533e:	e002      	b.n	8005346 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005340:	f7fe fd46 	bl	8003dd0 <HAL_RCC_GetPCLK1Freq>
 8005344:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005346:	68fa      	ldr	r2, [r7, #12]
 8005348:	4613      	mov	r3, r2
 800534a:	009b      	lsls	r3, r3, #2
 800534c:	4413      	add	r3, r2
 800534e:	009a      	lsls	r2, r3, #2
 8005350:	441a      	add	r2, r3
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	009b      	lsls	r3, r3, #2
 8005358:	fbb2 f3f3 	udiv	r3, r2, r3
 800535c:	4a22      	ldr	r2, [pc, #136]	@ (80053e8 <UART_SetConfig+0x118>)
 800535e:	fba2 2303 	umull	r2, r3, r2, r3
 8005362:	095b      	lsrs	r3, r3, #5
 8005364:	0119      	lsls	r1, r3, #4
 8005366:	68fa      	ldr	r2, [r7, #12]
 8005368:	4613      	mov	r3, r2
 800536a:	009b      	lsls	r3, r3, #2
 800536c:	4413      	add	r3, r2
 800536e:	009a      	lsls	r2, r3, #2
 8005370:	441a      	add	r2, r3
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	009b      	lsls	r3, r3, #2
 8005378:	fbb2 f2f3 	udiv	r2, r2, r3
 800537c:	4b1a      	ldr	r3, [pc, #104]	@ (80053e8 <UART_SetConfig+0x118>)
 800537e:	fba3 0302 	umull	r0, r3, r3, r2
 8005382:	095b      	lsrs	r3, r3, #5
 8005384:	2064      	movs	r0, #100	@ 0x64
 8005386:	fb00 f303 	mul.w	r3, r0, r3
 800538a:	1ad3      	subs	r3, r2, r3
 800538c:	011b      	lsls	r3, r3, #4
 800538e:	3332      	adds	r3, #50	@ 0x32
 8005390:	4a15      	ldr	r2, [pc, #84]	@ (80053e8 <UART_SetConfig+0x118>)
 8005392:	fba2 2303 	umull	r2, r3, r2, r3
 8005396:	095b      	lsrs	r3, r3, #5
 8005398:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800539c:	4419      	add	r1, r3
 800539e:	68fa      	ldr	r2, [r7, #12]
 80053a0:	4613      	mov	r3, r2
 80053a2:	009b      	lsls	r3, r3, #2
 80053a4:	4413      	add	r3, r2
 80053a6:	009a      	lsls	r2, r3, #2
 80053a8:	441a      	add	r2, r3
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	009b      	lsls	r3, r3, #2
 80053b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80053b4:	4b0c      	ldr	r3, [pc, #48]	@ (80053e8 <UART_SetConfig+0x118>)
 80053b6:	fba3 0302 	umull	r0, r3, r3, r2
 80053ba:	095b      	lsrs	r3, r3, #5
 80053bc:	2064      	movs	r0, #100	@ 0x64
 80053be:	fb00 f303 	mul.w	r3, r0, r3
 80053c2:	1ad3      	subs	r3, r2, r3
 80053c4:	011b      	lsls	r3, r3, #4
 80053c6:	3332      	adds	r3, #50	@ 0x32
 80053c8:	4a07      	ldr	r2, [pc, #28]	@ (80053e8 <UART_SetConfig+0x118>)
 80053ca:	fba2 2303 	umull	r2, r3, r2, r3
 80053ce:	095b      	lsrs	r3, r3, #5
 80053d0:	f003 020f 	and.w	r2, r3, #15
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	440a      	add	r2, r1
 80053da:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80053dc:	bf00      	nop
 80053de:	3710      	adds	r7, #16
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bd80      	pop	{r7, pc}
 80053e4:	40013800 	.word	0x40013800
 80053e8:	51eb851f 	.word	0x51eb851f

080053ec <std>:
 80053ec:	2300      	movs	r3, #0
 80053ee:	b510      	push	{r4, lr}
 80053f0:	4604      	mov	r4, r0
 80053f2:	e9c0 3300 	strd	r3, r3, [r0]
 80053f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80053fa:	6083      	str	r3, [r0, #8]
 80053fc:	8181      	strh	r1, [r0, #12]
 80053fe:	6643      	str	r3, [r0, #100]	@ 0x64
 8005400:	81c2      	strh	r2, [r0, #14]
 8005402:	6183      	str	r3, [r0, #24]
 8005404:	4619      	mov	r1, r3
 8005406:	2208      	movs	r2, #8
 8005408:	305c      	adds	r0, #92	@ 0x5c
 800540a:	f000 f9f9 	bl	8005800 <memset>
 800540e:	4b0d      	ldr	r3, [pc, #52]	@ (8005444 <std+0x58>)
 8005410:	6224      	str	r4, [r4, #32]
 8005412:	6263      	str	r3, [r4, #36]	@ 0x24
 8005414:	4b0c      	ldr	r3, [pc, #48]	@ (8005448 <std+0x5c>)
 8005416:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005418:	4b0c      	ldr	r3, [pc, #48]	@ (800544c <std+0x60>)
 800541a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800541c:	4b0c      	ldr	r3, [pc, #48]	@ (8005450 <std+0x64>)
 800541e:	6323      	str	r3, [r4, #48]	@ 0x30
 8005420:	4b0c      	ldr	r3, [pc, #48]	@ (8005454 <std+0x68>)
 8005422:	429c      	cmp	r4, r3
 8005424:	d006      	beq.n	8005434 <std+0x48>
 8005426:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800542a:	4294      	cmp	r4, r2
 800542c:	d002      	beq.n	8005434 <std+0x48>
 800542e:	33d0      	adds	r3, #208	@ 0xd0
 8005430:	429c      	cmp	r4, r3
 8005432:	d105      	bne.n	8005440 <std+0x54>
 8005434:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005438:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800543c:	f000 ba58 	b.w	80058f0 <__retarget_lock_init_recursive>
 8005440:	bd10      	pop	{r4, pc}
 8005442:	bf00      	nop
 8005444:	08005651 	.word	0x08005651
 8005448:	08005673 	.word	0x08005673
 800544c:	080056ab 	.word	0x080056ab
 8005450:	080056cf 	.word	0x080056cf
 8005454:	200001b8 	.word	0x200001b8

08005458 <stdio_exit_handler>:
 8005458:	4a02      	ldr	r2, [pc, #8]	@ (8005464 <stdio_exit_handler+0xc>)
 800545a:	4903      	ldr	r1, [pc, #12]	@ (8005468 <stdio_exit_handler+0x10>)
 800545c:	4803      	ldr	r0, [pc, #12]	@ (800546c <stdio_exit_handler+0x14>)
 800545e:	f000 b869 	b.w	8005534 <_fwalk_sglue>
 8005462:	bf00      	nop
 8005464:	2000000c 	.word	0x2000000c
 8005468:	08006185 	.word	0x08006185
 800546c:	2000001c 	.word	0x2000001c

08005470 <cleanup_stdio>:
 8005470:	6841      	ldr	r1, [r0, #4]
 8005472:	4b0c      	ldr	r3, [pc, #48]	@ (80054a4 <cleanup_stdio+0x34>)
 8005474:	b510      	push	{r4, lr}
 8005476:	4299      	cmp	r1, r3
 8005478:	4604      	mov	r4, r0
 800547a:	d001      	beq.n	8005480 <cleanup_stdio+0x10>
 800547c:	f000 fe82 	bl	8006184 <_fflush_r>
 8005480:	68a1      	ldr	r1, [r4, #8]
 8005482:	4b09      	ldr	r3, [pc, #36]	@ (80054a8 <cleanup_stdio+0x38>)
 8005484:	4299      	cmp	r1, r3
 8005486:	d002      	beq.n	800548e <cleanup_stdio+0x1e>
 8005488:	4620      	mov	r0, r4
 800548a:	f000 fe7b 	bl	8006184 <_fflush_r>
 800548e:	68e1      	ldr	r1, [r4, #12]
 8005490:	4b06      	ldr	r3, [pc, #24]	@ (80054ac <cleanup_stdio+0x3c>)
 8005492:	4299      	cmp	r1, r3
 8005494:	d004      	beq.n	80054a0 <cleanup_stdio+0x30>
 8005496:	4620      	mov	r0, r4
 8005498:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800549c:	f000 be72 	b.w	8006184 <_fflush_r>
 80054a0:	bd10      	pop	{r4, pc}
 80054a2:	bf00      	nop
 80054a4:	200001b8 	.word	0x200001b8
 80054a8:	20000220 	.word	0x20000220
 80054ac:	20000288 	.word	0x20000288

080054b0 <global_stdio_init.part.0>:
 80054b0:	b510      	push	{r4, lr}
 80054b2:	4b0b      	ldr	r3, [pc, #44]	@ (80054e0 <global_stdio_init.part.0+0x30>)
 80054b4:	4c0b      	ldr	r4, [pc, #44]	@ (80054e4 <global_stdio_init.part.0+0x34>)
 80054b6:	4a0c      	ldr	r2, [pc, #48]	@ (80054e8 <global_stdio_init.part.0+0x38>)
 80054b8:	4620      	mov	r0, r4
 80054ba:	601a      	str	r2, [r3, #0]
 80054bc:	2104      	movs	r1, #4
 80054be:	2200      	movs	r2, #0
 80054c0:	f7ff ff94 	bl	80053ec <std>
 80054c4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80054c8:	2201      	movs	r2, #1
 80054ca:	2109      	movs	r1, #9
 80054cc:	f7ff ff8e 	bl	80053ec <std>
 80054d0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80054d4:	2202      	movs	r2, #2
 80054d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80054da:	2112      	movs	r1, #18
 80054dc:	f7ff bf86 	b.w	80053ec <std>
 80054e0:	200002f0 	.word	0x200002f0
 80054e4:	200001b8 	.word	0x200001b8
 80054e8:	08005459 	.word	0x08005459

080054ec <__sfp_lock_acquire>:
 80054ec:	4801      	ldr	r0, [pc, #4]	@ (80054f4 <__sfp_lock_acquire+0x8>)
 80054ee:	f000 ba00 	b.w	80058f2 <__retarget_lock_acquire_recursive>
 80054f2:	bf00      	nop
 80054f4:	200002f9 	.word	0x200002f9

080054f8 <__sfp_lock_release>:
 80054f8:	4801      	ldr	r0, [pc, #4]	@ (8005500 <__sfp_lock_release+0x8>)
 80054fa:	f000 b9fb 	b.w	80058f4 <__retarget_lock_release_recursive>
 80054fe:	bf00      	nop
 8005500:	200002f9 	.word	0x200002f9

08005504 <__sinit>:
 8005504:	b510      	push	{r4, lr}
 8005506:	4604      	mov	r4, r0
 8005508:	f7ff fff0 	bl	80054ec <__sfp_lock_acquire>
 800550c:	6a23      	ldr	r3, [r4, #32]
 800550e:	b11b      	cbz	r3, 8005518 <__sinit+0x14>
 8005510:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005514:	f7ff bff0 	b.w	80054f8 <__sfp_lock_release>
 8005518:	4b04      	ldr	r3, [pc, #16]	@ (800552c <__sinit+0x28>)
 800551a:	6223      	str	r3, [r4, #32]
 800551c:	4b04      	ldr	r3, [pc, #16]	@ (8005530 <__sinit+0x2c>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d1f5      	bne.n	8005510 <__sinit+0xc>
 8005524:	f7ff ffc4 	bl	80054b0 <global_stdio_init.part.0>
 8005528:	e7f2      	b.n	8005510 <__sinit+0xc>
 800552a:	bf00      	nop
 800552c:	08005471 	.word	0x08005471
 8005530:	200002f0 	.word	0x200002f0

08005534 <_fwalk_sglue>:
 8005534:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005538:	4607      	mov	r7, r0
 800553a:	4688      	mov	r8, r1
 800553c:	4614      	mov	r4, r2
 800553e:	2600      	movs	r6, #0
 8005540:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005544:	f1b9 0901 	subs.w	r9, r9, #1
 8005548:	d505      	bpl.n	8005556 <_fwalk_sglue+0x22>
 800554a:	6824      	ldr	r4, [r4, #0]
 800554c:	2c00      	cmp	r4, #0
 800554e:	d1f7      	bne.n	8005540 <_fwalk_sglue+0xc>
 8005550:	4630      	mov	r0, r6
 8005552:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005556:	89ab      	ldrh	r3, [r5, #12]
 8005558:	2b01      	cmp	r3, #1
 800555a:	d907      	bls.n	800556c <_fwalk_sglue+0x38>
 800555c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005560:	3301      	adds	r3, #1
 8005562:	d003      	beq.n	800556c <_fwalk_sglue+0x38>
 8005564:	4629      	mov	r1, r5
 8005566:	4638      	mov	r0, r7
 8005568:	47c0      	blx	r8
 800556a:	4306      	orrs	r6, r0
 800556c:	3568      	adds	r5, #104	@ 0x68
 800556e:	e7e9      	b.n	8005544 <_fwalk_sglue+0x10>

08005570 <iprintf>:
 8005570:	b40f      	push	{r0, r1, r2, r3}
 8005572:	b507      	push	{r0, r1, r2, lr}
 8005574:	4906      	ldr	r1, [pc, #24]	@ (8005590 <iprintf+0x20>)
 8005576:	ab04      	add	r3, sp, #16
 8005578:	6808      	ldr	r0, [r1, #0]
 800557a:	f853 2b04 	ldr.w	r2, [r3], #4
 800557e:	6881      	ldr	r1, [r0, #8]
 8005580:	9301      	str	r3, [sp, #4]
 8005582:	f000 fad7 	bl	8005b34 <_vfiprintf_r>
 8005586:	b003      	add	sp, #12
 8005588:	f85d eb04 	ldr.w	lr, [sp], #4
 800558c:	b004      	add	sp, #16
 800558e:	4770      	bx	lr
 8005590:	20000018 	.word	0x20000018

08005594 <_puts_r>:
 8005594:	6a03      	ldr	r3, [r0, #32]
 8005596:	b570      	push	{r4, r5, r6, lr}
 8005598:	4605      	mov	r5, r0
 800559a:	460e      	mov	r6, r1
 800559c:	6884      	ldr	r4, [r0, #8]
 800559e:	b90b      	cbnz	r3, 80055a4 <_puts_r+0x10>
 80055a0:	f7ff ffb0 	bl	8005504 <__sinit>
 80055a4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80055a6:	07db      	lsls	r3, r3, #31
 80055a8:	d405      	bmi.n	80055b6 <_puts_r+0x22>
 80055aa:	89a3      	ldrh	r3, [r4, #12]
 80055ac:	0598      	lsls	r0, r3, #22
 80055ae:	d402      	bmi.n	80055b6 <_puts_r+0x22>
 80055b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80055b2:	f000 f99e 	bl	80058f2 <__retarget_lock_acquire_recursive>
 80055b6:	89a3      	ldrh	r3, [r4, #12]
 80055b8:	0719      	lsls	r1, r3, #28
 80055ba:	d502      	bpl.n	80055c2 <_puts_r+0x2e>
 80055bc:	6923      	ldr	r3, [r4, #16]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d135      	bne.n	800562e <_puts_r+0x9a>
 80055c2:	4621      	mov	r1, r4
 80055c4:	4628      	mov	r0, r5
 80055c6:	f000 f8c5 	bl	8005754 <__swsetup_r>
 80055ca:	b380      	cbz	r0, 800562e <_puts_r+0x9a>
 80055cc:	f04f 35ff 	mov.w	r5, #4294967295
 80055d0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80055d2:	07da      	lsls	r2, r3, #31
 80055d4:	d405      	bmi.n	80055e2 <_puts_r+0x4e>
 80055d6:	89a3      	ldrh	r3, [r4, #12]
 80055d8:	059b      	lsls	r3, r3, #22
 80055da:	d402      	bmi.n	80055e2 <_puts_r+0x4e>
 80055dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80055de:	f000 f989 	bl	80058f4 <__retarget_lock_release_recursive>
 80055e2:	4628      	mov	r0, r5
 80055e4:	bd70      	pop	{r4, r5, r6, pc}
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	da04      	bge.n	80055f4 <_puts_r+0x60>
 80055ea:	69a2      	ldr	r2, [r4, #24]
 80055ec:	429a      	cmp	r2, r3
 80055ee:	dc17      	bgt.n	8005620 <_puts_r+0x8c>
 80055f0:	290a      	cmp	r1, #10
 80055f2:	d015      	beq.n	8005620 <_puts_r+0x8c>
 80055f4:	6823      	ldr	r3, [r4, #0]
 80055f6:	1c5a      	adds	r2, r3, #1
 80055f8:	6022      	str	r2, [r4, #0]
 80055fa:	7019      	strb	r1, [r3, #0]
 80055fc:	68a3      	ldr	r3, [r4, #8]
 80055fe:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005602:	3b01      	subs	r3, #1
 8005604:	60a3      	str	r3, [r4, #8]
 8005606:	2900      	cmp	r1, #0
 8005608:	d1ed      	bne.n	80055e6 <_puts_r+0x52>
 800560a:	2b00      	cmp	r3, #0
 800560c:	da11      	bge.n	8005632 <_puts_r+0x9e>
 800560e:	4622      	mov	r2, r4
 8005610:	210a      	movs	r1, #10
 8005612:	4628      	mov	r0, r5
 8005614:	f000 f85f 	bl	80056d6 <__swbuf_r>
 8005618:	3001      	adds	r0, #1
 800561a:	d0d7      	beq.n	80055cc <_puts_r+0x38>
 800561c:	250a      	movs	r5, #10
 800561e:	e7d7      	b.n	80055d0 <_puts_r+0x3c>
 8005620:	4622      	mov	r2, r4
 8005622:	4628      	mov	r0, r5
 8005624:	f000 f857 	bl	80056d6 <__swbuf_r>
 8005628:	3001      	adds	r0, #1
 800562a:	d1e7      	bne.n	80055fc <_puts_r+0x68>
 800562c:	e7ce      	b.n	80055cc <_puts_r+0x38>
 800562e:	3e01      	subs	r6, #1
 8005630:	e7e4      	b.n	80055fc <_puts_r+0x68>
 8005632:	6823      	ldr	r3, [r4, #0]
 8005634:	1c5a      	adds	r2, r3, #1
 8005636:	6022      	str	r2, [r4, #0]
 8005638:	220a      	movs	r2, #10
 800563a:	701a      	strb	r2, [r3, #0]
 800563c:	e7ee      	b.n	800561c <_puts_r+0x88>
	...

08005640 <puts>:
 8005640:	4b02      	ldr	r3, [pc, #8]	@ (800564c <puts+0xc>)
 8005642:	4601      	mov	r1, r0
 8005644:	6818      	ldr	r0, [r3, #0]
 8005646:	f7ff bfa5 	b.w	8005594 <_puts_r>
 800564a:	bf00      	nop
 800564c:	20000018 	.word	0x20000018

08005650 <__sread>:
 8005650:	b510      	push	{r4, lr}
 8005652:	460c      	mov	r4, r1
 8005654:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005658:	f000 f8fc 	bl	8005854 <_read_r>
 800565c:	2800      	cmp	r0, #0
 800565e:	bfab      	itete	ge
 8005660:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005662:	89a3      	ldrhlt	r3, [r4, #12]
 8005664:	181b      	addge	r3, r3, r0
 8005666:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800566a:	bfac      	ite	ge
 800566c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800566e:	81a3      	strhlt	r3, [r4, #12]
 8005670:	bd10      	pop	{r4, pc}

08005672 <__swrite>:
 8005672:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005676:	461f      	mov	r7, r3
 8005678:	898b      	ldrh	r3, [r1, #12]
 800567a:	4605      	mov	r5, r0
 800567c:	05db      	lsls	r3, r3, #23
 800567e:	460c      	mov	r4, r1
 8005680:	4616      	mov	r6, r2
 8005682:	d505      	bpl.n	8005690 <__swrite+0x1e>
 8005684:	2302      	movs	r3, #2
 8005686:	2200      	movs	r2, #0
 8005688:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800568c:	f000 f8d0 	bl	8005830 <_lseek_r>
 8005690:	89a3      	ldrh	r3, [r4, #12]
 8005692:	4632      	mov	r2, r6
 8005694:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005698:	81a3      	strh	r3, [r4, #12]
 800569a:	4628      	mov	r0, r5
 800569c:	463b      	mov	r3, r7
 800569e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80056a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80056a6:	f000 b8e7 	b.w	8005878 <_write_r>

080056aa <__sseek>:
 80056aa:	b510      	push	{r4, lr}
 80056ac:	460c      	mov	r4, r1
 80056ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056b2:	f000 f8bd 	bl	8005830 <_lseek_r>
 80056b6:	1c43      	adds	r3, r0, #1
 80056b8:	89a3      	ldrh	r3, [r4, #12]
 80056ba:	bf15      	itete	ne
 80056bc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80056be:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80056c2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80056c6:	81a3      	strheq	r3, [r4, #12]
 80056c8:	bf18      	it	ne
 80056ca:	81a3      	strhne	r3, [r4, #12]
 80056cc:	bd10      	pop	{r4, pc}

080056ce <__sclose>:
 80056ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056d2:	f000 b89d 	b.w	8005810 <_close_r>

080056d6 <__swbuf_r>:
 80056d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056d8:	460e      	mov	r6, r1
 80056da:	4614      	mov	r4, r2
 80056dc:	4605      	mov	r5, r0
 80056de:	b118      	cbz	r0, 80056e8 <__swbuf_r+0x12>
 80056e0:	6a03      	ldr	r3, [r0, #32]
 80056e2:	b90b      	cbnz	r3, 80056e8 <__swbuf_r+0x12>
 80056e4:	f7ff ff0e 	bl	8005504 <__sinit>
 80056e8:	69a3      	ldr	r3, [r4, #24]
 80056ea:	60a3      	str	r3, [r4, #8]
 80056ec:	89a3      	ldrh	r3, [r4, #12]
 80056ee:	071a      	lsls	r2, r3, #28
 80056f0:	d501      	bpl.n	80056f6 <__swbuf_r+0x20>
 80056f2:	6923      	ldr	r3, [r4, #16]
 80056f4:	b943      	cbnz	r3, 8005708 <__swbuf_r+0x32>
 80056f6:	4621      	mov	r1, r4
 80056f8:	4628      	mov	r0, r5
 80056fa:	f000 f82b 	bl	8005754 <__swsetup_r>
 80056fe:	b118      	cbz	r0, 8005708 <__swbuf_r+0x32>
 8005700:	f04f 37ff 	mov.w	r7, #4294967295
 8005704:	4638      	mov	r0, r7
 8005706:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005708:	6823      	ldr	r3, [r4, #0]
 800570a:	6922      	ldr	r2, [r4, #16]
 800570c:	b2f6      	uxtb	r6, r6
 800570e:	1a98      	subs	r0, r3, r2
 8005710:	6963      	ldr	r3, [r4, #20]
 8005712:	4637      	mov	r7, r6
 8005714:	4283      	cmp	r3, r0
 8005716:	dc05      	bgt.n	8005724 <__swbuf_r+0x4e>
 8005718:	4621      	mov	r1, r4
 800571a:	4628      	mov	r0, r5
 800571c:	f000 fd32 	bl	8006184 <_fflush_r>
 8005720:	2800      	cmp	r0, #0
 8005722:	d1ed      	bne.n	8005700 <__swbuf_r+0x2a>
 8005724:	68a3      	ldr	r3, [r4, #8]
 8005726:	3b01      	subs	r3, #1
 8005728:	60a3      	str	r3, [r4, #8]
 800572a:	6823      	ldr	r3, [r4, #0]
 800572c:	1c5a      	adds	r2, r3, #1
 800572e:	6022      	str	r2, [r4, #0]
 8005730:	701e      	strb	r6, [r3, #0]
 8005732:	6962      	ldr	r2, [r4, #20]
 8005734:	1c43      	adds	r3, r0, #1
 8005736:	429a      	cmp	r2, r3
 8005738:	d004      	beq.n	8005744 <__swbuf_r+0x6e>
 800573a:	89a3      	ldrh	r3, [r4, #12]
 800573c:	07db      	lsls	r3, r3, #31
 800573e:	d5e1      	bpl.n	8005704 <__swbuf_r+0x2e>
 8005740:	2e0a      	cmp	r6, #10
 8005742:	d1df      	bne.n	8005704 <__swbuf_r+0x2e>
 8005744:	4621      	mov	r1, r4
 8005746:	4628      	mov	r0, r5
 8005748:	f000 fd1c 	bl	8006184 <_fflush_r>
 800574c:	2800      	cmp	r0, #0
 800574e:	d0d9      	beq.n	8005704 <__swbuf_r+0x2e>
 8005750:	e7d6      	b.n	8005700 <__swbuf_r+0x2a>
	...

08005754 <__swsetup_r>:
 8005754:	b538      	push	{r3, r4, r5, lr}
 8005756:	4b29      	ldr	r3, [pc, #164]	@ (80057fc <__swsetup_r+0xa8>)
 8005758:	4605      	mov	r5, r0
 800575a:	6818      	ldr	r0, [r3, #0]
 800575c:	460c      	mov	r4, r1
 800575e:	b118      	cbz	r0, 8005768 <__swsetup_r+0x14>
 8005760:	6a03      	ldr	r3, [r0, #32]
 8005762:	b90b      	cbnz	r3, 8005768 <__swsetup_r+0x14>
 8005764:	f7ff fece 	bl	8005504 <__sinit>
 8005768:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800576c:	0719      	lsls	r1, r3, #28
 800576e:	d422      	bmi.n	80057b6 <__swsetup_r+0x62>
 8005770:	06da      	lsls	r2, r3, #27
 8005772:	d407      	bmi.n	8005784 <__swsetup_r+0x30>
 8005774:	2209      	movs	r2, #9
 8005776:	602a      	str	r2, [r5, #0]
 8005778:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800577c:	f04f 30ff 	mov.w	r0, #4294967295
 8005780:	81a3      	strh	r3, [r4, #12]
 8005782:	e033      	b.n	80057ec <__swsetup_r+0x98>
 8005784:	0758      	lsls	r0, r3, #29
 8005786:	d512      	bpl.n	80057ae <__swsetup_r+0x5a>
 8005788:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800578a:	b141      	cbz	r1, 800579e <__swsetup_r+0x4a>
 800578c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005790:	4299      	cmp	r1, r3
 8005792:	d002      	beq.n	800579a <__swsetup_r+0x46>
 8005794:	4628      	mov	r0, r5
 8005796:	f000 f8af 	bl	80058f8 <_free_r>
 800579a:	2300      	movs	r3, #0
 800579c:	6363      	str	r3, [r4, #52]	@ 0x34
 800579e:	89a3      	ldrh	r3, [r4, #12]
 80057a0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80057a4:	81a3      	strh	r3, [r4, #12]
 80057a6:	2300      	movs	r3, #0
 80057a8:	6063      	str	r3, [r4, #4]
 80057aa:	6923      	ldr	r3, [r4, #16]
 80057ac:	6023      	str	r3, [r4, #0]
 80057ae:	89a3      	ldrh	r3, [r4, #12]
 80057b0:	f043 0308 	orr.w	r3, r3, #8
 80057b4:	81a3      	strh	r3, [r4, #12]
 80057b6:	6923      	ldr	r3, [r4, #16]
 80057b8:	b94b      	cbnz	r3, 80057ce <__swsetup_r+0x7a>
 80057ba:	89a3      	ldrh	r3, [r4, #12]
 80057bc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80057c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80057c4:	d003      	beq.n	80057ce <__swsetup_r+0x7a>
 80057c6:	4621      	mov	r1, r4
 80057c8:	4628      	mov	r0, r5
 80057ca:	f000 fd28 	bl	800621e <__smakebuf_r>
 80057ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80057d2:	f013 0201 	ands.w	r2, r3, #1
 80057d6:	d00a      	beq.n	80057ee <__swsetup_r+0x9a>
 80057d8:	2200      	movs	r2, #0
 80057da:	60a2      	str	r2, [r4, #8]
 80057dc:	6962      	ldr	r2, [r4, #20]
 80057de:	4252      	negs	r2, r2
 80057e0:	61a2      	str	r2, [r4, #24]
 80057e2:	6922      	ldr	r2, [r4, #16]
 80057e4:	b942      	cbnz	r2, 80057f8 <__swsetup_r+0xa4>
 80057e6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80057ea:	d1c5      	bne.n	8005778 <__swsetup_r+0x24>
 80057ec:	bd38      	pop	{r3, r4, r5, pc}
 80057ee:	0799      	lsls	r1, r3, #30
 80057f0:	bf58      	it	pl
 80057f2:	6962      	ldrpl	r2, [r4, #20]
 80057f4:	60a2      	str	r2, [r4, #8]
 80057f6:	e7f4      	b.n	80057e2 <__swsetup_r+0x8e>
 80057f8:	2000      	movs	r0, #0
 80057fa:	e7f7      	b.n	80057ec <__swsetup_r+0x98>
 80057fc:	20000018 	.word	0x20000018

08005800 <memset>:
 8005800:	4603      	mov	r3, r0
 8005802:	4402      	add	r2, r0
 8005804:	4293      	cmp	r3, r2
 8005806:	d100      	bne.n	800580a <memset+0xa>
 8005808:	4770      	bx	lr
 800580a:	f803 1b01 	strb.w	r1, [r3], #1
 800580e:	e7f9      	b.n	8005804 <memset+0x4>

08005810 <_close_r>:
 8005810:	b538      	push	{r3, r4, r5, lr}
 8005812:	2300      	movs	r3, #0
 8005814:	4d05      	ldr	r5, [pc, #20]	@ (800582c <_close_r+0x1c>)
 8005816:	4604      	mov	r4, r0
 8005818:	4608      	mov	r0, r1
 800581a:	602b      	str	r3, [r5, #0]
 800581c:	f7fc f96d 	bl	8001afa <_close>
 8005820:	1c43      	adds	r3, r0, #1
 8005822:	d102      	bne.n	800582a <_close_r+0x1a>
 8005824:	682b      	ldr	r3, [r5, #0]
 8005826:	b103      	cbz	r3, 800582a <_close_r+0x1a>
 8005828:	6023      	str	r3, [r4, #0]
 800582a:	bd38      	pop	{r3, r4, r5, pc}
 800582c:	200002f4 	.word	0x200002f4

08005830 <_lseek_r>:
 8005830:	b538      	push	{r3, r4, r5, lr}
 8005832:	4604      	mov	r4, r0
 8005834:	4608      	mov	r0, r1
 8005836:	4611      	mov	r1, r2
 8005838:	2200      	movs	r2, #0
 800583a:	4d05      	ldr	r5, [pc, #20]	@ (8005850 <_lseek_r+0x20>)
 800583c:	602a      	str	r2, [r5, #0]
 800583e:	461a      	mov	r2, r3
 8005840:	f7fc f97f 	bl	8001b42 <_lseek>
 8005844:	1c43      	adds	r3, r0, #1
 8005846:	d102      	bne.n	800584e <_lseek_r+0x1e>
 8005848:	682b      	ldr	r3, [r5, #0]
 800584a:	b103      	cbz	r3, 800584e <_lseek_r+0x1e>
 800584c:	6023      	str	r3, [r4, #0]
 800584e:	bd38      	pop	{r3, r4, r5, pc}
 8005850:	200002f4 	.word	0x200002f4

08005854 <_read_r>:
 8005854:	b538      	push	{r3, r4, r5, lr}
 8005856:	4604      	mov	r4, r0
 8005858:	4608      	mov	r0, r1
 800585a:	4611      	mov	r1, r2
 800585c:	2200      	movs	r2, #0
 800585e:	4d05      	ldr	r5, [pc, #20]	@ (8005874 <_read_r+0x20>)
 8005860:	602a      	str	r2, [r5, #0]
 8005862:	461a      	mov	r2, r3
 8005864:	f7fc f910 	bl	8001a88 <_read>
 8005868:	1c43      	adds	r3, r0, #1
 800586a:	d102      	bne.n	8005872 <_read_r+0x1e>
 800586c:	682b      	ldr	r3, [r5, #0]
 800586e:	b103      	cbz	r3, 8005872 <_read_r+0x1e>
 8005870:	6023      	str	r3, [r4, #0]
 8005872:	bd38      	pop	{r3, r4, r5, pc}
 8005874:	200002f4 	.word	0x200002f4

08005878 <_write_r>:
 8005878:	b538      	push	{r3, r4, r5, lr}
 800587a:	4604      	mov	r4, r0
 800587c:	4608      	mov	r0, r1
 800587e:	4611      	mov	r1, r2
 8005880:	2200      	movs	r2, #0
 8005882:	4d05      	ldr	r5, [pc, #20]	@ (8005898 <_write_r+0x20>)
 8005884:	602a      	str	r2, [r5, #0]
 8005886:	461a      	mov	r2, r3
 8005888:	f7fc f91b 	bl	8001ac2 <_write>
 800588c:	1c43      	adds	r3, r0, #1
 800588e:	d102      	bne.n	8005896 <_write_r+0x1e>
 8005890:	682b      	ldr	r3, [r5, #0]
 8005892:	b103      	cbz	r3, 8005896 <_write_r+0x1e>
 8005894:	6023      	str	r3, [r4, #0]
 8005896:	bd38      	pop	{r3, r4, r5, pc}
 8005898:	200002f4 	.word	0x200002f4

0800589c <__errno>:
 800589c:	4b01      	ldr	r3, [pc, #4]	@ (80058a4 <__errno+0x8>)
 800589e:	6818      	ldr	r0, [r3, #0]
 80058a0:	4770      	bx	lr
 80058a2:	bf00      	nop
 80058a4:	20000018 	.word	0x20000018

080058a8 <__libc_init_array>:
 80058a8:	b570      	push	{r4, r5, r6, lr}
 80058aa:	2600      	movs	r6, #0
 80058ac:	4d0c      	ldr	r5, [pc, #48]	@ (80058e0 <__libc_init_array+0x38>)
 80058ae:	4c0d      	ldr	r4, [pc, #52]	@ (80058e4 <__libc_init_array+0x3c>)
 80058b0:	1b64      	subs	r4, r4, r5
 80058b2:	10a4      	asrs	r4, r4, #2
 80058b4:	42a6      	cmp	r6, r4
 80058b6:	d109      	bne.n	80058cc <__libc_init_array+0x24>
 80058b8:	f000 fd2e 	bl	8006318 <_init>
 80058bc:	2600      	movs	r6, #0
 80058be:	4d0a      	ldr	r5, [pc, #40]	@ (80058e8 <__libc_init_array+0x40>)
 80058c0:	4c0a      	ldr	r4, [pc, #40]	@ (80058ec <__libc_init_array+0x44>)
 80058c2:	1b64      	subs	r4, r4, r5
 80058c4:	10a4      	asrs	r4, r4, #2
 80058c6:	42a6      	cmp	r6, r4
 80058c8:	d105      	bne.n	80058d6 <__libc_init_array+0x2e>
 80058ca:	bd70      	pop	{r4, r5, r6, pc}
 80058cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80058d0:	4798      	blx	r3
 80058d2:	3601      	adds	r6, #1
 80058d4:	e7ee      	b.n	80058b4 <__libc_init_array+0xc>
 80058d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80058da:	4798      	blx	r3
 80058dc:	3601      	adds	r6, #1
 80058de:	e7f2      	b.n	80058c6 <__libc_init_array+0x1e>
 80058e0:	08006440 	.word	0x08006440
 80058e4:	08006440 	.word	0x08006440
 80058e8:	08006440 	.word	0x08006440
 80058ec:	08006444 	.word	0x08006444

080058f0 <__retarget_lock_init_recursive>:
 80058f0:	4770      	bx	lr

080058f2 <__retarget_lock_acquire_recursive>:
 80058f2:	4770      	bx	lr

080058f4 <__retarget_lock_release_recursive>:
 80058f4:	4770      	bx	lr
	...

080058f8 <_free_r>:
 80058f8:	b538      	push	{r3, r4, r5, lr}
 80058fa:	4605      	mov	r5, r0
 80058fc:	2900      	cmp	r1, #0
 80058fe:	d040      	beq.n	8005982 <_free_r+0x8a>
 8005900:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005904:	1f0c      	subs	r4, r1, #4
 8005906:	2b00      	cmp	r3, #0
 8005908:	bfb8      	it	lt
 800590a:	18e4      	addlt	r4, r4, r3
 800590c:	f000 f8de 	bl	8005acc <__malloc_lock>
 8005910:	4a1c      	ldr	r2, [pc, #112]	@ (8005984 <_free_r+0x8c>)
 8005912:	6813      	ldr	r3, [r2, #0]
 8005914:	b933      	cbnz	r3, 8005924 <_free_r+0x2c>
 8005916:	6063      	str	r3, [r4, #4]
 8005918:	6014      	str	r4, [r2, #0]
 800591a:	4628      	mov	r0, r5
 800591c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005920:	f000 b8da 	b.w	8005ad8 <__malloc_unlock>
 8005924:	42a3      	cmp	r3, r4
 8005926:	d908      	bls.n	800593a <_free_r+0x42>
 8005928:	6820      	ldr	r0, [r4, #0]
 800592a:	1821      	adds	r1, r4, r0
 800592c:	428b      	cmp	r3, r1
 800592e:	bf01      	itttt	eq
 8005930:	6819      	ldreq	r1, [r3, #0]
 8005932:	685b      	ldreq	r3, [r3, #4]
 8005934:	1809      	addeq	r1, r1, r0
 8005936:	6021      	streq	r1, [r4, #0]
 8005938:	e7ed      	b.n	8005916 <_free_r+0x1e>
 800593a:	461a      	mov	r2, r3
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	b10b      	cbz	r3, 8005944 <_free_r+0x4c>
 8005940:	42a3      	cmp	r3, r4
 8005942:	d9fa      	bls.n	800593a <_free_r+0x42>
 8005944:	6811      	ldr	r1, [r2, #0]
 8005946:	1850      	adds	r0, r2, r1
 8005948:	42a0      	cmp	r0, r4
 800594a:	d10b      	bne.n	8005964 <_free_r+0x6c>
 800594c:	6820      	ldr	r0, [r4, #0]
 800594e:	4401      	add	r1, r0
 8005950:	1850      	adds	r0, r2, r1
 8005952:	4283      	cmp	r3, r0
 8005954:	6011      	str	r1, [r2, #0]
 8005956:	d1e0      	bne.n	800591a <_free_r+0x22>
 8005958:	6818      	ldr	r0, [r3, #0]
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	4408      	add	r0, r1
 800595e:	6010      	str	r0, [r2, #0]
 8005960:	6053      	str	r3, [r2, #4]
 8005962:	e7da      	b.n	800591a <_free_r+0x22>
 8005964:	d902      	bls.n	800596c <_free_r+0x74>
 8005966:	230c      	movs	r3, #12
 8005968:	602b      	str	r3, [r5, #0]
 800596a:	e7d6      	b.n	800591a <_free_r+0x22>
 800596c:	6820      	ldr	r0, [r4, #0]
 800596e:	1821      	adds	r1, r4, r0
 8005970:	428b      	cmp	r3, r1
 8005972:	bf01      	itttt	eq
 8005974:	6819      	ldreq	r1, [r3, #0]
 8005976:	685b      	ldreq	r3, [r3, #4]
 8005978:	1809      	addeq	r1, r1, r0
 800597a:	6021      	streq	r1, [r4, #0]
 800597c:	6063      	str	r3, [r4, #4]
 800597e:	6054      	str	r4, [r2, #4]
 8005980:	e7cb      	b.n	800591a <_free_r+0x22>
 8005982:	bd38      	pop	{r3, r4, r5, pc}
 8005984:	20000300 	.word	0x20000300

08005988 <sbrk_aligned>:
 8005988:	b570      	push	{r4, r5, r6, lr}
 800598a:	4e0f      	ldr	r6, [pc, #60]	@ (80059c8 <sbrk_aligned+0x40>)
 800598c:	460c      	mov	r4, r1
 800598e:	6831      	ldr	r1, [r6, #0]
 8005990:	4605      	mov	r5, r0
 8005992:	b911      	cbnz	r1, 800599a <sbrk_aligned+0x12>
 8005994:	f000 fca2 	bl	80062dc <_sbrk_r>
 8005998:	6030      	str	r0, [r6, #0]
 800599a:	4621      	mov	r1, r4
 800599c:	4628      	mov	r0, r5
 800599e:	f000 fc9d 	bl	80062dc <_sbrk_r>
 80059a2:	1c43      	adds	r3, r0, #1
 80059a4:	d103      	bne.n	80059ae <sbrk_aligned+0x26>
 80059a6:	f04f 34ff 	mov.w	r4, #4294967295
 80059aa:	4620      	mov	r0, r4
 80059ac:	bd70      	pop	{r4, r5, r6, pc}
 80059ae:	1cc4      	adds	r4, r0, #3
 80059b0:	f024 0403 	bic.w	r4, r4, #3
 80059b4:	42a0      	cmp	r0, r4
 80059b6:	d0f8      	beq.n	80059aa <sbrk_aligned+0x22>
 80059b8:	1a21      	subs	r1, r4, r0
 80059ba:	4628      	mov	r0, r5
 80059bc:	f000 fc8e 	bl	80062dc <_sbrk_r>
 80059c0:	3001      	adds	r0, #1
 80059c2:	d1f2      	bne.n	80059aa <sbrk_aligned+0x22>
 80059c4:	e7ef      	b.n	80059a6 <sbrk_aligned+0x1e>
 80059c6:	bf00      	nop
 80059c8:	200002fc 	.word	0x200002fc

080059cc <_malloc_r>:
 80059cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80059d0:	1ccd      	adds	r5, r1, #3
 80059d2:	f025 0503 	bic.w	r5, r5, #3
 80059d6:	3508      	adds	r5, #8
 80059d8:	2d0c      	cmp	r5, #12
 80059da:	bf38      	it	cc
 80059dc:	250c      	movcc	r5, #12
 80059de:	2d00      	cmp	r5, #0
 80059e0:	4606      	mov	r6, r0
 80059e2:	db01      	blt.n	80059e8 <_malloc_r+0x1c>
 80059e4:	42a9      	cmp	r1, r5
 80059e6:	d904      	bls.n	80059f2 <_malloc_r+0x26>
 80059e8:	230c      	movs	r3, #12
 80059ea:	6033      	str	r3, [r6, #0]
 80059ec:	2000      	movs	r0, #0
 80059ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80059f2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005ac8 <_malloc_r+0xfc>
 80059f6:	f000 f869 	bl	8005acc <__malloc_lock>
 80059fa:	f8d8 3000 	ldr.w	r3, [r8]
 80059fe:	461c      	mov	r4, r3
 8005a00:	bb44      	cbnz	r4, 8005a54 <_malloc_r+0x88>
 8005a02:	4629      	mov	r1, r5
 8005a04:	4630      	mov	r0, r6
 8005a06:	f7ff ffbf 	bl	8005988 <sbrk_aligned>
 8005a0a:	1c43      	adds	r3, r0, #1
 8005a0c:	4604      	mov	r4, r0
 8005a0e:	d158      	bne.n	8005ac2 <_malloc_r+0xf6>
 8005a10:	f8d8 4000 	ldr.w	r4, [r8]
 8005a14:	4627      	mov	r7, r4
 8005a16:	2f00      	cmp	r7, #0
 8005a18:	d143      	bne.n	8005aa2 <_malloc_r+0xd6>
 8005a1a:	2c00      	cmp	r4, #0
 8005a1c:	d04b      	beq.n	8005ab6 <_malloc_r+0xea>
 8005a1e:	6823      	ldr	r3, [r4, #0]
 8005a20:	4639      	mov	r1, r7
 8005a22:	4630      	mov	r0, r6
 8005a24:	eb04 0903 	add.w	r9, r4, r3
 8005a28:	f000 fc58 	bl	80062dc <_sbrk_r>
 8005a2c:	4581      	cmp	r9, r0
 8005a2e:	d142      	bne.n	8005ab6 <_malloc_r+0xea>
 8005a30:	6821      	ldr	r1, [r4, #0]
 8005a32:	4630      	mov	r0, r6
 8005a34:	1a6d      	subs	r5, r5, r1
 8005a36:	4629      	mov	r1, r5
 8005a38:	f7ff ffa6 	bl	8005988 <sbrk_aligned>
 8005a3c:	3001      	adds	r0, #1
 8005a3e:	d03a      	beq.n	8005ab6 <_malloc_r+0xea>
 8005a40:	6823      	ldr	r3, [r4, #0]
 8005a42:	442b      	add	r3, r5
 8005a44:	6023      	str	r3, [r4, #0]
 8005a46:	f8d8 3000 	ldr.w	r3, [r8]
 8005a4a:	685a      	ldr	r2, [r3, #4]
 8005a4c:	bb62      	cbnz	r2, 8005aa8 <_malloc_r+0xdc>
 8005a4e:	f8c8 7000 	str.w	r7, [r8]
 8005a52:	e00f      	b.n	8005a74 <_malloc_r+0xa8>
 8005a54:	6822      	ldr	r2, [r4, #0]
 8005a56:	1b52      	subs	r2, r2, r5
 8005a58:	d420      	bmi.n	8005a9c <_malloc_r+0xd0>
 8005a5a:	2a0b      	cmp	r2, #11
 8005a5c:	d917      	bls.n	8005a8e <_malloc_r+0xc2>
 8005a5e:	1961      	adds	r1, r4, r5
 8005a60:	42a3      	cmp	r3, r4
 8005a62:	6025      	str	r5, [r4, #0]
 8005a64:	bf18      	it	ne
 8005a66:	6059      	strne	r1, [r3, #4]
 8005a68:	6863      	ldr	r3, [r4, #4]
 8005a6a:	bf08      	it	eq
 8005a6c:	f8c8 1000 	streq.w	r1, [r8]
 8005a70:	5162      	str	r2, [r4, r5]
 8005a72:	604b      	str	r3, [r1, #4]
 8005a74:	4630      	mov	r0, r6
 8005a76:	f000 f82f 	bl	8005ad8 <__malloc_unlock>
 8005a7a:	f104 000b 	add.w	r0, r4, #11
 8005a7e:	1d23      	adds	r3, r4, #4
 8005a80:	f020 0007 	bic.w	r0, r0, #7
 8005a84:	1ac2      	subs	r2, r0, r3
 8005a86:	bf1c      	itt	ne
 8005a88:	1a1b      	subne	r3, r3, r0
 8005a8a:	50a3      	strne	r3, [r4, r2]
 8005a8c:	e7af      	b.n	80059ee <_malloc_r+0x22>
 8005a8e:	6862      	ldr	r2, [r4, #4]
 8005a90:	42a3      	cmp	r3, r4
 8005a92:	bf0c      	ite	eq
 8005a94:	f8c8 2000 	streq.w	r2, [r8]
 8005a98:	605a      	strne	r2, [r3, #4]
 8005a9a:	e7eb      	b.n	8005a74 <_malloc_r+0xa8>
 8005a9c:	4623      	mov	r3, r4
 8005a9e:	6864      	ldr	r4, [r4, #4]
 8005aa0:	e7ae      	b.n	8005a00 <_malloc_r+0x34>
 8005aa2:	463c      	mov	r4, r7
 8005aa4:	687f      	ldr	r7, [r7, #4]
 8005aa6:	e7b6      	b.n	8005a16 <_malloc_r+0x4a>
 8005aa8:	461a      	mov	r2, r3
 8005aaa:	685b      	ldr	r3, [r3, #4]
 8005aac:	42a3      	cmp	r3, r4
 8005aae:	d1fb      	bne.n	8005aa8 <_malloc_r+0xdc>
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	6053      	str	r3, [r2, #4]
 8005ab4:	e7de      	b.n	8005a74 <_malloc_r+0xa8>
 8005ab6:	230c      	movs	r3, #12
 8005ab8:	4630      	mov	r0, r6
 8005aba:	6033      	str	r3, [r6, #0]
 8005abc:	f000 f80c 	bl	8005ad8 <__malloc_unlock>
 8005ac0:	e794      	b.n	80059ec <_malloc_r+0x20>
 8005ac2:	6005      	str	r5, [r0, #0]
 8005ac4:	e7d6      	b.n	8005a74 <_malloc_r+0xa8>
 8005ac6:	bf00      	nop
 8005ac8:	20000300 	.word	0x20000300

08005acc <__malloc_lock>:
 8005acc:	4801      	ldr	r0, [pc, #4]	@ (8005ad4 <__malloc_lock+0x8>)
 8005ace:	f7ff bf10 	b.w	80058f2 <__retarget_lock_acquire_recursive>
 8005ad2:	bf00      	nop
 8005ad4:	200002f8 	.word	0x200002f8

08005ad8 <__malloc_unlock>:
 8005ad8:	4801      	ldr	r0, [pc, #4]	@ (8005ae0 <__malloc_unlock+0x8>)
 8005ada:	f7ff bf0b 	b.w	80058f4 <__retarget_lock_release_recursive>
 8005ade:	bf00      	nop
 8005ae0:	200002f8 	.word	0x200002f8

08005ae4 <__sfputc_r>:
 8005ae4:	6893      	ldr	r3, [r2, #8]
 8005ae6:	b410      	push	{r4}
 8005ae8:	3b01      	subs	r3, #1
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	6093      	str	r3, [r2, #8]
 8005aee:	da07      	bge.n	8005b00 <__sfputc_r+0x1c>
 8005af0:	6994      	ldr	r4, [r2, #24]
 8005af2:	42a3      	cmp	r3, r4
 8005af4:	db01      	blt.n	8005afa <__sfputc_r+0x16>
 8005af6:	290a      	cmp	r1, #10
 8005af8:	d102      	bne.n	8005b00 <__sfputc_r+0x1c>
 8005afa:	bc10      	pop	{r4}
 8005afc:	f7ff bdeb 	b.w	80056d6 <__swbuf_r>
 8005b00:	6813      	ldr	r3, [r2, #0]
 8005b02:	1c58      	adds	r0, r3, #1
 8005b04:	6010      	str	r0, [r2, #0]
 8005b06:	7019      	strb	r1, [r3, #0]
 8005b08:	4608      	mov	r0, r1
 8005b0a:	bc10      	pop	{r4}
 8005b0c:	4770      	bx	lr

08005b0e <__sfputs_r>:
 8005b0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b10:	4606      	mov	r6, r0
 8005b12:	460f      	mov	r7, r1
 8005b14:	4614      	mov	r4, r2
 8005b16:	18d5      	adds	r5, r2, r3
 8005b18:	42ac      	cmp	r4, r5
 8005b1a:	d101      	bne.n	8005b20 <__sfputs_r+0x12>
 8005b1c:	2000      	movs	r0, #0
 8005b1e:	e007      	b.n	8005b30 <__sfputs_r+0x22>
 8005b20:	463a      	mov	r2, r7
 8005b22:	4630      	mov	r0, r6
 8005b24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b28:	f7ff ffdc 	bl	8005ae4 <__sfputc_r>
 8005b2c:	1c43      	adds	r3, r0, #1
 8005b2e:	d1f3      	bne.n	8005b18 <__sfputs_r+0xa>
 8005b30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005b34 <_vfiprintf_r>:
 8005b34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b38:	460d      	mov	r5, r1
 8005b3a:	4614      	mov	r4, r2
 8005b3c:	4698      	mov	r8, r3
 8005b3e:	4606      	mov	r6, r0
 8005b40:	b09d      	sub	sp, #116	@ 0x74
 8005b42:	b118      	cbz	r0, 8005b4c <_vfiprintf_r+0x18>
 8005b44:	6a03      	ldr	r3, [r0, #32]
 8005b46:	b90b      	cbnz	r3, 8005b4c <_vfiprintf_r+0x18>
 8005b48:	f7ff fcdc 	bl	8005504 <__sinit>
 8005b4c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005b4e:	07d9      	lsls	r1, r3, #31
 8005b50:	d405      	bmi.n	8005b5e <_vfiprintf_r+0x2a>
 8005b52:	89ab      	ldrh	r3, [r5, #12]
 8005b54:	059a      	lsls	r2, r3, #22
 8005b56:	d402      	bmi.n	8005b5e <_vfiprintf_r+0x2a>
 8005b58:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005b5a:	f7ff feca 	bl	80058f2 <__retarget_lock_acquire_recursive>
 8005b5e:	89ab      	ldrh	r3, [r5, #12]
 8005b60:	071b      	lsls	r3, r3, #28
 8005b62:	d501      	bpl.n	8005b68 <_vfiprintf_r+0x34>
 8005b64:	692b      	ldr	r3, [r5, #16]
 8005b66:	b99b      	cbnz	r3, 8005b90 <_vfiprintf_r+0x5c>
 8005b68:	4629      	mov	r1, r5
 8005b6a:	4630      	mov	r0, r6
 8005b6c:	f7ff fdf2 	bl	8005754 <__swsetup_r>
 8005b70:	b170      	cbz	r0, 8005b90 <_vfiprintf_r+0x5c>
 8005b72:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005b74:	07dc      	lsls	r4, r3, #31
 8005b76:	d504      	bpl.n	8005b82 <_vfiprintf_r+0x4e>
 8005b78:	f04f 30ff 	mov.w	r0, #4294967295
 8005b7c:	b01d      	add	sp, #116	@ 0x74
 8005b7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b82:	89ab      	ldrh	r3, [r5, #12]
 8005b84:	0598      	lsls	r0, r3, #22
 8005b86:	d4f7      	bmi.n	8005b78 <_vfiprintf_r+0x44>
 8005b88:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005b8a:	f7ff feb3 	bl	80058f4 <__retarget_lock_release_recursive>
 8005b8e:	e7f3      	b.n	8005b78 <_vfiprintf_r+0x44>
 8005b90:	2300      	movs	r3, #0
 8005b92:	9309      	str	r3, [sp, #36]	@ 0x24
 8005b94:	2320      	movs	r3, #32
 8005b96:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005b9a:	2330      	movs	r3, #48	@ 0x30
 8005b9c:	f04f 0901 	mov.w	r9, #1
 8005ba0:	f8cd 800c 	str.w	r8, [sp, #12]
 8005ba4:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8005d50 <_vfiprintf_r+0x21c>
 8005ba8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005bac:	4623      	mov	r3, r4
 8005bae:	469a      	mov	sl, r3
 8005bb0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005bb4:	b10a      	cbz	r2, 8005bba <_vfiprintf_r+0x86>
 8005bb6:	2a25      	cmp	r2, #37	@ 0x25
 8005bb8:	d1f9      	bne.n	8005bae <_vfiprintf_r+0x7a>
 8005bba:	ebba 0b04 	subs.w	fp, sl, r4
 8005bbe:	d00b      	beq.n	8005bd8 <_vfiprintf_r+0xa4>
 8005bc0:	465b      	mov	r3, fp
 8005bc2:	4622      	mov	r2, r4
 8005bc4:	4629      	mov	r1, r5
 8005bc6:	4630      	mov	r0, r6
 8005bc8:	f7ff ffa1 	bl	8005b0e <__sfputs_r>
 8005bcc:	3001      	adds	r0, #1
 8005bce:	f000 80a7 	beq.w	8005d20 <_vfiprintf_r+0x1ec>
 8005bd2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005bd4:	445a      	add	r2, fp
 8005bd6:	9209      	str	r2, [sp, #36]	@ 0x24
 8005bd8:	f89a 3000 	ldrb.w	r3, [sl]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	f000 809f 	beq.w	8005d20 <_vfiprintf_r+0x1ec>
 8005be2:	2300      	movs	r3, #0
 8005be4:	f04f 32ff 	mov.w	r2, #4294967295
 8005be8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005bec:	f10a 0a01 	add.w	sl, sl, #1
 8005bf0:	9304      	str	r3, [sp, #16]
 8005bf2:	9307      	str	r3, [sp, #28]
 8005bf4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005bf8:	931a      	str	r3, [sp, #104]	@ 0x68
 8005bfa:	4654      	mov	r4, sl
 8005bfc:	2205      	movs	r2, #5
 8005bfe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c02:	4853      	ldr	r0, [pc, #332]	@ (8005d50 <_vfiprintf_r+0x21c>)
 8005c04:	f000 fb7a 	bl	80062fc <memchr>
 8005c08:	9a04      	ldr	r2, [sp, #16]
 8005c0a:	b9d8      	cbnz	r0, 8005c44 <_vfiprintf_r+0x110>
 8005c0c:	06d1      	lsls	r1, r2, #27
 8005c0e:	bf44      	itt	mi
 8005c10:	2320      	movmi	r3, #32
 8005c12:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005c16:	0713      	lsls	r3, r2, #28
 8005c18:	bf44      	itt	mi
 8005c1a:	232b      	movmi	r3, #43	@ 0x2b
 8005c1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005c20:	f89a 3000 	ldrb.w	r3, [sl]
 8005c24:	2b2a      	cmp	r3, #42	@ 0x2a
 8005c26:	d015      	beq.n	8005c54 <_vfiprintf_r+0x120>
 8005c28:	4654      	mov	r4, sl
 8005c2a:	2000      	movs	r0, #0
 8005c2c:	f04f 0c0a 	mov.w	ip, #10
 8005c30:	9a07      	ldr	r2, [sp, #28]
 8005c32:	4621      	mov	r1, r4
 8005c34:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005c38:	3b30      	subs	r3, #48	@ 0x30
 8005c3a:	2b09      	cmp	r3, #9
 8005c3c:	d94b      	bls.n	8005cd6 <_vfiprintf_r+0x1a2>
 8005c3e:	b1b0      	cbz	r0, 8005c6e <_vfiprintf_r+0x13a>
 8005c40:	9207      	str	r2, [sp, #28]
 8005c42:	e014      	b.n	8005c6e <_vfiprintf_r+0x13a>
 8005c44:	eba0 0308 	sub.w	r3, r0, r8
 8005c48:	fa09 f303 	lsl.w	r3, r9, r3
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	46a2      	mov	sl, r4
 8005c50:	9304      	str	r3, [sp, #16]
 8005c52:	e7d2      	b.n	8005bfa <_vfiprintf_r+0xc6>
 8005c54:	9b03      	ldr	r3, [sp, #12]
 8005c56:	1d19      	adds	r1, r3, #4
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	9103      	str	r1, [sp, #12]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	bfbb      	ittet	lt
 8005c60:	425b      	neglt	r3, r3
 8005c62:	f042 0202 	orrlt.w	r2, r2, #2
 8005c66:	9307      	strge	r3, [sp, #28]
 8005c68:	9307      	strlt	r3, [sp, #28]
 8005c6a:	bfb8      	it	lt
 8005c6c:	9204      	strlt	r2, [sp, #16]
 8005c6e:	7823      	ldrb	r3, [r4, #0]
 8005c70:	2b2e      	cmp	r3, #46	@ 0x2e
 8005c72:	d10a      	bne.n	8005c8a <_vfiprintf_r+0x156>
 8005c74:	7863      	ldrb	r3, [r4, #1]
 8005c76:	2b2a      	cmp	r3, #42	@ 0x2a
 8005c78:	d132      	bne.n	8005ce0 <_vfiprintf_r+0x1ac>
 8005c7a:	9b03      	ldr	r3, [sp, #12]
 8005c7c:	3402      	adds	r4, #2
 8005c7e:	1d1a      	adds	r2, r3, #4
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	9203      	str	r2, [sp, #12]
 8005c84:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005c88:	9305      	str	r3, [sp, #20]
 8005c8a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8005d54 <_vfiprintf_r+0x220>
 8005c8e:	2203      	movs	r2, #3
 8005c90:	4650      	mov	r0, sl
 8005c92:	7821      	ldrb	r1, [r4, #0]
 8005c94:	f000 fb32 	bl	80062fc <memchr>
 8005c98:	b138      	cbz	r0, 8005caa <_vfiprintf_r+0x176>
 8005c9a:	2240      	movs	r2, #64	@ 0x40
 8005c9c:	9b04      	ldr	r3, [sp, #16]
 8005c9e:	eba0 000a 	sub.w	r0, r0, sl
 8005ca2:	4082      	lsls	r2, r0
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	3401      	adds	r4, #1
 8005ca8:	9304      	str	r3, [sp, #16]
 8005caa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005cae:	2206      	movs	r2, #6
 8005cb0:	4829      	ldr	r0, [pc, #164]	@ (8005d58 <_vfiprintf_r+0x224>)
 8005cb2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005cb6:	f000 fb21 	bl	80062fc <memchr>
 8005cba:	2800      	cmp	r0, #0
 8005cbc:	d03f      	beq.n	8005d3e <_vfiprintf_r+0x20a>
 8005cbe:	4b27      	ldr	r3, [pc, #156]	@ (8005d5c <_vfiprintf_r+0x228>)
 8005cc0:	bb1b      	cbnz	r3, 8005d0a <_vfiprintf_r+0x1d6>
 8005cc2:	9b03      	ldr	r3, [sp, #12]
 8005cc4:	3307      	adds	r3, #7
 8005cc6:	f023 0307 	bic.w	r3, r3, #7
 8005cca:	3308      	adds	r3, #8
 8005ccc:	9303      	str	r3, [sp, #12]
 8005cce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005cd0:	443b      	add	r3, r7
 8005cd2:	9309      	str	r3, [sp, #36]	@ 0x24
 8005cd4:	e76a      	b.n	8005bac <_vfiprintf_r+0x78>
 8005cd6:	460c      	mov	r4, r1
 8005cd8:	2001      	movs	r0, #1
 8005cda:	fb0c 3202 	mla	r2, ip, r2, r3
 8005cde:	e7a8      	b.n	8005c32 <_vfiprintf_r+0xfe>
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	f04f 0c0a 	mov.w	ip, #10
 8005ce6:	4619      	mov	r1, r3
 8005ce8:	3401      	adds	r4, #1
 8005cea:	9305      	str	r3, [sp, #20]
 8005cec:	4620      	mov	r0, r4
 8005cee:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005cf2:	3a30      	subs	r2, #48	@ 0x30
 8005cf4:	2a09      	cmp	r2, #9
 8005cf6:	d903      	bls.n	8005d00 <_vfiprintf_r+0x1cc>
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d0c6      	beq.n	8005c8a <_vfiprintf_r+0x156>
 8005cfc:	9105      	str	r1, [sp, #20]
 8005cfe:	e7c4      	b.n	8005c8a <_vfiprintf_r+0x156>
 8005d00:	4604      	mov	r4, r0
 8005d02:	2301      	movs	r3, #1
 8005d04:	fb0c 2101 	mla	r1, ip, r1, r2
 8005d08:	e7f0      	b.n	8005cec <_vfiprintf_r+0x1b8>
 8005d0a:	ab03      	add	r3, sp, #12
 8005d0c:	9300      	str	r3, [sp, #0]
 8005d0e:	462a      	mov	r2, r5
 8005d10:	4630      	mov	r0, r6
 8005d12:	4b13      	ldr	r3, [pc, #76]	@ (8005d60 <_vfiprintf_r+0x22c>)
 8005d14:	a904      	add	r1, sp, #16
 8005d16:	f3af 8000 	nop.w
 8005d1a:	4607      	mov	r7, r0
 8005d1c:	1c78      	adds	r0, r7, #1
 8005d1e:	d1d6      	bne.n	8005cce <_vfiprintf_r+0x19a>
 8005d20:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005d22:	07d9      	lsls	r1, r3, #31
 8005d24:	d405      	bmi.n	8005d32 <_vfiprintf_r+0x1fe>
 8005d26:	89ab      	ldrh	r3, [r5, #12]
 8005d28:	059a      	lsls	r2, r3, #22
 8005d2a:	d402      	bmi.n	8005d32 <_vfiprintf_r+0x1fe>
 8005d2c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005d2e:	f7ff fde1 	bl	80058f4 <__retarget_lock_release_recursive>
 8005d32:	89ab      	ldrh	r3, [r5, #12]
 8005d34:	065b      	lsls	r3, r3, #25
 8005d36:	f53f af1f 	bmi.w	8005b78 <_vfiprintf_r+0x44>
 8005d3a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005d3c:	e71e      	b.n	8005b7c <_vfiprintf_r+0x48>
 8005d3e:	ab03      	add	r3, sp, #12
 8005d40:	9300      	str	r3, [sp, #0]
 8005d42:	462a      	mov	r2, r5
 8005d44:	4630      	mov	r0, r6
 8005d46:	4b06      	ldr	r3, [pc, #24]	@ (8005d60 <_vfiprintf_r+0x22c>)
 8005d48:	a904      	add	r1, sp, #16
 8005d4a:	f000 f87d 	bl	8005e48 <_printf_i>
 8005d4e:	e7e4      	b.n	8005d1a <_vfiprintf_r+0x1e6>
 8005d50:	0800640a 	.word	0x0800640a
 8005d54:	08006410 	.word	0x08006410
 8005d58:	08006414 	.word	0x08006414
 8005d5c:	00000000 	.word	0x00000000
 8005d60:	08005b0f 	.word	0x08005b0f

08005d64 <_printf_common>:
 8005d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d68:	4616      	mov	r6, r2
 8005d6a:	4698      	mov	r8, r3
 8005d6c:	688a      	ldr	r2, [r1, #8]
 8005d6e:	690b      	ldr	r3, [r1, #16]
 8005d70:	4607      	mov	r7, r0
 8005d72:	4293      	cmp	r3, r2
 8005d74:	bfb8      	it	lt
 8005d76:	4613      	movlt	r3, r2
 8005d78:	6033      	str	r3, [r6, #0]
 8005d7a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005d7e:	460c      	mov	r4, r1
 8005d80:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005d84:	b10a      	cbz	r2, 8005d8a <_printf_common+0x26>
 8005d86:	3301      	adds	r3, #1
 8005d88:	6033      	str	r3, [r6, #0]
 8005d8a:	6823      	ldr	r3, [r4, #0]
 8005d8c:	0699      	lsls	r1, r3, #26
 8005d8e:	bf42      	ittt	mi
 8005d90:	6833      	ldrmi	r3, [r6, #0]
 8005d92:	3302      	addmi	r3, #2
 8005d94:	6033      	strmi	r3, [r6, #0]
 8005d96:	6825      	ldr	r5, [r4, #0]
 8005d98:	f015 0506 	ands.w	r5, r5, #6
 8005d9c:	d106      	bne.n	8005dac <_printf_common+0x48>
 8005d9e:	f104 0a19 	add.w	sl, r4, #25
 8005da2:	68e3      	ldr	r3, [r4, #12]
 8005da4:	6832      	ldr	r2, [r6, #0]
 8005da6:	1a9b      	subs	r3, r3, r2
 8005da8:	42ab      	cmp	r3, r5
 8005daa:	dc2b      	bgt.n	8005e04 <_printf_common+0xa0>
 8005dac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005db0:	6822      	ldr	r2, [r4, #0]
 8005db2:	3b00      	subs	r3, #0
 8005db4:	bf18      	it	ne
 8005db6:	2301      	movne	r3, #1
 8005db8:	0692      	lsls	r2, r2, #26
 8005dba:	d430      	bmi.n	8005e1e <_printf_common+0xba>
 8005dbc:	4641      	mov	r1, r8
 8005dbe:	4638      	mov	r0, r7
 8005dc0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005dc4:	47c8      	blx	r9
 8005dc6:	3001      	adds	r0, #1
 8005dc8:	d023      	beq.n	8005e12 <_printf_common+0xae>
 8005dca:	6823      	ldr	r3, [r4, #0]
 8005dcc:	6922      	ldr	r2, [r4, #16]
 8005dce:	f003 0306 	and.w	r3, r3, #6
 8005dd2:	2b04      	cmp	r3, #4
 8005dd4:	bf14      	ite	ne
 8005dd6:	2500      	movne	r5, #0
 8005dd8:	6833      	ldreq	r3, [r6, #0]
 8005dda:	f04f 0600 	mov.w	r6, #0
 8005dde:	bf08      	it	eq
 8005de0:	68e5      	ldreq	r5, [r4, #12]
 8005de2:	f104 041a 	add.w	r4, r4, #26
 8005de6:	bf08      	it	eq
 8005de8:	1aed      	subeq	r5, r5, r3
 8005dea:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005dee:	bf08      	it	eq
 8005df0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005df4:	4293      	cmp	r3, r2
 8005df6:	bfc4      	itt	gt
 8005df8:	1a9b      	subgt	r3, r3, r2
 8005dfa:	18ed      	addgt	r5, r5, r3
 8005dfc:	42b5      	cmp	r5, r6
 8005dfe:	d11a      	bne.n	8005e36 <_printf_common+0xd2>
 8005e00:	2000      	movs	r0, #0
 8005e02:	e008      	b.n	8005e16 <_printf_common+0xb2>
 8005e04:	2301      	movs	r3, #1
 8005e06:	4652      	mov	r2, sl
 8005e08:	4641      	mov	r1, r8
 8005e0a:	4638      	mov	r0, r7
 8005e0c:	47c8      	blx	r9
 8005e0e:	3001      	adds	r0, #1
 8005e10:	d103      	bne.n	8005e1a <_printf_common+0xb6>
 8005e12:	f04f 30ff 	mov.w	r0, #4294967295
 8005e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e1a:	3501      	adds	r5, #1
 8005e1c:	e7c1      	b.n	8005da2 <_printf_common+0x3e>
 8005e1e:	2030      	movs	r0, #48	@ 0x30
 8005e20:	18e1      	adds	r1, r4, r3
 8005e22:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005e26:	1c5a      	adds	r2, r3, #1
 8005e28:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005e2c:	4422      	add	r2, r4
 8005e2e:	3302      	adds	r3, #2
 8005e30:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005e34:	e7c2      	b.n	8005dbc <_printf_common+0x58>
 8005e36:	2301      	movs	r3, #1
 8005e38:	4622      	mov	r2, r4
 8005e3a:	4641      	mov	r1, r8
 8005e3c:	4638      	mov	r0, r7
 8005e3e:	47c8      	blx	r9
 8005e40:	3001      	adds	r0, #1
 8005e42:	d0e6      	beq.n	8005e12 <_printf_common+0xae>
 8005e44:	3601      	adds	r6, #1
 8005e46:	e7d9      	b.n	8005dfc <_printf_common+0x98>

08005e48 <_printf_i>:
 8005e48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005e4c:	7e0f      	ldrb	r7, [r1, #24]
 8005e4e:	4691      	mov	r9, r2
 8005e50:	2f78      	cmp	r7, #120	@ 0x78
 8005e52:	4680      	mov	r8, r0
 8005e54:	460c      	mov	r4, r1
 8005e56:	469a      	mov	sl, r3
 8005e58:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005e5a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005e5e:	d807      	bhi.n	8005e70 <_printf_i+0x28>
 8005e60:	2f62      	cmp	r7, #98	@ 0x62
 8005e62:	d80a      	bhi.n	8005e7a <_printf_i+0x32>
 8005e64:	2f00      	cmp	r7, #0
 8005e66:	f000 80d1 	beq.w	800600c <_printf_i+0x1c4>
 8005e6a:	2f58      	cmp	r7, #88	@ 0x58
 8005e6c:	f000 80b8 	beq.w	8005fe0 <_printf_i+0x198>
 8005e70:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005e74:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005e78:	e03a      	b.n	8005ef0 <_printf_i+0xa8>
 8005e7a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005e7e:	2b15      	cmp	r3, #21
 8005e80:	d8f6      	bhi.n	8005e70 <_printf_i+0x28>
 8005e82:	a101      	add	r1, pc, #4	@ (adr r1, 8005e88 <_printf_i+0x40>)
 8005e84:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005e88:	08005ee1 	.word	0x08005ee1
 8005e8c:	08005ef5 	.word	0x08005ef5
 8005e90:	08005e71 	.word	0x08005e71
 8005e94:	08005e71 	.word	0x08005e71
 8005e98:	08005e71 	.word	0x08005e71
 8005e9c:	08005e71 	.word	0x08005e71
 8005ea0:	08005ef5 	.word	0x08005ef5
 8005ea4:	08005e71 	.word	0x08005e71
 8005ea8:	08005e71 	.word	0x08005e71
 8005eac:	08005e71 	.word	0x08005e71
 8005eb0:	08005e71 	.word	0x08005e71
 8005eb4:	08005ff3 	.word	0x08005ff3
 8005eb8:	08005f1f 	.word	0x08005f1f
 8005ebc:	08005fad 	.word	0x08005fad
 8005ec0:	08005e71 	.word	0x08005e71
 8005ec4:	08005e71 	.word	0x08005e71
 8005ec8:	08006015 	.word	0x08006015
 8005ecc:	08005e71 	.word	0x08005e71
 8005ed0:	08005f1f 	.word	0x08005f1f
 8005ed4:	08005e71 	.word	0x08005e71
 8005ed8:	08005e71 	.word	0x08005e71
 8005edc:	08005fb5 	.word	0x08005fb5
 8005ee0:	6833      	ldr	r3, [r6, #0]
 8005ee2:	1d1a      	adds	r2, r3, #4
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	6032      	str	r2, [r6, #0]
 8005ee8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005eec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	e09c      	b.n	800602e <_printf_i+0x1e6>
 8005ef4:	6833      	ldr	r3, [r6, #0]
 8005ef6:	6820      	ldr	r0, [r4, #0]
 8005ef8:	1d19      	adds	r1, r3, #4
 8005efa:	6031      	str	r1, [r6, #0]
 8005efc:	0606      	lsls	r6, r0, #24
 8005efe:	d501      	bpl.n	8005f04 <_printf_i+0xbc>
 8005f00:	681d      	ldr	r5, [r3, #0]
 8005f02:	e003      	b.n	8005f0c <_printf_i+0xc4>
 8005f04:	0645      	lsls	r5, r0, #25
 8005f06:	d5fb      	bpl.n	8005f00 <_printf_i+0xb8>
 8005f08:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005f0c:	2d00      	cmp	r5, #0
 8005f0e:	da03      	bge.n	8005f18 <_printf_i+0xd0>
 8005f10:	232d      	movs	r3, #45	@ 0x2d
 8005f12:	426d      	negs	r5, r5
 8005f14:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005f18:	230a      	movs	r3, #10
 8005f1a:	4858      	ldr	r0, [pc, #352]	@ (800607c <_printf_i+0x234>)
 8005f1c:	e011      	b.n	8005f42 <_printf_i+0xfa>
 8005f1e:	6821      	ldr	r1, [r4, #0]
 8005f20:	6833      	ldr	r3, [r6, #0]
 8005f22:	0608      	lsls	r0, r1, #24
 8005f24:	f853 5b04 	ldr.w	r5, [r3], #4
 8005f28:	d402      	bmi.n	8005f30 <_printf_i+0xe8>
 8005f2a:	0649      	lsls	r1, r1, #25
 8005f2c:	bf48      	it	mi
 8005f2e:	b2ad      	uxthmi	r5, r5
 8005f30:	2f6f      	cmp	r7, #111	@ 0x6f
 8005f32:	6033      	str	r3, [r6, #0]
 8005f34:	bf14      	ite	ne
 8005f36:	230a      	movne	r3, #10
 8005f38:	2308      	moveq	r3, #8
 8005f3a:	4850      	ldr	r0, [pc, #320]	@ (800607c <_printf_i+0x234>)
 8005f3c:	2100      	movs	r1, #0
 8005f3e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005f42:	6866      	ldr	r6, [r4, #4]
 8005f44:	2e00      	cmp	r6, #0
 8005f46:	60a6      	str	r6, [r4, #8]
 8005f48:	db05      	blt.n	8005f56 <_printf_i+0x10e>
 8005f4a:	6821      	ldr	r1, [r4, #0]
 8005f4c:	432e      	orrs	r6, r5
 8005f4e:	f021 0104 	bic.w	r1, r1, #4
 8005f52:	6021      	str	r1, [r4, #0]
 8005f54:	d04b      	beq.n	8005fee <_printf_i+0x1a6>
 8005f56:	4616      	mov	r6, r2
 8005f58:	fbb5 f1f3 	udiv	r1, r5, r3
 8005f5c:	fb03 5711 	mls	r7, r3, r1, r5
 8005f60:	5dc7      	ldrb	r7, [r0, r7]
 8005f62:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005f66:	462f      	mov	r7, r5
 8005f68:	42bb      	cmp	r3, r7
 8005f6a:	460d      	mov	r5, r1
 8005f6c:	d9f4      	bls.n	8005f58 <_printf_i+0x110>
 8005f6e:	2b08      	cmp	r3, #8
 8005f70:	d10b      	bne.n	8005f8a <_printf_i+0x142>
 8005f72:	6823      	ldr	r3, [r4, #0]
 8005f74:	07df      	lsls	r7, r3, #31
 8005f76:	d508      	bpl.n	8005f8a <_printf_i+0x142>
 8005f78:	6923      	ldr	r3, [r4, #16]
 8005f7a:	6861      	ldr	r1, [r4, #4]
 8005f7c:	4299      	cmp	r1, r3
 8005f7e:	bfde      	ittt	le
 8005f80:	2330      	movle	r3, #48	@ 0x30
 8005f82:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005f86:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005f8a:	1b92      	subs	r2, r2, r6
 8005f8c:	6122      	str	r2, [r4, #16]
 8005f8e:	464b      	mov	r3, r9
 8005f90:	4621      	mov	r1, r4
 8005f92:	4640      	mov	r0, r8
 8005f94:	f8cd a000 	str.w	sl, [sp]
 8005f98:	aa03      	add	r2, sp, #12
 8005f9a:	f7ff fee3 	bl	8005d64 <_printf_common>
 8005f9e:	3001      	adds	r0, #1
 8005fa0:	d14a      	bne.n	8006038 <_printf_i+0x1f0>
 8005fa2:	f04f 30ff 	mov.w	r0, #4294967295
 8005fa6:	b004      	add	sp, #16
 8005fa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fac:	6823      	ldr	r3, [r4, #0]
 8005fae:	f043 0320 	orr.w	r3, r3, #32
 8005fb2:	6023      	str	r3, [r4, #0]
 8005fb4:	2778      	movs	r7, #120	@ 0x78
 8005fb6:	4832      	ldr	r0, [pc, #200]	@ (8006080 <_printf_i+0x238>)
 8005fb8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005fbc:	6823      	ldr	r3, [r4, #0]
 8005fbe:	6831      	ldr	r1, [r6, #0]
 8005fc0:	061f      	lsls	r7, r3, #24
 8005fc2:	f851 5b04 	ldr.w	r5, [r1], #4
 8005fc6:	d402      	bmi.n	8005fce <_printf_i+0x186>
 8005fc8:	065f      	lsls	r7, r3, #25
 8005fca:	bf48      	it	mi
 8005fcc:	b2ad      	uxthmi	r5, r5
 8005fce:	6031      	str	r1, [r6, #0]
 8005fd0:	07d9      	lsls	r1, r3, #31
 8005fd2:	bf44      	itt	mi
 8005fd4:	f043 0320 	orrmi.w	r3, r3, #32
 8005fd8:	6023      	strmi	r3, [r4, #0]
 8005fda:	b11d      	cbz	r5, 8005fe4 <_printf_i+0x19c>
 8005fdc:	2310      	movs	r3, #16
 8005fde:	e7ad      	b.n	8005f3c <_printf_i+0xf4>
 8005fe0:	4826      	ldr	r0, [pc, #152]	@ (800607c <_printf_i+0x234>)
 8005fe2:	e7e9      	b.n	8005fb8 <_printf_i+0x170>
 8005fe4:	6823      	ldr	r3, [r4, #0]
 8005fe6:	f023 0320 	bic.w	r3, r3, #32
 8005fea:	6023      	str	r3, [r4, #0]
 8005fec:	e7f6      	b.n	8005fdc <_printf_i+0x194>
 8005fee:	4616      	mov	r6, r2
 8005ff0:	e7bd      	b.n	8005f6e <_printf_i+0x126>
 8005ff2:	6833      	ldr	r3, [r6, #0]
 8005ff4:	6825      	ldr	r5, [r4, #0]
 8005ff6:	1d18      	adds	r0, r3, #4
 8005ff8:	6961      	ldr	r1, [r4, #20]
 8005ffa:	6030      	str	r0, [r6, #0]
 8005ffc:	062e      	lsls	r6, r5, #24
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	d501      	bpl.n	8006006 <_printf_i+0x1be>
 8006002:	6019      	str	r1, [r3, #0]
 8006004:	e002      	b.n	800600c <_printf_i+0x1c4>
 8006006:	0668      	lsls	r0, r5, #25
 8006008:	d5fb      	bpl.n	8006002 <_printf_i+0x1ba>
 800600a:	8019      	strh	r1, [r3, #0]
 800600c:	2300      	movs	r3, #0
 800600e:	4616      	mov	r6, r2
 8006010:	6123      	str	r3, [r4, #16]
 8006012:	e7bc      	b.n	8005f8e <_printf_i+0x146>
 8006014:	6833      	ldr	r3, [r6, #0]
 8006016:	2100      	movs	r1, #0
 8006018:	1d1a      	adds	r2, r3, #4
 800601a:	6032      	str	r2, [r6, #0]
 800601c:	681e      	ldr	r6, [r3, #0]
 800601e:	6862      	ldr	r2, [r4, #4]
 8006020:	4630      	mov	r0, r6
 8006022:	f000 f96b 	bl	80062fc <memchr>
 8006026:	b108      	cbz	r0, 800602c <_printf_i+0x1e4>
 8006028:	1b80      	subs	r0, r0, r6
 800602a:	6060      	str	r0, [r4, #4]
 800602c:	6863      	ldr	r3, [r4, #4]
 800602e:	6123      	str	r3, [r4, #16]
 8006030:	2300      	movs	r3, #0
 8006032:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006036:	e7aa      	b.n	8005f8e <_printf_i+0x146>
 8006038:	4632      	mov	r2, r6
 800603a:	4649      	mov	r1, r9
 800603c:	4640      	mov	r0, r8
 800603e:	6923      	ldr	r3, [r4, #16]
 8006040:	47d0      	blx	sl
 8006042:	3001      	adds	r0, #1
 8006044:	d0ad      	beq.n	8005fa2 <_printf_i+0x15a>
 8006046:	6823      	ldr	r3, [r4, #0]
 8006048:	079b      	lsls	r3, r3, #30
 800604a:	d413      	bmi.n	8006074 <_printf_i+0x22c>
 800604c:	68e0      	ldr	r0, [r4, #12]
 800604e:	9b03      	ldr	r3, [sp, #12]
 8006050:	4298      	cmp	r0, r3
 8006052:	bfb8      	it	lt
 8006054:	4618      	movlt	r0, r3
 8006056:	e7a6      	b.n	8005fa6 <_printf_i+0x15e>
 8006058:	2301      	movs	r3, #1
 800605a:	4632      	mov	r2, r6
 800605c:	4649      	mov	r1, r9
 800605e:	4640      	mov	r0, r8
 8006060:	47d0      	blx	sl
 8006062:	3001      	adds	r0, #1
 8006064:	d09d      	beq.n	8005fa2 <_printf_i+0x15a>
 8006066:	3501      	adds	r5, #1
 8006068:	68e3      	ldr	r3, [r4, #12]
 800606a:	9903      	ldr	r1, [sp, #12]
 800606c:	1a5b      	subs	r3, r3, r1
 800606e:	42ab      	cmp	r3, r5
 8006070:	dcf2      	bgt.n	8006058 <_printf_i+0x210>
 8006072:	e7eb      	b.n	800604c <_printf_i+0x204>
 8006074:	2500      	movs	r5, #0
 8006076:	f104 0619 	add.w	r6, r4, #25
 800607a:	e7f5      	b.n	8006068 <_printf_i+0x220>
 800607c:	0800641b 	.word	0x0800641b
 8006080:	0800642c 	.word	0x0800642c

08006084 <__sflush_r>:
 8006084:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800608a:	0716      	lsls	r6, r2, #28
 800608c:	4605      	mov	r5, r0
 800608e:	460c      	mov	r4, r1
 8006090:	d454      	bmi.n	800613c <__sflush_r+0xb8>
 8006092:	684b      	ldr	r3, [r1, #4]
 8006094:	2b00      	cmp	r3, #0
 8006096:	dc02      	bgt.n	800609e <__sflush_r+0x1a>
 8006098:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800609a:	2b00      	cmp	r3, #0
 800609c:	dd48      	ble.n	8006130 <__sflush_r+0xac>
 800609e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80060a0:	2e00      	cmp	r6, #0
 80060a2:	d045      	beq.n	8006130 <__sflush_r+0xac>
 80060a4:	2300      	movs	r3, #0
 80060a6:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80060aa:	682f      	ldr	r7, [r5, #0]
 80060ac:	6a21      	ldr	r1, [r4, #32]
 80060ae:	602b      	str	r3, [r5, #0]
 80060b0:	d030      	beq.n	8006114 <__sflush_r+0x90>
 80060b2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80060b4:	89a3      	ldrh	r3, [r4, #12]
 80060b6:	0759      	lsls	r1, r3, #29
 80060b8:	d505      	bpl.n	80060c6 <__sflush_r+0x42>
 80060ba:	6863      	ldr	r3, [r4, #4]
 80060bc:	1ad2      	subs	r2, r2, r3
 80060be:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80060c0:	b10b      	cbz	r3, 80060c6 <__sflush_r+0x42>
 80060c2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80060c4:	1ad2      	subs	r2, r2, r3
 80060c6:	2300      	movs	r3, #0
 80060c8:	4628      	mov	r0, r5
 80060ca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80060cc:	6a21      	ldr	r1, [r4, #32]
 80060ce:	47b0      	blx	r6
 80060d0:	1c43      	adds	r3, r0, #1
 80060d2:	89a3      	ldrh	r3, [r4, #12]
 80060d4:	d106      	bne.n	80060e4 <__sflush_r+0x60>
 80060d6:	6829      	ldr	r1, [r5, #0]
 80060d8:	291d      	cmp	r1, #29
 80060da:	d82b      	bhi.n	8006134 <__sflush_r+0xb0>
 80060dc:	4a28      	ldr	r2, [pc, #160]	@ (8006180 <__sflush_r+0xfc>)
 80060de:	40ca      	lsrs	r2, r1
 80060e0:	07d6      	lsls	r6, r2, #31
 80060e2:	d527      	bpl.n	8006134 <__sflush_r+0xb0>
 80060e4:	2200      	movs	r2, #0
 80060e6:	6062      	str	r2, [r4, #4]
 80060e8:	6922      	ldr	r2, [r4, #16]
 80060ea:	04d9      	lsls	r1, r3, #19
 80060ec:	6022      	str	r2, [r4, #0]
 80060ee:	d504      	bpl.n	80060fa <__sflush_r+0x76>
 80060f0:	1c42      	adds	r2, r0, #1
 80060f2:	d101      	bne.n	80060f8 <__sflush_r+0x74>
 80060f4:	682b      	ldr	r3, [r5, #0]
 80060f6:	b903      	cbnz	r3, 80060fa <__sflush_r+0x76>
 80060f8:	6560      	str	r0, [r4, #84]	@ 0x54
 80060fa:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80060fc:	602f      	str	r7, [r5, #0]
 80060fe:	b1b9      	cbz	r1, 8006130 <__sflush_r+0xac>
 8006100:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006104:	4299      	cmp	r1, r3
 8006106:	d002      	beq.n	800610e <__sflush_r+0x8a>
 8006108:	4628      	mov	r0, r5
 800610a:	f7ff fbf5 	bl	80058f8 <_free_r>
 800610e:	2300      	movs	r3, #0
 8006110:	6363      	str	r3, [r4, #52]	@ 0x34
 8006112:	e00d      	b.n	8006130 <__sflush_r+0xac>
 8006114:	2301      	movs	r3, #1
 8006116:	4628      	mov	r0, r5
 8006118:	47b0      	blx	r6
 800611a:	4602      	mov	r2, r0
 800611c:	1c50      	adds	r0, r2, #1
 800611e:	d1c9      	bne.n	80060b4 <__sflush_r+0x30>
 8006120:	682b      	ldr	r3, [r5, #0]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d0c6      	beq.n	80060b4 <__sflush_r+0x30>
 8006126:	2b1d      	cmp	r3, #29
 8006128:	d001      	beq.n	800612e <__sflush_r+0xaa>
 800612a:	2b16      	cmp	r3, #22
 800612c:	d11d      	bne.n	800616a <__sflush_r+0xe6>
 800612e:	602f      	str	r7, [r5, #0]
 8006130:	2000      	movs	r0, #0
 8006132:	e021      	b.n	8006178 <__sflush_r+0xf4>
 8006134:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006138:	b21b      	sxth	r3, r3
 800613a:	e01a      	b.n	8006172 <__sflush_r+0xee>
 800613c:	690f      	ldr	r7, [r1, #16]
 800613e:	2f00      	cmp	r7, #0
 8006140:	d0f6      	beq.n	8006130 <__sflush_r+0xac>
 8006142:	0793      	lsls	r3, r2, #30
 8006144:	bf18      	it	ne
 8006146:	2300      	movne	r3, #0
 8006148:	680e      	ldr	r6, [r1, #0]
 800614a:	bf08      	it	eq
 800614c:	694b      	ldreq	r3, [r1, #20]
 800614e:	1bf6      	subs	r6, r6, r7
 8006150:	600f      	str	r7, [r1, #0]
 8006152:	608b      	str	r3, [r1, #8]
 8006154:	2e00      	cmp	r6, #0
 8006156:	ddeb      	ble.n	8006130 <__sflush_r+0xac>
 8006158:	4633      	mov	r3, r6
 800615a:	463a      	mov	r2, r7
 800615c:	4628      	mov	r0, r5
 800615e:	6a21      	ldr	r1, [r4, #32]
 8006160:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8006164:	47e0      	blx	ip
 8006166:	2800      	cmp	r0, #0
 8006168:	dc07      	bgt.n	800617a <__sflush_r+0xf6>
 800616a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800616e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006172:	f04f 30ff 	mov.w	r0, #4294967295
 8006176:	81a3      	strh	r3, [r4, #12]
 8006178:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800617a:	4407      	add	r7, r0
 800617c:	1a36      	subs	r6, r6, r0
 800617e:	e7e9      	b.n	8006154 <__sflush_r+0xd0>
 8006180:	20400001 	.word	0x20400001

08006184 <_fflush_r>:
 8006184:	b538      	push	{r3, r4, r5, lr}
 8006186:	690b      	ldr	r3, [r1, #16]
 8006188:	4605      	mov	r5, r0
 800618a:	460c      	mov	r4, r1
 800618c:	b913      	cbnz	r3, 8006194 <_fflush_r+0x10>
 800618e:	2500      	movs	r5, #0
 8006190:	4628      	mov	r0, r5
 8006192:	bd38      	pop	{r3, r4, r5, pc}
 8006194:	b118      	cbz	r0, 800619e <_fflush_r+0x1a>
 8006196:	6a03      	ldr	r3, [r0, #32]
 8006198:	b90b      	cbnz	r3, 800619e <_fflush_r+0x1a>
 800619a:	f7ff f9b3 	bl	8005504 <__sinit>
 800619e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d0f3      	beq.n	800618e <_fflush_r+0xa>
 80061a6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80061a8:	07d0      	lsls	r0, r2, #31
 80061aa:	d404      	bmi.n	80061b6 <_fflush_r+0x32>
 80061ac:	0599      	lsls	r1, r3, #22
 80061ae:	d402      	bmi.n	80061b6 <_fflush_r+0x32>
 80061b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80061b2:	f7ff fb9e 	bl	80058f2 <__retarget_lock_acquire_recursive>
 80061b6:	4628      	mov	r0, r5
 80061b8:	4621      	mov	r1, r4
 80061ba:	f7ff ff63 	bl	8006084 <__sflush_r>
 80061be:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80061c0:	4605      	mov	r5, r0
 80061c2:	07da      	lsls	r2, r3, #31
 80061c4:	d4e4      	bmi.n	8006190 <_fflush_r+0xc>
 80061c6:	89a3      	ldrh	r3, [r4, #12]
 80061c8:	059b      	lsls	r3, r3, #22
 80061ca:	d4e1      	bmi.n	8006190 <_fflush_r+0xc>
 80061cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80061ce:	f7ff fb91 	bl	80058f4 <__retarget_lock_release_recursive>
 80061d2:	e7dd      	b.n	8006190 <_fflush_r+0xc>

080061d4 <__swhatbuf_r>:
 80061d4:	b570      	push	{r4, r5, r6, lr}
 80061d6:	460c      	mov	r4, r1
 80061d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061dc:	4615      	mov	r5, r2
 80061de:	2900      	cmp	r1, #0
 80061e0:	461e      	mov	r6, r3
 80061e2:	b096      	sub	sp, #88	@ 0x58
 80061e4:	da0c      	bge.n	8006200 <__swhatbuf_r+0x2c>
 80061e6:	89a3      	ldrh	r3, [r4, #12]
 80061e8:	2100      	movs	r1, #0
 80061ea:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80061ee:	bf14      	ite	ne
 80061f0:	2340      	movne	r3, #64	@ 0x40
 80061f2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80061f6:	2000      	movs	r0, #0
 80061f8:	6031      	str	r1, [r6, #0]
 80061fa:	602b      	str	r3, [r5, #0]
 80061fc:	b016      	add	sp, #88	@ 0x58
 80061fe:	bd70      	pop	{r4, r5, r6, pc}
 8006200:	466a      	mov	r2, sp
 8006202:	f000 f849 	bl	8006298 <_fstat_r>
 8006206:	2800      	cmp	r0, #0
 8006208:	dbed      	blt.n	80061e6 <__swhatbuf_r+0x12>
 800620a:	9901      	ldr	r1, [sp, #4]
 800620c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006210:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006214:	4259      	negs	r1, r3
 8006216:	4159      	adcs	r1, r3
 8006218:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800621c:	e7eb      	b.n	80061f6 <__swhatbuf_r+0x22>

0800621e <__smakebuf_r>:
 800621e:	898b      	ldrh	r3, [r1, #12]
 8006220:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006222:	079d      	lsls	r5, r3, #30
 8006224:	4606      	mov	r6, r0
 8006226:	460c      	mov	r4, r1
 8006228:	d507      	bpl.n	800623a <__smakebuf_r+0x1c>
 800622a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800622e:	6023      	str	r3, [r4, #0]
 8006230:	6123      	str	r3, [r4, #16]
 8006232:	2301      	movs	r3, #1
 8006234:	6163      	str	r3, [r4, #20]
 8006236:	b003      	add	sp, #12
 8006238:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800623a:	466a      	mov	r2, sp
 800623c:	ab01      	add	r3, sp, #4
 800623e:	f7ff ffc9 	bl	80061d4 <__swhatbuf_r>
 8006242:	9f00      	ldr	r7, [sp, #0]
 8006244:	4605      	mov	r5, r0
 8006246:	4639      	mov	r1, r7
 8006248:	4630      	mov	r0, r6
 800624a:	f7ff fbbf 	bl	80059cc <_malloc_r>
 800624e:	b948      	cbnz	r0, 8006264 <__smakebuf_r+0x46>
 8006250:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006254:	059a      	lsls	r2, r3, #22
 8006256:	d4ee      	bmi.n	8006236 <__smakebuf_r+0x18>
 8006258:	f023 0303 	bic.w	r3, r3, #3
 800625c:	f043 0302 	orr.w	r3, r3, #2
 8006260:	81a3      	strh	r3, [r4, #12]
 8006262:	e7e2      	b.n	800622a <__smakebuf_r+0xc>
 8006264:	89a3      	ldrh	r3, [r4, #12]
 8006266:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800626a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800626e:	81a3      	strh	r3, [r4, #12]
 8006270:	9b01      	ldr	r3, [sp, #4]
 8006272:	6020      	str	r0, [r4, #0]
 8006274:	b15b      	cbz	r3, 800628e <__smakebuf_r+0x70>
 8006276:	4630      	mov	r0, r6
 8006278:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800627c:	f000 f81e 	bl	80062bc <_isatty_r>
 8006280:	b128      	cbz	r0, 800628e <__smakebuf_r+0x70>
 8006282:	89a3      	ldrh	r3, [r4, #12]
 8006284:	f023 0303 	bic.w	r3, r3, #3
 8006288:	f043 0301 	orr.w	r3, r3, #1
 800628c:	81a3      	strh	r3, [r4, #12]
 800628e:	89a3      	ldrh	r3, [r4, #12]
 8006290:	431d      	orrs	r5, r3
 8006292:	81a5      	strh	r5, [r4, #12]
 8006294:	e7cf      	b.n	8006236 <__smakebuf_r+0x18>
	...

08006298 <_fstat_r>:
 8006298:	b538      	push	{r3, r4, r5, lr}
 800629a:	2300      	movs	r3, #0
 800629c:	4d06      	ldr	r5, [pc, #24]	@ (80062b8 <_fstat_r+0x20>)
 800629e:	4604      	mov	r4, r0
 80062a0:	4608      	mov	r0, r1
 80062a2:	4611      	mov	r1, r2
 80062a4:	602b      	str	r3, [r5, #0]
 80062a6:	f7fb fc33 	bl	8001b10 <_fstat>
 80062aa:	1c43      	adds	r3, r0, #1
 80062ac:	d102      	bne.n	80062b4 <_fstat_r+0x1c>
 80062ae:	682b      	ldr	r3, [r5, #0]
 80062b0:	b103      	cbz	r3, 80062b4 <_fstat_r+0x1c>
 80062b2:	6023      	str	r3, [r4, #0]
 80062b4:	bd38      	pop	{r3, r4, r5, pc}
 80062b6:	bf00      	nop
 80062b8:	200002f4 	.word	0x200002f4

080062bc <_isatty_r>:
 80062bc:	b538      	push	{r3, r4, r5, lr}
 80062be:	2300      	movs	r3, #0
 80062c0:	4d05      	ldr	r5, [pc, #20]	@ (80062d8 <_isatty_r+0x1c>)
 80062c2:	4604      	mov	r4, r0
 80062c4:	4608      	mov	r0, r1
 80062c6:	602b      	str	r3, [r5, #0]
 80062c8:	f7fb fc31 	bl	8001b2e <_isatty>
 80062cc:	1c43      	adds	r3, r0, #1
 80062ce:	d102      	bne.n	80062d6 <_isatty_r+0x1a>
 80062d0:	682b      	ldr	r3, [r5, #0]
 80062d2:	b103      	cbz	r3, 80062d6 <_isatty_r+0x1a>
 80062d4:	6023      	str	r3, [r4, #0]
 80062d6:	bd38      	pop	{r3, r4, r5, pc}
 80062d8:	200002f4 	.word	0x200002f4

080062dc <_sbrk_r>:
 80062dc:	b538      	push	{r3, r4, r5, lr}
 80062de:	2300      	movs	r3, #0
 80062e0:	4d05      	ldr	r5, [pc, #20]	@ (80062f8 <_sbrk_r+0x1c>)
 80062e2:	4604      	mov	r4, r0
 80062e4:	4608      	mov	r0, r1
 80062e6:	602b      	str	r3, [r5, #0]
 80062e8:	f7fb fc38 	bl	8001b5c <_sbrk>
 80062ec:	1c43      	adds	r3, r0, #1
 80062ee:	d102      	bne.n	80062f6 <_sbrk_r+0x1a>
 80062f0:	682b      	ldr	r3, [r5, #0]
 80062f2:	b103      	cbz	r3, 80062f6 <_sbrk_r+0x1a>
 80062f4:	6023      	str	r3, [r4, #0]
 80062f6:	bd38      	pop	{r3, r4, r5, pc}
 80062f8:	200002f4 	.word	0x200002f4

080062fc <memchr>:
 80062fc:	4603      	mov	r3, r0
 80062fe:	b510      	push	{r4, lr}
 8006300:	b2c9      	uxtb	r1, r1
 8006302:	4402      	add	r2, r0
 8006304:	4293      	cmp	r3, r2
 8006306:	4618      	mov	r0, r3
 8006308:	d101      	bne.n	800630e <memchr+0x12>
 800630a:	2000      	movs	r0, #0
 800630c:	e003      	b.n	8006316 <memchr+0x1a>
 800630e:	7804      	ldrb	r4, [r0, #0]
 8006310:	3301      	adds	r3, #1
 8006312:	428c      	cmp	r4, r1
 8006314:	d1f6      	bne.n	8006304 <memchr+0x8>
 8006316:	bd10      	pop	{r4, pc}

08006318 <_init>:
 8006318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800631a:	bf00      	nop
 800631c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800631e:	bc08      	pop	{r3}
 8006320:	469e      	mov	lr, r3
 8006322:	4770      	bx	lr

08006324 <_fini>:
 8006324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006326:	bf00      	nop
 8006328:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800632a:	bc08      	pop	{r3}
 800632c:	469e      	mov	lr, r3
 800632e:	4770      	bx	lr
